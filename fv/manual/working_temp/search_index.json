[["index.html", "TUFLOW FV User Manual ", " TUFLOW FV User Manual July 2024 "],["overview.html", "Overview About this manual How to use this manual", " Overview MJS TODO. Need to update this section, not yet done. About this manual This document is the user manual for TUFLOW FV. How to use this manual Navigation This manual is designed for digital use within any web browser and has the following features: Section headers, to level three, are directly navigable via the left hand pane’s table of contents. This table of contents pane can be toggled on and off from view via the “s” key if more or less page width is required The angled arrows that float at the left and right hand side midpoints of every page can be used to navigate sequentially back and forth to the commencement of preceding or subsequent top level sections Model commands, parameters and cross references for tables and figures are navigable through hyperlinks, where appropriate. This includes parameters within equations, which will also appear as blue hyperlinks when active The space bar can be used to scroll down within each page without skipping text. Shift + space bar will similarly scroll up Browser back and forward buttons (or their equivalent keyboard shortcuts alt + \\(\\langle\\)left arrow\\(\\rangle\\) and alt + \\(\\langle\\)right arrow\\(\\rangle\\), respectively) can be used to navigate through browsing history. Some browsers may not return to the precise scroll location in a page last visited, but to the last clicked section header. Hyperlinks have been built into the body of the manual, and these can be used in lieu of browser buttons if required It is recommended that this manual be viewed in a browser window that is maximised or operating in full screen mode, with the latter (although browser dependent) typically toggled via the F11 key. When following hyperlinks, the target (i.e. location on a webpage that is being navigated to) is displayed at the top of the landing page (the page navigated to). The exception to this occurs when a target is located near the bottom of the landing page’s content. In this case, it is not possible for a web browser to display the target at the top of a page because this would generate underlying white space, and as such, the target will appear in the main body (i.e. not at the top) of the landing page. Searching This entire manual’s content can be searched by using the search box at the top of the table of contents pane (i.e. screen top left to the right of the TUFLOW logo). This search box can be toggled on and off by clicking the search icon (magnifying glass) at the top left of any page. The table of contents is dynamically filtered in response to entering text in the search box, and clicking on any remaining table of contents entry will navigate directly to the searched text. Searched text will be highlighted within a page for easy identification, and multiple instances within one page can be navigated through by using the up and down arrow keys. Clearing the search box will restore the table of contents. Tables Where appropriate, tables are searchable via use of the search box, which is located at the top right of any search enabled table. Not all tables are searchable. When text is entered into the search box, table rows are dynamically filtered to only show those that contain the search text. This allows on-the-fly condensing of large tables so that only relevant content is presented. Tables can be sorted alphabetically (or reverse alphabetically) with respect to any column by clicking (and re-clicking) column headers. Where appropriate, the number of rows displayed is selectable via the Show entries drop down. Undisplayed rows can be accessed by clicking Previous or Next or by using the numbered navigation boxes, all of which are located at the bottom of each table. Below is an example of a searchable table. Type “erosion” (with or without the inverted commas) into the search box to see the table behaviour, or change the number of rows displayed and use the navigation buttons at the bottom of the table to look through all the data. The right hand “Links” column sometimes has hyperlinked words that allow navigation between related commands, or different versions of the same command, for ease of access if appropriate. MJS to update. Command Description Links method == \\(\\langle\\)washoff1,shear1\\(\\rangle\\) Used in a material block within a pollutant export model block to set the pollutant export model. Simulation construction section ??. \\(\\text{ }\\) depthThreshold == \\(\\langle\\)\\(d\\)\\(\\rangle\\) Used in a material block within a pollutant export model block to set the minimum cell water depth at which pollutant export can occur. Applies to all pollutant export methods. Simulation construction section ??. \\(\\text{ }\\) limit == \\(\\langle\\)\\(L_{acc}\\),\\(L_{shr}\\)\\(\\rangle\\) Used in a material block within a pollutant export model block to set an accumulation (washoff model) or erosion (shear model) limit. . Simulation construction section ??. \\(\\text{ }\\) rate == \\(\\langle\\)\\(R_a\\)\\(\\rangle\\) Used in a material block within a pollutant export model block to set the rate at which a pollutant accumulates to its dry store. Applies only to accumulation pollutant export methods. It is not used for erosion pollutant export models. Simulation construction section ??. \\(\\text{ }\\) timeConstant == \\(\\langle\\)\\(T_c\\)\\(\\rangle\\) Used in a material block within a pollutant export model block to control the rate at which a pollutant is released from its dry store. Applies only to accumulation pollutant export methods. It is not used for erosion pollutant export models. Simulation construction section ??. \\(\\text{ }\\) rainThreshold == \\(\\langle\\)\\(R_r\\)\\(\\rangle\\) Used in a material block within a pollutant export model block to set the minimum rainrate threshold at which a pollutant is released from its dry store. Pollutant export is suppressed below this rate. Applies only to accumulation pollutant export methods. It is not used for erosion pollutant export models. Simulation construction section ??. \\(\\text{ }\\) depositionStress == \\(\\langle\\)\\(\\tau_{cd}\\)\\(\\rangle\\) Used in a material block within a pollutant export model block to set the maximum bed shear stress that allows for deposition to occur. This deposition represents a transfer from a pollutant’s wet to dry store. Deposition will not occur at shear stresses above this value. Applies only to shear stress pollutant export methods. It is not used for accumulation washoff pollutant export models. Simulation construction section ??. \\(\\text{ }\\) erosionStress == \\(\\langle\\)\\(\\tau_{ce}\\)\\(\\rangle\\) Used in a material block within a pollutant export model block to set the minimum bed shear stress that allows for erosion to occur. This erosion represents a transfer from a pollutant’s dry to wet store. Erosion will not occur at shear stresses below this value. Applies only to shear stress pollutant export methods. It is not used for accumulation washoff pollutant export models. Simulation construction section ??. \\(\\text{ }\\) depositionVelocity == \\(\\langle\\)\\(w_s\\)\\(\\rangle\\) Used in a material block within a pollutant export model block to set the settling velocity of a pollutant. This settling represents a transfer from a pollutant’s wet to dry store. Settling occurs at all times in the accumulation washoff pollutant export model. Settling only occurs once bed shear stress drops below the user specified value in the shear stress pollutant export model. Simulation construction section ??. \\(\\text{ }\\) erosionRate == \\(\\langle\\)\\(E_r\\)\\(\\rangle\\) Used in a material block within a pollutant export model block to set the erosion rate of a pollutant. This erosion represents a transfer from a pollutant’s dry to wet store. Erosion only occurs once bed shear stress increases above the user specified value. Erosion will not occur at shear stresses below this value. Applies only to shear stress pollutant export methods. It is not used for accumulation washoff pollutant export models. Simulation construction section ??. \\(\\text{ }\\) Hardware == \\(\\langle\\)GPU,CPU\\(\\rangle\\) Used in the General commands section of a TUFLOW CATCH control file to set the simulation hardware. This command can be overwritten in the catchment hydraulic model or receiving model blocks if needed. Simulation construction section ??. \\(\\text{ }\\) GIS Format == \\(\\langle\\)SHP,GPKG,MI\\(\\rangle\\) Used in the General commands section of a TUFLOW CATCH control file to set the GIS format of the simulation. This command can be overwritten in the catchment hydraulic model or receiving model blocks if needed. Simulation construction section ??. \\(\\text{ }\\) SHP Projection == \\(\\langle\\)\\(\\rangle\\) Used in the General commands section of a TUFLOW CATCH control file to set the path to the SHP file containing the TUFLOW CATCH model projection. Simulation construction section ??. \\(\\text{ }\\) Date Format == \\(\\langle\\)ISODATE,hours\\(\\rangle\\) Used in the General commands section of a TUFLOW CATCH control file to set the simulation date format. It is strongly recommended that ISODATE (dd/mm/yyyy hh:mm:ss) be deployed rather than hours. Simulation construction section ??. \\(\\text{ }\\) Start Date == \\(\\langle\\)\\(\\rangle\\) Used in the General commands section of a TUFLOW CATCH control file to set the simulation start date in the format declared by Date Format ==. It is strongly recommended that ISODATE (dd/mm/yyyy hh:mm:ss) be deployed rather than hours. Simulation construction section ??. \\(\\text{ }\\) End Date == \\(\\langle\\)\\(\\rangle\\) Used in the General commands section of a TUFLOW CATCH control file to set the simulation start date in the format declared by Date Format ==. It is strongly recommended that ISODATE (dd/mm/yyyy hh:mm:ss) be deployed rather than hours. Simulation construction section ??. \\(\\text{ }\\) Colour coding is often used for distinguishing different tabulated data types. In the above example, TUFLOW CATCH commands are pink and the associated argument options for each command are blue and contained in angled parentheses. Clicking on these arguments will navigate to related content. Colour coding applied to other table types is explained throughout this manual when required. Commands Where specific commands are described, they appear in highlighted text, and often as a clickable link to the corresponding command description in Appendix A. That Appendix is a searchable table of all commands, as per the demonstration table presented in this introduction. The below is an example of a TUFLOW CATCH command. \\(\\newcommand{\\blockindent}{\\hspace{0.5cm}}\\) Catch BC Output Folder == Where commands specify parameters (e.g. erosion rates etc.) then for consistency and brevity, these parameters are included directly in the command example using their notation (see following section that describes notation) rather than descriptive words. These notated parameters are also often a clickable link to descriptive explanations in Appendix B. The link below is an example of a TUFLOW CATCH command with a parameter presented in notation form. CSV Write Frequency Day ==\\(dT_{csv}\\) Parameter notation The primary groups of parameters are listed below, with the letter or symbol used to denote each. Typical generalisations of units are parenthesised. Time steps, \\(dT\\) (seconds or days) Rates, \\(R\\) (mass per unit area per unit time, or rain rate) Limits, \\(L\\) (mass per unit area) Concentrations, \\(C\\) (mass per unit volume) Time constants, \\(T\\) (seconds) Water depths, \\(d\\) (metres) Shear, \\(\\tau\\) (Newtons per square metre) Velocities, \\(w\\) (metres per second) Erosion rates, \\(E\\) (grams per metres squared per second) Feedback Constructive suggestions to improve this manual are welcome, and can be emailed to support@tuflow.com. "],["Intro-1.html", "Section 1 Introduction 1.1 TUFLOW Products 1.2 TUFLOW FV 1.3 TUFLOW Webinars 1.4 Modelling Environment", " Section 1 Introduction 1.1 TUFLOW Products TUFLOW Products includes a suite of hydraulic modelling software for the numerical simulation of urban drainage, catchment runoff, flooding, pollutant export, as well as estuarine, lacustrine and coastal hydrodynamics and associated environmental processes. Developed through close collaboration with universities user base, TUFLOW software is known for its high scientific standard, accuracy, rigorous benchmarking, and workflow efficiency. The TUFLOW suite includes two primary pieces of software. TUFLOW FV a 2D and 3D capable flexible mesh solver with optional 1D elements as the computational structure. It uses a 1st or 2nd order spatial finite volume solver, supporting both triangular and quadrilateral cells in the computational domain. TUFLOW FV specialises in coastal, estuarine, wetland and lake hydrodynamic studies. It is also used used to model rivers when environmental processes such as sediment transport and/or water quality need to be assessed. To model environmental processes, TUFLOW FV offers advanced Advection Dispersion (AD), Sediment Transport and Morphology (ST), Particle Tracking (PT) and Water Quality (WQ) capabilities. This manual describes the commands, science and setup instructions for constructing models in TUFLOW FV. References to “TUFLOW” in this manual refer to the TUFLOW FV solver. TUFLOW Classic/HPC is TUFLOW’s fixed grid of square two-dimensional (2D) cells with optional one-dimensional (1D) elements and networks as the computational structure. TUFLOW Classic/HPC presently includes two 2D computational solver options, coupled to several 1D solvers: TUFLOW’s “Classic” solver is a 2D ADI (Alternating Direction Implicit) 2nd order spatial finite difference CPU (Central Processing Unit) solver. TUFLOW Classic was the original TUFLOW 2D solver, which started development in 1989. TUFLOW’s “HPC” (Heavily Parallelised Compute) solver is a 2D explicit, 1st or 2nd order spatial and 4th order temporal, parallelised finite volume solver. TUFLOW HPC can use either CPU and Graphics Processor Unit (GPU) hardware for its compute. GPU hardware acceleration enables TUFLOW HPC to run simulations up to 100 times faster than Classic. TUFLOW HPC was originally added to the TUFLOW suite in 2011 initially as a 1st order spatial solver known as TUFLOW GPU, then in 2018 as a more accurate 2nd order spatial solver. In addition to offering much faster run-times, TUFLOW HPC offers industry leading accuracy that is the same or better than Classic, shock-capturing and excellent stability with zero mass error. TUFLOW 1D (ESTRY) is an explicit finite difference 1D solver. TUFLOW 1D is a powerful open channel and underground pipe network solver, which started development in 1972 and has continued to be enhanced to the present day. TUFLOW 1D is dynamically linked to both the Classic and HPC 2D solvers. EPA SWMM 1D (SWMM) is a widely used 1D program for simulating urban and non-urban watersheds’ hydrologic and hydraulic behaviour. Initially developed in the early 1970s by the US Environmental Protection Agency (EPA), the model has since undergone numerous updates and enhancements to become one of the most used 1D stormwater runoff tools in North America. SWMM is dynamically linked to the TUFLOW HPC 2D solver. Several third-party 1D solvers are also linked to TUFLOW Classic/HPC/TUFLOW 1D – see www.tuflow.com/products/gui-options/. TUFLOW Classic/HPC is well suited to simulating integrated urban drainage (surface inundation and sub-surface pipe flows), distributed hydrology direct rainfall (rain-on-grid) catchment runoff and flooding. This manual DOES NOT provide user guidance for TUFLOW. The TUFLOW FV manual is available for download from the TUFLOW website. Linkage between TUFLOW HPC and TUFLOW FV is available using the TUFLOW CATCH Module. 1.2 TUFLOW FV 1.2.1 Flexible Mesh Finite Volume Solver TUFLOW FV is the flexible-mesh finite-volume hydrodynamic engine in the TUFLOW suite, based on decades of TUFLOW development and refined through successive releases since the early 2010s. It is applied to coastal, estuarine, riverine, lake, and reservoir studies that require accurate, reliable performance for project and research delivery. The solver implements a conservative finite-volume formulation of the depth-averaged non-linear shallow-water equations on flexible meshes—unstructured (triangular/quadrilateral) and structured (rectilinear)—to efficiently represent complex shorelines, channels, and coastal geometries. Core numerics provide robust wetting/drying and shock-capturing for highly transient conditions (e.g., hydraulic jumps and tsunami waves), supporting both subcritical and supercritical regimes. Extended capabilities 3D hydrodynamics, advection–dispersion, sediment transport, water quality, and particle tracking are available via TUFLOW FV’s modules as described in Section 1.2.2. Cartesian and Spherical coordinate models are supported, implementing standard driving terms and external forcings such bed friction, sub-grid-scale momentum mixing, Coriolis effects, wind stress, rainfall/evaporation, and atmospheric pressure. Boundary options cover common coastal, estuarine and river applications: water level (stage), discharge and stage–discharge relations, and both point and moving-point inflows. Spatially and temporally varying fields (e.g., wind or pressure) can be applied domain-wide, and optional spectral wave inputs may be used where wave setup or wave–current interaction is required. High-resolution local models can be driven from larger-scale systems via nesting and boundary-generation workflows, streamlining transfer of water level, velocity, and related forcing from regional hindcasts or circulation models to project-scale meshes. Model configuration follows TUFLOW’s data-layering approach: inputs are read sequentially, and later layers can override earlier ones to localise edits, such as specific bathymetry or bed classification—without duplicating base datasets. This supports clear, auditable model development. Included are TUFLOW’s powerful and unique simulation management features: model scenarios, events, and usef-defined variables. These allow many simulations to be run using combinations from a single well-configured model run file. Coupled with batch/multi-run execution, restart chaining, and scheduler-friendly command-line operation, TUFLOW FV models can be queued, parallelised, and automated on workstations or HPC systems—enabling overnight runs and reproducible production workflows. One-dimensional hydraulic structures that exchange mass and momentum with the 2D domain are available. Structure types such as weirs, culverts, bridges, gates, pumps, and rating-curve links connect via single nodestrings, linked nodestrings, or linked zones. Discharge and head-loss are equation-based with momentum corrections applied to connected faces/cells; operation may be fixed, time-series driven, or governed by simple control logic. Outputs include a range of 2D map results (SMS DAT/XMDF) and NetCDF, with CSV time series for analysis. TUFLOW FV integrates with common GIS/GUI tools (ArcGIS, QGIS, SMS, ParaView), and MATLAB/Python toolboxes support model build, results mapping, specialised plots, and post-processing. TUFLOW FV can be executed on Windows of Linux using either CPU or GPU hardware, with GPU available via the TUFLOW FV GPU Module (Section 1.2.2.6) The CPU build uses shared-memory parallelism via OpenMP to scale across available cores, while the GPU build accelerates the solver on CUDA-enabled NVIDIA devices. Results are numerically consistent to round-off between builds, so models are portable across hardware (and operating systems). 1.2.2 Add-on Modules 1.2.2.1 Three Dimensional (3D) Module The TUFLOW FV 3D module resolves vertical structure on sigma-coordinate or hybrid z-coordinate vertical meshes, adding baroclinic pressure-gradient terms so that flow can respond to density variations from temperature, salinity, and suspended sediment. The conservative finite-volume scheme is well suited to reproducing strong gradients—such as stratification, fronts, and sharp pycnoclines—while maintaining mass balance and numerical robustness required to reproduce observed behaviours in estuaries, lakes, reservoirs, and coastal systems. TUFLOW FV includes built-in vertical turbulence and scalar-mixing options based on k-ε and k-ω closures, providing consistent eddy viscosity and diffusivity for momentum and tracers. Background terms and limiters can be configured to maintain stability across weakly and strongly stratified regimes. Via the AD module, a fully integrated atmospheric heat-exchange balance is available to drive temperature evolution from standard meteorological inputs, and boundary conditions accommodate baroclinic inflows/outflows and initial-condition specification. For analysis, a range of 3D visualisation and data-extraction tools are supported in QGIS, the TUFLOW FV Python Toolbox, and the TUFLOW FV MATLAB Toolbox, including vertical profiles, slices, layer maps, and depth-averaged products for streamlined calibration and reporting. 1.2.2.2 Advection–Dispersion/Diffusion (AD) Module The TUFLOW FV AD Module performs scalar transport for temperature, salinity, suspended sediment, conservative tracers, and tracers with simple decay and/or settling. It also carries the transport of water-quality constituents (advection and diffusion only) all transformations/biogeochemistry are handled by the WQ Module. Because it owns the scalar advection diffusion machinery, the AD Module is required whenever temperature, salinity, tracers, suspended sediment, or water-quality constituents are modelled. AD can be run in 2D or 3D, either coupled to the hydrodynamics or in transport-only mode using a pre-computed velocity field. Diffusivity may be constant or space/time varying, with support for source/sink loads and flexible initial/boundary conditions. When temperature and/or salinity are included, baroclinic pressure-gradient coupling can be activated so the hydrodynamics respond to density gradients. The module also hosts the fully integrated atmospheric heat-exchange engine, computing surface heat fluxes from standard meteorological inputs to drive temperature evolution. More complex sediment processes (e.g., erosion/deposition, bed exchange) reside in the ST Module, and biogeochemical reactions reside in the WQ Module. 1.2.2.3 Sediment Transport (ST) Module The TUFLOW FV Sediment Transport Module simulates two- and three-dimensional bed and suspended load across creeks, rivers, reservoirs, estuaries, and coastal/ocean environments. It handles current-driven and wave-enhanced transport, water-column/bed exchange through erosion and deposition, and bed level change with full hydrodynamic feedback. Suspended sediment is advected and dispersed by the flow field, while bedload is routed along the bed with slope and curvature effects, enabling representation of bars, channels, and shoreface evolution under transient forcing. Process options include standard formulations for non-cohesive transport and dedicated laws for cohesive erosion and deposition, with user control over critical shear stresses, availability limits, and settling velocity specifications. The framework supports consolidation, hindered settling and near-bed concentration effects, and slope-driven gravity corrections; morphological updating is mass-conservative and can be accelerated where appropriate for long-term studies. Wave inputs may be supplied to account for wave-current interactions in transport and morphology. One or more sediment fractions can be defined and tracked in both the water column and the bed. Fractions may be configured as cohesive or non-cohesive with independent selection of transport equations and parameters, allowing grain-size-dependent behaviour, sorting/armouring, hiding–exposure, and multi-layer bed stratigraphy with an active layer. This fraction-based approach enables targeted calibration and scenario testing across mixed beds, dredging and disposal operations, and morphology change assessments. The module accepts spatially and temporally varying sources and boundary concentrations, and provides diagnostics to support QA and calibration, including mass budgets, erosion/deposition totals, bed level change, shear stress metrics, and fraction-wise inventories. Outputs are available as maps, time series, and profiles/curtains, aligning with TUFLOW FV’s post-processing toolboxes for efficient analysis and reporting. Documentation for the TUFLOW FV ST module is available in the TUFLOW FV Sediment Transport and Particle Tracking Modules User Manual. 1.2.2.4 Water Quality (WQ) Module The TUFLOW FV WQ Module enables two- and three-dimensional simulation of water quality and ecological processes, with a configurable level of complexity to suit project needs. It builds on the AD Module for transport and adds in-system transformations for user-specified constituents. Typical constituents include dissolved oxygen, inorganic nitrogen and phosphorus, silicate, labile and refractory organic matter, phytoplankton (one or more groups), and pathogens (one or more groups). Process representations include water-column transformations between constituents, benthic exchange with the sediment bed (for example, sediment oxygen consumption), and atmospheric exchange such as oxygen dissolution and rainfall deposition. Phytoplankton dynamics include primary productivity, respiration, and exudation; pathogen dynamics include mortality, inactivation, settling, and attachment/detachment. Settling and re-entrainment terms may be applied where relevant to close constituent mass balances. The framework supports spatially and temporally varying initial and boundary conditions, external loads, and scenario-specific parameter sets. Mass-balance diagnostics and constituent budgets are provided to assist calibration and QA/QC, and outputs align with TUFLOW FV post-processing tools for mapping, profiles/curtains, and time-series analysis in 2D or 3D. Documentation for the TUFLOW FV WQ module is available in the TUFLOW FV Water Quality (WQ) Module User Manual. 1.2.2.5 Particle Tracking (PT) Module The Particle Tracking Module simulates discrete Lagrangian particles in 2D or 3D, advected by the modelled flow and optional external forcings such as wind drift. It complements the Eulerian transport framework by representing individual parcels or organisms whose trajectories, residence times, and fates are not easily captured by concentration fields. Particle behaviour options include settling and buoyancy, first-order decay, sedimentation and resuspension, stochastic dispersion, and simple interaction rules with boundaries and shorelines (for example, beaching or stranding). Particles can be released from fixed points, lines, areas, or moving sources, with flexible schedules and attributes for scenarios such as spills, larvae releases, or debris trajectories. Outputs include particle positions, age, and state/fate classifications, along with diagnostics to support QA such as counts per class and time-in-zone metrics. Results are provided for mapping, time series, and profile/curtain visualisation, aligning with QGIS, the TUFLOW FV Python Toolbox, and the MATLAB Toolbox to streamline analysis and reporting. Documentation for the TUFLOW FV PT module is available in the TUFLOW FV Sediment Transport and Particle Tracking Modules User Manual. 1.2.2.6 GPU Hardware (GPU) Module The TUFLOW FV GPU Module is required to run TUFLOW FV on NVIDIA CUDA-capable GPUs. It enables drop-in acceleration of the standard solver with identical inputs and outputs to the CPU build, and results that are numerically consistent to round-off. Substantial runtime reductions are achievable for large meshes and long simulations, with project benchmarks reporting order-of-magnitude speedups, including cases exceeding 140× versus a single-core CPU. 1.2.2.7 TUFLOW CATCH Module The TUFLOW CATCH module facilitates seamless simulation of whole-of-catchment hydrologic, hydraulic, pollutant export and receiving waterway processes. It supports 1D, 2D and 3D simulation of these process from the very top of catchment to the receiving waterway outlet via accurate numerical simulation of the key physics that drive catchment / receiving water hydrodynamics. A TUFLOW CATCH module licence enables both the pollutant generation features in TUFLOW HPC, and TUFLOW HPC to TUFLOW FV automated boundary condition information transfer functionally. It also provides an option for coordinated execution of linked TUFLOW HPC and TUFLOW FV models. Documentation for the TUFLOW CATCH module is available in the TUFLOW CATCH User Manual. 1.2.3 Benchmarking Studies The “Desktop Review of 2D Hydraulic Modelling Packages” report (Néelz and Pender 2009) released in the United Kingdom by the Environment Agency highlighted the rapidly growing number of hydraulic modelling packages available for flood inundation estimation. A vast amount of documentation exists on appropriate applications of each modelling package however little of it discusses the influence that the choice of modelling package may have. The conclusions of the report recommended a series of benchmarking test cases to provide guidance on choosing the appropriate modelling package for future applications. In response to the recommendations, a series of 10 2D flood inundation modelling benchmarking tests were conducted in 2010 using a variety of modelling packages. Additional testing was undertaken in in 2012 and published in 2013 due to the availability of new modelling packages and the further development undertaken on existing modelling packages. 15 software development organisations tested a total of 19 modelling packages. The results are documented in the report, “Benchmarking the Latest Generation of 2D Hydraulic Modelling Packages” (Néelz, S. and Pender, G. 2013). The TUFLOW suite was submitted for the initial phase of testing in 2010 with all three 2D schemes, TUFLOW’s implicit and explicit GPU solvers, and TUFLOW FV’s explicit solvers undergoing the more recent phase of testing in 2012. The results demonstrated consistency between each of the three TUFLOW engines and with other fully dynamic schemes. All three TUFLOW engines were found to be suitable for the following applications: Prediction of inundation extent Prediction of maximum depth Prediction of maximum velocity Prediction of temporal variation in inundation extent Prediction of temporal variation in depth Prediction of temporal variation in velocity The 10 tests are outlined in Table 1.1. For further information refer to “Benchmarking the Latest Generation of 2D Hydraulic Modelling Packages” (Néelz, S. and Pender, G. 2013). All tests were completed using TUFLOW FV with the exception of Tests 7 and 8B. These two tests require 1D/2D linking which is currently in development. Table 1.1: United Kingdom Environment Agency Benchmark Tests Test Number Description Purpose 1 Flooding a disconnected water body Assess basic capability to simulate flooding of disconnected water bodies on floodplains or coastal areas. 2 Filling of floodplain depressions Tests capability to predict inundation extent and final flood depth for low momentum flow over complex topographies. 3 Momentum conservation over a small (0.25m) obstruction Tests capability to simulate flow at relatively low depths over an obstruction with an adverse slope. 4 Speed of flood propagation over an extended floodplain Tests simulation of speed of propagation of flood wave and the prediction of velocities at the leading edge of the advancing flood. 5 Valley flooding Tests simulation of major flood inundation at the valley scale. 6A and 6B Dam break Tests simulation of shocks and wake zones close to a failing dam. 7 River to floodplain linking Evaluates capability to simulate flood volume transfer between rivers and floodplains using 1D to 2D model linking. This test has not yet been undertaken for TUFLOW FV but will be included following 1D/2D integration. 8A and 8B Rainfall and sewer surcharge flood in urban areas Tests capability to simulate shallow flows in urban areas with inputs from rainfall (8A) and sewer surcharge (8B). Test 8B has not yet been undertaken for TUFLOW FV but will be included following 1D/2D integration. 1.3 TUFLOW Webinars The TUFLOW team run regular educational webinars online that aim to teach modellers, TUFLOW or otherwise, the fundamentals of hydraulic modelling. The webinars are free to watch live and can be viewed afterwards at no cost. Visit the TUFLOW Website Webinar Page to register for upcoming events, or to watch recordings of past webinars. At the time of writing, the following webinars have been recorded and are available for viewing. New topics and recordings will continue to be added as they are produced. November 2023: Real-time Flood Forecasting October 2023: Integrated Catchment &amp; Receiving Water Modelling August 2023: Sediment Transport Modelling Applications June 2023: Computer Hardware Purchase Advice for Hydraulic Modelling April 2023: Water Quality Modelling - Part 2 February 2023: Flood Modelling 101 November 2022: 1D, 2D, 3D Hydraulic Modelling of Bridges October 2022: Flood Modelling Quality Control September 2022: Applied Hydrodynamic Modelling - Part 2 July 2022: Applied Hydrodynamic Modelling - Part 1 June 2022: Flood Risk Management May 2022: Coastal Water Quality Modelling April 2022: Operational Structure Modelling March, 2022: 3D Coastal Modelling February 2022: Urban Pipe Network Modelling November 2021: Modelling Water Quality in Lakes October 2021: Modelling Energy Losses at Structures September 2021: Tsunami, Dam Failure and Non-Newtonian Modelling July 2021: Next Generation 2D Hydraulic Modelling June 2021: Maximising Hydraulic Model Accuracy May 2021: Coastal Modelling 101 April 2021: Hydraulic Model Calibration to Historic Events March 2021: The Future of Water Quality Modelling February 2021: Is Direct Rainfall (Rain-on-Grid) Accurate? December 2020: 2D and 3D Sediment Transport Modelling November 2020: 2D Cell Size Selection for Accurate Hydraulic Modelling October 2020: Hardware Selection and Trends in Hydraulic Modelling More… 1.4 Modelling Environment TUFLOW offers a different but very powerful and workflow efficient approach to modelling compared with other hydrodynamic modelling software. The approach combines simple and very easy to produce control files or scripts with the immense power of GIS software. The fundamental software for building TUFLOW models and viewing results are a text editor, spreadsheet software and GIS software, as shown in Table 1.2. The free‑to‑use TUFLOW Viewer QGIS Plugin greatly enhances a modeller’s ability to quickly view time-series and map outputs, animate results and compare different simulations. The TUFLOW Viewer is documented on the TUFLOW Wiki. TUFLOW’s implementation of this GIS based modelling environment approach offers major benefits, including: TUFLOW scripts (control files) allow modellers to readily and easily setup, modify and run numerous simulations, whether it be different calibration events, a batch of design events or various what-if scenarios investigating flood mitigation options. The modelling framework avoids the duplication of input datasets during the versioning of models. For example, the base DEM might be used by hundreds or thousands of simulations during a study, but it only needs to exist once; there is no need to copy the DEM for each simulation as is the case for GUI-based software. TUFLOW benefits from the unparalleled power of GIS as a “work environment”. GIS software are industry leaders at efficiently managing large, complex and numerous spatial datasets. GIS includes a suite of excellent data management, manipulation and presentation tools. The QGIS TUFLOW Viewer Plugin greatly enhances modellers’ ability to setup and view models and their results. Working directly in GIS means model input data is geographically referenced, not 2D grid referenced, this supports workflow efficient model updates (such as changes to the model 2D cell size specification or boundary condition locations). Model results are written to non-proprietary open data formats compatible with most GIS software. This facilitates the efficient production of high-quality GIS based mapping for reports, brochures, plans and displays. TUFLOW is compatible with numerous different GIS packages (e.g. ArcGIS, QGIS and MapInfo). Modellers can chose to use the GIS software package of their choice. Seamless handover of model inputs and results to clients requiring data in GIS format. Clients are not required to purchase a TUFLOW licence to view results. Superior data and modelling quality control. Section 3.1 outlines a variety of software packages available for constructing TUFLOW models and visualising simulation results. It lists a range of GIS software and also third party Graphical User Interface (GUI)’s options from TUFLOW’s partner organisations. This manual focuses on TUFLOW’s modelling within the GIS environment. For documentation relating to third-party TUFLOW GUIs, please refer to the third party’s product manual. Table 1.2: TUFLOW Modelling Environment Software A Text Editor is used to create and edit TUFLOW simulation control files. The control files list all the simulation commands and file path references to the above mentioned GIS and tabular datasets. Spreadsheet Software is used to tabulate time-series and other non-geographically located data. GIS Software is used to set up, modify, thematically map and manage all geographic inputs and to view simulation results. QGIS’s TUFLOW Viewer Plugin greatly enhances the modelling experience. \\(\\newcommand{\\blockindent}{\\hspace{0.5cm}}\\) "],["Arch-1.html", "Section 2 Architecture 2.1 Context 2.2 Simulation Tiers", " Section 2 Architecture This section provides a description of TUFLOW FV’s core architecture. This description is intentionally introductory, and details required to set up and execute simulations are provided in model construction Chapters 5 to 10. The manual’s overview should be reviewed for instructions regarding the use of interactive components deployed in this section. 2.1 Context MJS TODO. Thoughts on whether this context section is needed MEB given all the content in the intro? 2.2 Simulation Tiers The architecture of TUFLOW FV’s tiers is described below using the nomenclature of Figure 2.1 MJS need to create figure. Every TUFLOW FV simulation has the following tiers: Tier 1: One instance from a simulation class. This is user defined Tier 2: A suite of instances from a model class. A mandatory suite of model class instances is required for each simulation class Tier 3: An implementation of each model class instance (these are user selectable and there is typically more than one model implementation available to choose from within a given model class instance) Figure 2.1: TUFLOW FV model architecture tiers MJS TODO: Develop template fvcs for each sim class and drop on the website. Discuss it here… Simulation tiers are described below. MJS TODO: Duplicate nodes within the interactive figures need fixing with some excel/R smarts. 2.2.1 Tier 1: Simulation Class This is the highest and overarching tier of TUFLOW FV’s architecture. The available simulation classes are provided in Table 2.1 as their keywords, together with example uses of each. Table 2.1: TUFLOW FV simulation class instances Simulation Class Instance Potential Uses 2D HD Simulation of 2D hydrodyanmic use cases such as: \\(\\cdot\\quad\\)Storm tide or tsunami impact assessement \\(\\cdot\\quad\\)Astronomical tide modelling \\(\\cdot\\quad\\)Flooding and floodplain management 3D HD Simulation of 3D hydrodyanmic use cases which do not require the simulation of salinity, temperautre and density effects such as: \\(\\cdot\\quad\\)Rudimentary scour assessment \\(\\cdot\\quad\\)Hydraulic structure design \\(\\cdot\\quad\\)Flooding and floodplain management AD Simulation in 2D or 3D with salinty, temperature and/or non-transformative tracers for use cases such as: \\(\\cdot\\quad\\)Coastal and esturine assessments \\(\\cdot\\quad\\)Lake hydrodynamics \\(\\cdot\\quad\\)Rudimentary tracer assessements ST Simulation of coastal, estuarine, riverine, lake and catchment sediment transport processes for use cases such as: \\(\\cdot\\quad\\)Dredging and navigation management \\(\\cdot\\quad\\)Scour assessments \\(\\cdot\\quad\\)Channel design \\(\\cdot\\quad\\)Environmental impact assessement WQ Simulation of coastal, estuarine, riverine, lake and catchment transformative water quality processes for use cases such as: \\(\\cdot\\quad\\)Disolved oxygen, inorganics and organic matter dyanmics \\(\\cdot\\quad\\)Outfall impact assessment \\(\\cdot\\quad\\)Water supply and bathing waters \\(\\cdot\\quad\\)Aquaculture operations PT Discrete particle tracking for use cases such as: \\(\\cdot\\quad\\)Environmental impact assessments \\(\\cdot\\quad\\)Rescue and salvage \\(\\cdot\\quad\\)Animal migration \\(\\cdot\\quad\\)Aquaculture operations Simulation class instances are generally cumulative, that is, a more complex class instance is dependent on the capability of a simpler class. The dependency relationship between each simulation class is provided in Table 2.2. Table 2.2: TUFLOW FV simulation class dependencies Simulation Class Instance Simulation Class Dependencies 2D HD Not applicable - 2D HD is the fundamental simulation class 3D HD 2D HD AD Either 2D HD or 3D HD ST AD WQ AD PT Can be run on any of the above simulation classes 2.2.2 Tier 2: Model Class Each simulation class contains a pre-defined suite of model classes. The model class suite required to construct each simulation class instance is provided in Table 2.3 and as a network in Figure 2.2 (MJS TODO). The required model class suite increases in size with model complexity, aligned with the simulation class dependencies presented in Table 2.2. For example: The 3D HD simulation class contains all of the 2D HD model class instances plus an instance of the 3D HD specific model class ‘Vertical Mixing Model’, or The AD simulation class uses all the model class instances from the 2D HD or 3D HD simulation class plus instances of the required model classes ‘Tracer Model’, and ‘Scalar Mixing Model’. The user can then choose to include an instance of the optional ‘Atmospheric Heat Exchange Model’ model class Similar logic applies when constructing models for the ST, WQ and PT simulation classes. Table 2.3: TUFLOW FV simulation class instances and corresponding model class suites Simulation Class Instance Model Class Suite 2D HD \\(\\cdot\\quad\\) Coordinate Reference Frame \\(\\cdot\\quad\\) Spatial Order \\(\\cdot\\quad\\) Hardware \\(\\cdot\\quad\\) Simulation Time Settings \\(\\cdot\\quad\\) Computational Timestep \\(\\cdot\\quad\\) Wetting And Drying \\(\\cdot\\quad\\) Bottom Drag Model \\(\\cdot\\quad\\) Momentum Mixing Model \\(\\cdot\\quad\\) Computational Mesh \\(\\cdot\\quad\\) Bathymetry \\(\\cdot\\quad\\) Materials \\(\\cdot\\quad\\) Initial Conditions \\(\\cdot\\quad\\) Boundary Conditions \\(\\cdot\\quad\\) Hydraulic Structures (Optional) \\(\\cdot\\quad\\) Model Output 3D HD 2D HD Simulation Class + \\(\\cdot\\quad\\) Vertical Mixing Model AD 2D HD or 3D HD Simultation Class + \\(\\cdot\\quad\\) Salinity Model \\(\\cdot\\quad\\) Temperature Model \\(\\cdot\\quad\\) Tracer Model \\(\\cdot\\quad\\) Scalar Mixing Model \\(\\cdot\\quad\\) Atmospheric Heat Exchange (Optional) \\(\\cdot\\quad\\) Shortwave Radiation Model (Optional) \\(\\cdot\\quad\\) Longwave Radiation Model (Optional) \\(\\cdot\\quad\\) Latent Heat Model (Optional) ST AD Simulation Class + \\(\\cdot\\quad\\) Sediment Model \\(\\cdot\\quad\\) Sediment Configuration WQ AD Simulation Class + \\(\\cdot\\quad\\) Water Quality Model \\(\\cdot\\quad\\) Water Quality Configuration PT Any of the above simulation classes + \\(\\cdot\\quad\\) Particle Tracking Configuration Figure 2.2: TUFLOW FV simulation class and model class instance 2.2.3 Tier 3: Model Implementations Each model class instance contains a selection of available model implementations as provided in Table 2.4. MJS figures to be developed. More discussion needed here… Table 2.4: TUFLOW FV model classes and available model implementations Model Class Model Implementation Coordinate Reference Frame \\(\\cdot\\quad\\)Cartesian (Metric Units) \\(\\cdot\\quad\\)Cartesian (US Customary Units) \\(\\cdot\\quad\\)Spherical (Metric Units) Spatial Order \\(\\cdot\\quad\\)First Order \\(\\cdot\\quad\\)Second Order Hardware \\(\\cdot\\quad\\)CPU \\(\\cdot\\quad\\)GPU Simulation Time Settings \\(\\cdot\\quad\\)Hours \\(\\cdot\\quad\\)ISODate Computational Timestep \\(\\cdot\\quad\\)Computational Timestep Wetting And Drying \\(\\cdot\\quad\\)Wetting And Drying Bottom Drag Model \\(\\cdot\\quad\\)Manning \\(\\cdot\\quad\\)ks \\(\\cdot\\quad\\)ks (sediment coupled) Momentum Mixing Model \\(\\cdot\\quad\\)None \\(\\cdot\\quad\\)Constant \\(\\cdot\\quad\\)Smagorinsky \\(\\cdot\\quad\\)Wu Computational Mesh \\(\\cdot\\quad\\)Unstructured \\(\\cdot\\quad\\)Structured Bathymetry \\(\\cdot\\quad\\)Static (potentially multiple) \\(\\cdot\\quad\\)Time Varying (potentially multiple) Materials \\(\\cdot\\quad\\)Spatial Definition (potentially multiple) \\(\\cdot\\quad\\)Material Properties (potentially multiple) Initial Conditions \\(\\cdot\\quad\\)Spatially Constant \\(\\cdot\\quad\\)Spatially Varying (potentially multiple) \\(\\cdot\\quad\\)Restart File Boundary Conditions \\(\\cdot\\quad\\)Water Level (potentially multiple) \\(\\cdot\\quad\\)Inflow/Outflow (potentially multiple) \\(\\cdot\\quad\\)Stage Discharge (potentially multiple) \\(\\cdot\\quad\\)Ocean Circulation Model (potentially multiple) \\(\\cdot\\quad\\)Atmospheric (potentially multiple) \\(\\cdot\\quad\\)Spectral Wave (potentially multiple) \\(\\cdot\\quad\\)Mass (potentially multiple) \\(\\cdot\\quad\\)Force (potentially multiple) \\(\\cdot\\quad\\)Zero Gradient and Reflective (potentially multiple) \\(\\cdot\\quad\\)Scalar Concentration (potentially multiple) \\(\\cdot\\quad\\)Transport File Hydraulic Structures \\(\\cdot\\quad\\)Weir (potentially multiple) \\(\\cdot\\quad\\)Culvert (potentially multiple) \\(\\cdot\\quad\\)Bridge (potentially multiple) \\(\\cdot\\quad\\)Pump (potentially multiple) \\(\\cdot\\quad\\)Porous (potentially multiple) \\(\\cdot\\quad\\)User-Defined Matrix (potentially multiple) \\(\\cdot\\quad\\)User-Defined Timeseries (potentially multiple) \\(\\cdot\\quad\\)Wall (potentially multiple) \\(\\cdot\\quad\\)Operational Control (optional, potentially multiple) \\(\\cdot\\quad\\)Treatment (optional, potentially multiple) Model Output \\(\\cdot\\quad\\)Log Files And Diagnostics \\(\\cdot\\quad\\)Point (potentially multiple) \\(\\cdot\\quad\\)Line (potentially multiple) \\(\\cdot\\quad\\)Mesh (potentially multiple) \\(\\cdot\\quad\\)Hydraulic Structure (potentially multiple) \\(\\cdot\\quad\\)Mass Balance Vertical Mixing Model \\(\\cdot\\quad\\)None \\(\\cdot\\quad\\)Parametric \\(\\cdot\\quad\\)External Salinity Model \\(\\cdot\\quad\\)None \\(\\cdot\\quad\\)Conservative \\(\\cdot\\quad\\)Density Coupled Temperature Model \\(\\cdot\\quad\\)None \\(\\cdot\\quad\\)Conservative \\(\\cdot\\quad\\)Density Coupled Tracer Model \\(\\cdot\\quad\\)None \\(\\cdot\\quad\\)Conservative \\(\\cdot\\quad\\)Decay \\(\\cdot\\quad\\)Settling Scalar Mixing Model \\(\\cdot\\quad\\)None \\(\\cdot\\quad\\)Constant \\(\\cdot\\quad\\)Elder \\(\\cdot\\quad\\)Smagorinsky Atmospheric Heat Exchange \\(\\cdot\\quad\\)On \\(\\cdot\\quad\\)Off Shortwave Radiation Model \\(\\cdot\\quad\\)Jacquet \\(\\cdot\\quad\\)Zillman/Reed Longwave Radiation Model \\(\\cdot\\quad\\)Net \\(\\cdot\\quad\\)Incident (Direct) \\(\\cdot\\quad\\)Incident (TVA) \\(\\cdot\\quad\\)Incident (Zillman) \\(\\cdot\\quad\\)Incident (Chapra) Latent Heat Model \\(\\cdot\\quad\\)TVA \\(\\cdot\\quad\\)Lowe/Reed Sediment Model \\(\\cdot\\quad\\)None \\(\\cdot\\quad\\)Barotropic \\(\\cdot\\quad\\)Baroclinic Sediment Configuration \\(\\cdot\\quad\\)Sediment Control File Water Quality Model \\(\\cdot\\quad\\)TUFLOW \\(\\cdot\\quad\\)External Water Quality Configuration \\(\\cdot\\quad\\)Water Quality Control File Particle Tracking Configuration \\(\\cdot\\quad\\)Particle Tracking Control File Figure 2.3: WQ Module simulation class and model class instances, with available constituent models \\(\\newcommand{\\blockindent}{\\hspace{0.5cm}}\\) "],["GS-1.html", "Section 3 Getting Started 3.1 How to Build Your First Model 3.2 The TUFLOW Modelling Concept 3.3 Installing and Running TUFLOW 3.4 Tips and Tricks", " Section 3 Getting Started 3.1 How to Build Your First Model TUFLOW FV includes a wide range of self-education resources to aid new users learning the software. Available options include online tutorials, example models, demonstration models and eLearning modules. All models included or constructed when completing these self-education options have been designed using a licence-free mode. As such, there is no need to purchase a software licence to learn TUFLOW FV. All TUFLOW FV self-education resources are fully supported via the TUFLOW Support Services, therefore, should you have any questions while working through these self-education resources, please don’t hesitate to contact support@tuflow.com. As an alternative to self-education, if you wish to learn TUFLOW FV under the guided instruction of a TUFLOW expert, paid online and in-person training classes are also available. For further information on paid training options please contact training@tuflow.com. 3.1.1 Tutorial Models A number of free Tutorial Models are available for download and are documented in the TUFLOW FV Tutorial Introduction Wiki Page. Current tutorials include: Module 1 - Trapezoidal Channel Module 2 - Riverine Channel Module 3 - Coastal Application Module 4 - Floodplain Application Module 5 - 3D Estuary Application Module 6 - Particle Tracking Module 7 - Sediment Transport Module 8 - SWAN GIS Tools Module 9 - Water Quality The tutorials start with introductory concepts and progressively add complexity. Therefore it is recommended to complete the tutorials in order from one through nine. The tutorials have been created using QGIS as the model development environment. 3.1.2 Example Models Free Example Models are documented and are available for download via the TUFLOW FV Wiki. The example model dataset includes over 50 standalone models demonstrating the most commonly used TUFLOW features. This education resource is intended for experienced modellers wishing to further develop their skills following completion of the Tutorial Models. Unlike the tutorials, this dataset does not include step-by-step instructions. Users of this dataset are expected to have a basic knowledge TUFLOW, and have suitable skills to open the model files by referencing the TUFLOW FV Control File (FVC) referenced in the example model catalogue list. The catalogue list on the TUFLOW FV Wiki 3.1.3 Licence Free Demo Mode Setting Demo Model == ON within the .fvc file allows users to run TUFLOW FV license free (with limits) for small-scale test models using their own datasets. The limits associated with the licence-free demo mode are: The total number of 2D cells may not exceed 5,000 – this is the number of cells within the mesh. The total number of 1D channels may not exceed 100. There is only one (1) 2D domain. Simulation clock time cannot exceed 10 minutes. The model cannot use restart files. 3.1.4 Instructor Led TUFLOW Training Courses As an alternative to self-education, if you wish to learn TUFLOW under the guided instruction of a TUFLOW expert, paid online and in-person training classes are also available. For further information on paid training options please contact training@tuflow.com. 3.2 The TUFLOW Modelling Concept The fundamental software necessary for building a TUFLOW model and viewing simulation results are: Text editor. Used to create and edit TUFLOW simulation control files. The control files list all the simulation commands and file path references to the above mentioned GIS and tabular datasets. Spreadsheet software. Used for time-series and other non-geographically located data. GIS software. Used to create, modify and manage all geographic inputs and to view simulation results. Mesh generator. Used to create the computational flexible mesh topology. Figure 3.1: TUFLOW Modelling Concept Annual user survey results from the past five years indicate that the majority of TUFLOW FV modellers globally use the text editor / spreadsheet / GIS / SMS working environment approach. Within that framework, the most popular supporting software combination is Notepad++, Excel, QGIS (with the free QGIS TUFLOW Plugin) and SMS. Due to the dominant usage of these supporting software, detailed information for Notepad++, QGIS and SMS is provided in Sections @ref(GS-TTMC-NPP-3}), 3.2.2 and 3.2.3. Please note, modellers are not required to use Notepad++, Excel, QGIS and SMS. Other alternative supporting software may be used instead. A complete list of commonly used options is outlined in Table 3.1. \\(\\newcommand{\\blockindent}{\\hspace{0.5cm}}\\) Table 3.1: Supporting Software Options Software Type Suggested Software Text Editor UltraEdit / TUFLOW FV Wiki UltraEdit Tips Notepad++ / TUFLOW FV Wiki Notepad++ Tips Visual Studio Code / TUFLOW FV Wiki Visual Studio Code Tips Other: Any text editor can be used for creating TUFLOW control files, including the Microsoft Windows default, Notepad. However, the above listed editors are recommended. They allow for advanced options, such as syntax highlighting of TUFLOW control files and launching TUFLOW simulations from the text editor. Spreadsheet Software Microsoft Excel / TUFLOW FV Wiki Excel Tips Google Sheets Libre Office GIS Platforms QGIS (TUFLOW Wiki QGIS Tips) with QGIS TUFLOW Plugin. The QGIS TUFLOW Plugin provides a range of pre- and post- processing tools, and dynamic viewing of 1D and 2D results in TUFLOW Viewer. ArcGIS Pro (TUFLOW Wiki ArcGIS Tips) with Spatial Analyst for the creation of model inputs and viewing of static results. Dynamic viewing of 1D and 2D results is not available in ArcGIS. MapInfo Professional (TUFLOW Wiki MapInfo Tips) for the creation of model inputs and viewing of static results. Dynamic viewing of 1D and 2D results is not available in ArcGIS or MapInfo. QGIS (TUFLOW Wiki QGIS Tips), SMS (TUFLOW Wiki SMS Tips) or WaterRIDE are recommended to address these limitations. Mesh Generators SMS (TUFLOW FV Wiki SMS Tips) GIS Mesher (TUFLOW FV Wiki GIS Mesher) Other Software Python (TUFLOW FV Python Toolbox) MATLAB (TUFLOW FV MATLAB Toolbox) For modellers preferring to work predominantly within a Graphical User Interface (GUI) environment instead of GIS, the following TUFLOW GUI options are also available: SMS TUFLOW FV Interface 3.2.1 Notepad++ MJS TODO: Need to update the timestep limits in this pic below. Likewise the example models and any other pics in this document that show timestep limits should adhere to the recommendations we are making in the manual. Notepad++ is a free text editor available from https://notepad-plus-plus.org/downloads/. The Notepad++ functionality listed below makes it well suited as an editor for creating and updating TUFLOW control files. Click on the respective links in each bullet point for more information: Syntax Highlighting: Colour coding of TUFLOW control files, shown in Figure 3.2. Simulation Execution: The ability to start a TUFLOW FV simulation directly from Notepad++. File Navigation: The ability to open files based on the relative reference provided in a TUFLOW control file. For example an water quality control file (.fvwq) can be opened directly from the TUFLOW FV control file (.fvc) without having to locate it in Windows Explorer. Figure 3.2: NotePad++ TUFLOW Syntax Highlighting 3.2.2 QGIS / TUFLOW Viewer QGIS is free, open source GIS software available from https://www.qgis.org/. It is an official project of the Open Source Geospatial Foundation (OSGeo). It runs on Linux, Unix, Mac OSX, Windows and Android and supports numerous vector, raster, and database formats and related functionalities. MJS need to update, or create video content… If you wish to use QGIS as your model development or result viewing environment, we strongly recommend completing our free Introduction to QGIS for TUFLOW eLearning. It teaches how to configure QGIS for TUFLOW modelling and provides an entry level overview on how to use the software. We also recommend installing the free QGIS TUFLOW Plugin. The QGIS TUFLOW Plugin includes a suite of tools built to increase TUFLOW workflow efficiency. Installation and use instructions are provided in the QGIS Tips and Tricks section of the TUFLOW Wiki. TUFLOW Viewer is included in the QGIS TUFLOW Plugin. As the name suggests, TUFLOW Viewer upgrades the QGIS Map Window to become a complete dynamic interactive TUFLOW simulation result viewer. This addition to QGIS makes the the programme’s functionality comparable to commercial GUI software. Documentation of the TUFLOW Viewer is located on the TUFLOW Wiki. Figure 3.3: QGIS with TUFLOW Viewer 3.2.3 Aquaveo SMS Mesh Generator / TUFLOW FV Graphical User Interface This section provides a brief introduction to the SMS software, for more information please see the Aquaveo Website, SMS Wiki, the Aquaveo Learning Centre and the TUFLOW FV Wiki SMS Tips. There are three versions of SMS available for use with TUFLOW FV: SMS Community Edition: A free version suitable for mesh generation and result viewing. This is the version used within the TUFLOW FV Wiki Tutorial Models. SMS Riverine Pro Version: A paid licence version suitable for advanced TUFLOW FV meshing, result viewing and analysis. SMS TUFLOW FV Dynamic Model Interface : A paid licence version. Includes a full GUI environment for building TUFLOW FV 2D hydrodynamic models. It is suitable for building TUFLOW FV models within SMS, advanced mesh meshing, viewing and analysis of TUFLOW FV results. MJS Add Figure of DMI… 3.3 Installing and Running TUFLOW 3.3.1 TUFLOW FV Downloads and Installation TUFLOW FV does not require an installer, but instead simply requires the user to copy or unzip the downloaded files into a folder. This approach allows the modeller to have as many releases or versions of TUFLOW FV available as required. This is beneficial, as there is often a need to run or re-run legacy models using older TUFLOW FV versions. The current TUFLOW release version, manual and release notes are available via the TUFLOW website Downloads page. All past TUFLOW FV versions are available from the Downloads Archive. Section 12.4.1 provides more information on downloading and installing TUFLOW FV. Detailed step-by-step instructions for new users are also provided on the TUFLOW FV Wiki. 3.3.2 Licencing A TUFLOW FV licence is required to run TUFLOW FV, but is not required when using third-party software such as a GIS, text editor or GUI (for further information refer to Section 12.5.1 and/or to the installation instructions on the TUFLOW FV Wiki). Licences are hosted on hardware locks (e.g. USB lock) or software locks (e.g. via a configuration file housed on a particular computer, server or cloud virtual machine). Email sales@tuflow.com for a quote to purchase a TUFLOW FV licence. TUFLOW FV can be used licence free for the TUFLOW FV Tutorials, Example models or when running TUFLOW FV using Demo Mode (see Section ??). For third-party USB locks that have TUFLOW FV licences, please refer to the vendor’s documentation for configuring the licence. 3.3.3 Performing Simulations TUFLOW simulations are started by running the TUFLOW executable and passing the input TUFLOW FV control file (.fvc). There are a number of ways of initiating simulations: Running a batch file. Batch files can be used to run single TUFLOW FV simulations but also can be set up to loop through events and scenarios to run a multitude of simulations or to push simulations to different processors. From the text editor – ideal for one off simulations, especially whilst constructing a model. Directly from GIS software. Using Microsoft Explorer to right click and run. Via a GUI, such as the SMS TUFLOW FV Interface. From a Command (Console) Window. Detailed descriptions on running TUFLOW from the above methods are provided on the TUFLOW FV Wiki. 3.4 Tips and Tricks The TUFLOW FV Wiki is the primary location where the TUFLOW software team share useful modelling tips and tricks. The Wiki covers an extremely wide range of subjects. A list of the main subject matter topics are summarised in Table 3.2. New content is added to the Wiki regularly. If you would like to be informed of updates when they are published, please join the LinkedIn TUFLOW User Group. Table 3.2: TUFLOW Tips and Tricks Tips and Tricks (Link) Description Licencing Tips A TUFLOW licence is required to run TUFLOW. This section of the Wiki outlines the user steps required to request and import licence updates. Self-teach Tutorial Modules All TUFLOW self-education resources function using a licence-free mode. As such, there is no need to purchase a software licence to learn TUFLOW. User documentation for the Self-teach Tutorial Modules are hosted on the Wiki. Supporting Software Tips User tips for the following support software: Excel, Notepad ++, UltraEdit, Visual Studio Code, QGIS, SMS. TUFLOW Viewer User Manual TUFLOW Viewer is a free 1D and 2D dynamic result viewing interface included in the QGIS TUFLOW Plugin. It enable QGIS with added functionality, upgrading the GIS software with feature akin to traditional Graphic User Interface software. This plugin is extremely popular, at the time of writing (January 2023) it has achieved a 5 star rating after 48,000 downloads! TUFLOW Utilities The TUFLOW Utilities are a set of tools that have been developed to help users convert input data from one format to another for use in a TUFLOW model, or to post-process simulation results. Hardware Selection Advide This Wiki page outlines useful guidance for modellers who are purchasing computer hardware for TUFLOW modelling. GIS Software TUFLOW Plugins (ArcGIS, ArcPro, MapInfo and QGIS) TUFLOW seamlessly integrates with GIS software. Any GIS or Computer Aided Design (CAD) package can be used provided load or import and save or export option are available for the GIS formats TUFLOW currently supports (refer to ). The most commonly used GIS software are ArcGIS, ArcPro, MapInfo and QGIS. Due to their widespread use, customised toolkits and plugins have been specifically designed for these GIS packages to improve TUFLOW model build and result viewing workflow efficiency. GitLab TUFLOW User Group The open file formats used by TUFLOW for its input and output make it well suited to automation via scripting as a means to improve workflow efficiency. Many modellers develop their own tools to assist in their use of TUFLOW and to automate many tasks. These tools cover a wide range of use cases, such as data preparation, advanced simulation control, model quality assurance and result post-processing. A GitLab TUFLOW User Group has been established to support the sharing and collaborative development of these tools by the broader TUFLOW community. TUFLOW FV Python Toolbox The TUFLOW FV Python Toolbox leverages the use of Jupyter Notebooks and Xarray to provide a powerful pre and post processing suite of tools for TUFLOW FV. TUFLOW FV MATLAB Toolbox The TUFLOW FV MATLAB Toolbox contains a range of useful pre and postprocessing tools for TUFLOW FV. Boundary Condition Get Tools A component of the TUFLOW FV Python Toolbox. A set of tools to allow download and generation of astronomical tide, atmospheric and ocean circulation boundary conditions for TUFLOW FV. Water Quality Diagnostic Variables Demonstration highlighting the transparency of mass and energy flux reporting in TUFLOW FV’s Water Quality Module. \\(\\newcommand{\\blockindent}{\\hspace{0.5cm}}\\) "],["CF-1.html", "Section 4 Folders, Control Files and Data Layers 4.1 Introduction 4.2 Folder Structure 4.3 Control Files 4.4 Input Files 4.5 Layering Input Data 4.6 Output Files", " Section 4 Folders, Control Files and Data Layers 4.1 Introduction This chapter describes TUFLOW FV’s recommended folder structure, model control files and the input and output layers used when developing a model. 4.2 Folder Structure Table 4.1 presents the TUFLOW FV standard set of sub-folders used to construct a model. Any folder structure may be used; however, it is strongly recommended that a system similar to that below be adopted. For large modelling jobs with many scenarios and simulations, a more complex folder structure may be warranted, though should be based on that shown below. Table 4.1: Recommended Sub-Folder Structure Sub-Folder Description bc_dbase Boundary and initial conditions, often with additional sub-folders for specific boundary condition types (e.g. tide, flow, meteorology, etc.). check If Write Check Files is included in the .fvc check files will be output from TUFLOW FV. These are a series of output files in both GIS (MapInfo or Shapefile format) and tabular data in .CSV format. These check files contain information on the data processed by TUFLOW FV. exe Optional sub-folder, placing the TUFLOWFV.exe (and associated dlls) within the TUFLOW FV folder structure may be desired. Alternatively, the tuflowfv.exe is located elsewhere on the network or local computer. model Include files and the geo, csv and gis sub-folders. May also optionally contain external turbulence nml file. model\\csv Location for csv inputs such as culvert and structure files, and z-layer geometry etc. model\\geo Model mesh development often with additional sub-folders or links to locations where mesh development data is located if required. Model mesh development often with additional sub-folders or links to locations where mesh development data is located if required. Location for cell elevation files, topographic/bathymetric DEM files and TINs. model\\gis GIS layers that are inputs to the model domain. model\\gis\\empty Empty template GIS files. runs TUFLOW FV simulation control files. Batch files are also stored here when performing multiple simulations in a series. Table 4.2 shows the recommended structure for more advanced simuations that use the TUFLOW FV Sediment Transport, Water Quality, or Particle Tracking Modules. Table 4.2: Recommended Advanced Sub-Folder Structure Sub-Folder Description Recommended sub-folder structure plus the below. Recommended sub-folder structure of Table 4.1 plus the below. stm Sediment control files. wqm Water quality control files. ptm Particle tracking control files. 4.3 Control Files TUFLOW FV control files are text files containing a series of commands (instructions) that control how a model is constructed and how a simulation proceeds. They are easily scripted and interpreted, typically short in length, and very powerful for enabling efficient workflows. The sub-sections that follow describe: Each control file type Rules and notation in regards to control files (Section 4.3.7) The use of absolute and relative file paths (Section 4.3.8) Table 4.3 lists the available control files. Table 4.3: List of Available Control Files Control File Description Section FVC The TUFLOW FV Control File (.fvc) file sets simulation parameters and directs input from other data sources. This is main control file that TUFLOW FV reads when running a simulation. It is the top level (or parent) file. All input files are accessed via the .fvc file or files referred to from the .fvc file. Section 4.3.1 TEF The TUFLOW Event File (.tef) includes a database of commands related to specific events. The .tef is read from the .fvc using the Event File command. Section 4.3.2 FVSED The TUFLOW FV Sediment Transport Module Control File (.fvsed) includes the commands required for sediment transport simulation. The .fvsed file is read from the .fvc file using the Sediment Control File command. Section 4.3.3 FVWQ The TUFLOW FV WaterQuality Module Control File (.fvwq) includes the commands required for water quality simulation. The .fvwq file is read from the .fvc file using the Water Quality Control File command. Section 4.3.4 FVPTM The TUFLOW FV Particle Tracking Module Control File (.fvptm) includes the commands required for particle tracking simulation. The .fvptm is read from the .fvc file using the Particle Tracking Control File command. Section 4.3.5 Include File A TUFLOW FV Include File is a file included inside another .fvc file. Any file extension be used, with .fvc traditionally used. Include files are useful for commands that are common to multiple simulations or for commands that are rarely or never changed. Include files can help to reduce clutter in the main .fvc file. Section 4.3.6 4.3.1 FVC The TUFLOW FV Control File (.fvc) file sets simulation parameters and directs input from other data sources. It is the top of the tree, with all input files accessed via the . fvc file or files referred to from the .fvc file. Each TUFLOW FV simulation must have a .fvc file. An example snippet of an .fvc file is shown in Figure 4.1. An .fvc file is required to run any TUFLOW FV simulation class. Figure 4.1: Example of a Simple FVC Appendix A lists and describes all available .fvc commands. 4.3.2 TEF The TUFLOW Events File (.tef) contains a database of .fvc file commands for event managmement. Event management is a powerful functionality that allows running multiple event combinations (e.g. magnitude, duration, temporal patterns, climate change) using a single set of control files rather than creating a new set of control files for every simulation. This makes the management of the model easier, ensures consistency between the simulations, and better quality control. An example of the number of .fvc files required for a model with and without event management is shown in Figure 4.2. Instructions on the setup and use of event management is provided in Chapter 12. An example of setting up a model to use event management is provided in the TUFLOW FV Example Model Suite. A .tef is an optional feature that can be run for any TUFLOW FV simulation class. Figure 4.2: Reduction of Control Files using Event Management 4.3.3 FVSED The TUFLOW FV SEDiment Control File (.fvsed) contains the sediment definition and commands required for sediment transport modelling. An .fvsed file is a requirement of the ST simulation class. 4.3.4 FVWQ The TUFLOW FV Water Quality Control File (.fvwq) contains the sediment definition and commands required for water quality modelling. An .fvwq file is a requirement of the WQ simulation class. 4.3.5 FVPTM The TUFLOW FV Particle Tracking Module Control File (.fvptm) contains the particle group definition and commands required for particle tracking modelling. An .fvptm file is a requirement of the PT simulation class. 4.3.6 Include File Include files can optionally be used to group .fvc file commands for reading by a parent .fvc file. Include files can help reduce the size/clutter of .fvc files and allows easy global changes to a group of simulations to be made. For example, on line 59 of Figure 4.1 the Include command is used to read a set of astronomical tide boundary condition commands from the file GoC_Tide_20100301_20100501_AEST_001.fvc as shown in Figure 4.3. Include files can use any file extension, however most commonly used are .fvc or .trd (TUFLOW Read File). Figure 4.3: Example include file containing astronomical tide boundary conditions 4.3.7 Rules and Notation Control files are command or keyword driven text or script files. The commands are entered free form, based on the rules described below. Comments may be entered at any line or after a command. An example of a command is: Start Time == 10 ! Start at 10 hrs This command sets the simulation start time to 10 hours. The text to the right of the “!” is treated as a comment and ignored by TUFLOW FV when interpreting the line. Automatic colour coding (as shown in the above example) of files for easy interpretation is available, with download links and installation instructions, for the following text editors: Notepad++, UltraEdit and Visual Studio Code. Commands can be repeated as often as needed. This offers significant flexibility and effectiveness when modelling, particularly in building 2D model bathymetery/topography. Note that a repeat occurrence of a command may override the effect of previous occurrence(s) of the same command. The style of input is flexible bar a few rules. The rules are: A few characters are reserved for special purposes as described in Table 4.4; Commands in TUFLOW FV control files to the left of == are NOT case sensitive. On Windows Operating Systems, file paths/file names to the right of the == are NOT case sensitive. On Linux Operating Systems, file paths/file names to the right of the == ARE case sensitive. This is consistent with the case sensitivities of the two operating system types respectively. Only one command can occur on a single line; and A few commands rely on another command being previously specified. These are documented where appropriate. Blank lines are ignored. Spaces or indentations can occur at the start of the line. This is recommended when using the logic control, as outlined in Section 12.3. The second line in the following example is not required to be indented, however, it is strongly recommended to facilitate easy interpretation: If Scenario == GPU  GPU Solver == ON End If The notation used to document commands and valid parameter values in Appendix A are presented in Table 4.5. Table 4.4: Special Characters – Text Files Special Character(s) Description “#” or “!” A “#” or “!” causes the rest of the line from that point on to be ignored. Useful for “commenting-out” unwanted commands, and for all that modelling documentation. “==” A “==” following a command indicates the start of the parameter(s) for the command. Where there is more than one parameter, the parameter values are read as free-field formatted, i.e. are space or comma delimited. When processing command line syntax within a control file, if a “==” is not present in the command line syntax TUFLOW FV will produce an error message. The two exceptions to this rule are the Initial Condition OGCM and Initial Condition Quiescent commands. For example “If Scenario = Exg” will produce an error as the correct syntax is “If Scenario == Exg”. “~ ~” Enclosed “~ ~” syntax dynamically replaces the value of events or scenarios. This can occur within the file name of the .fvc file, or text within the .fvc file. “&lt;&lt; &gt;&gt;” Enclosed “&lt;&lt; &gt;&gt;” syntax is used to return the value of model variables that have been set using the Set Variable command or the value or events or scenarios. “$” A “$” returns the value of an environment variable that has been set in a batch or shell script. spaces Spaces can occur in commands and parameter options. Spaces can occur in file and path names; however, third party software may not allow this and as such is not recommended. If using spaces in .fvc filenames, batch files will require that the filename is enclosed in quotes. tabs Tabs can occur in command names and parameter options. Tabs should not be used in file names or file paths. Table 4.5: Notation Used in Command Documentation – Text Files Documentation Notation Description &lt; … &gt; Greater than and less than symbols are used to indicate a variable parameter. For example, the commonly used &lt;file&gt; example is described below. &lt;file&gt; A filename (can include an absolute or relative path, or a UNC path). See Section 4.3.8 for a more detailed description. [ {Op1} | Op2 ] The square brackets “[” and “]” surround parameter options. The “|” symbol separates the options. The “{” and “}” brackets indicate the default option. This option is applied if the command is not used. For example, the options for the Momentum Mixing Model command are: [ {None} | Constant | Smagorinsky | Wu ] Where the default is None (which does not apply turbulent mixing). 4.3.8 File Paths TUFLOW FV control files reference a range of external input files such as CSV, GIS and NetCDFs as well as other control file. The three methods to reference a file is via absolute file path, relative file path and UNC file path referencing. A model can use any or all these methods. However, relative file paths are typically preferred. Using the command Read GIS Mat the below demonstrates each file path method. Absolute file path: Read GIS Mat == L:\\Job\\Job1234\\TUFLOW\\model\\gis\\2d_mat_001_R.shp Relative file path: Read GIS Mat == ..\\model\\gis\\2d_mat_001_R.shp UNC file path: Read GIS Mat == \\\\server1\\Job1234\\TUFLOWFV\\model\\gis\\2d_mat_001_R.shp A relative file path is defined in relation to the file that references it. In the example above, if the command is in the .fvc file located in the TUFLOWFV\\runs\\ folder, the ..\\ notation moves up one level (from TUFLOWFV\\runs\\ to TUFLOWFV\\). The model\\ entry navigates into the TUFLOWFV\\model\\ folder, and gis\\ navigates further into TUFLOWFV\\model\\gis\\. To move up multiple levels, use ..\\ repeatedly (e.g., ..\\..\\ moves up two folders). If the referenced file is in the same folder as the .fvc file, only the filename needs to be specified. In the example below, Model_Events.tef must be in the same location as the .fvc file. Event File == Model_Events.tef The paths are relative to the current control file, a command in the event file (TUFLOWFV\\model\\) would be relative to the .tef location, not the .fvc location. Using relative file paths has the advantage that the model can be moved or provided to another user and the control files do not need to be updated, if the model uses an absolute or UNC file path, all references will need to be updated if the model is moved. Some large files may still use an absolute or UNC file path particularly where large datasets are shared across models. This avoids the need to copy the dataset into multiple projects. An example is: Read GRID Zpts == \\\\server1_Coast_5m.flt If using Linux it is recommended to use forward slashes in preference to backslashes. For example: Read GIS Mat == ../model/gis/2d_mat_001_R.shp Forward slashes are supported by both Windows and Linux operating systems. If running on Linux directory and file names are case sensitive, while Windows is case insensitive. 4.4 Input Files 4.4.1 Overview Table 4.6 describes the most common file types used for input to, and output from a TUFLOW FV simulation. Table 4.6: List of Most Commonly Used Input File Types File Extension Description Format Section Comma Delimited Files .csv Comma delimited text file/s. They can be opened, edited and saved using text editors or spreadsheet software such as Microsoft Excel. Text 4.4.2 ArcGIS Shapefile Layers .shp .dbf .shx .prj ArcGIS’s industry standard for GIS vector layers. Binary 4.4.3 MapInfo MIF/MID Files .mif .mid MapInfo’s industry standard GIS data exchange format for GIS vector layers. Text 4.4.3 ESRI Ascii raster grid .asc GIS raster data in the widely used ESRI Ascii grid format. Text 4.4.3.5 Binary Float Grid .flt GIS raster data in the binary versions of the .asc format (see above). Binary 4.4.3.5 Triangulated Irregular Network .tin Triangulated bathymetric/topographic data in the Aquaveo SMS format. Text 4.4.3.6 NetCDF .nc Regular gridded or curvilinear gridded data files typically used to as input boundary or initial conditions that vary spatially and temporally. These inputs are often derived from outputs from other models and may include wind fields, atmospheric conditions, short-wave forcing or ocean current forcing. Binary 4.4.4 SMS Mesh File .2dm Flexible mesh topology definition. Text 4.4.5 TUFLOW FV Restart Files .rst A snapshot of computational results at an instant in time, used for hot-restart of simulations. Output by a previous TUFLOW FV simulation. Binary 4.4.6 TUFLOW FV Transport File _trans.nc Boundary condition file with hydrodynamic fields saved off from a previous TUFLOW FV simulation. Used to run simulations in offline hydrodynamic mode. Binary 4.4.7 4.4.2 Input CSV Files ================================================ MJS TODO: THE REST OF THIS CHAPTER IS INCOMPLETE ================================================ Bathymetry 3D layering Structures Boundary conditions Initial conditions 4.4.3 Input GIS Layers The main types of GIS Inputs are vectors, rasters and TINs. The following formats are supported as inputs in TUFLOW: GIS vector data layers: Shapefile (.shp) and MapInfo (.mif) (default) formats. GIS raster data layers: Float (.flt) and ASCII (.asc) formats. NetCDF formats are supported for some inputs such as time-varying meteorological and ocean data input grids. GIS TIN data layers: SMS (.tin). CSV files: (.csv). NetCDF Most mainstream CAD/GIS platforms recognise these formats. The format of input layers is solely controlled by the file extension. For example, for the vector formats, “.shp” for the SHP format and “.mif” for the MIF format. TUFLOW requires that all GIS layers imported or exported by TUFLOW must be in the same geographic projection. The model projection is initialised using the SHP Projection and MI Projection commands. Multiple input formats can be used (e.g. a mix of all format types within one model is allowed). If a model uses a mixture of format types as inputs, a projection command should be specified for each format. The default output format for GIS check layers and GIS outputs depends on the Projection setting as mentioned above. If more than one Projection setting is specified, or to force the GIS output format, use the GIS Format command. 4.4.3.1 GIS Vector Layer Commands Commands containing “GIS” read and/or write a GIS vector layer. GIS commands read the geometry, attribute data, and projection data of the input layer. The available formats of input vector and raster layers are listed in Section ??. The geographic location of objects for GIS commands is important as the geographic position of the object controls the part of the TUFLOW model they affect. When digitising objects, it is preferable that they do not snap to the 2D cell sides or corners as this may produce indeterminate effects. 4.4.3.2 GIS Vector Layer Naming Conventions As the bulk of the data input is via GIS data layers, efficient management of these datasets is essential. For detailed modelling investigations, the number of TUFLOW GIS data layers has been known to reach over a hundred for large complex models, although the majority of models would utilise five to twenty layers. Good data management also caters for the many other GIS layers being used (aerial photos, cadastre, etc.). Different TUFLOW FV input files require different GIS attributes, for example a material definition file only requires a single attribute (with the attribute – Mat), whereas, a nodestring polyline layer has a greater number of attributes (Name, boundary snapping etc.). Each of these file types is described in Table 4.7. It is strongly recommended that the prefixes described in Table 4.7 be adhered to for all GIS layers. This greatly enhances the data management efficiency and, importantly, makes it much easier for another modeller or reviewer to quickly interpret the model. The .fvc command Write Empty GIS Files can be used to automate the creation of template files which use the recommended GIS data naming convention. This setup process is assisted by using the recommended TUFLOW model initialisation process which is further described in Section 5.2. Data input is structured so that there is no limit on the number of data sources. Commands can be repeated indefinitely in the text files to build a model from a variety of sources. For example, a model’s topography may be built from more than one source. A DTM may be used to define the general topography, updated with locallised survey data, while several 3D elevation lines (breaklines) define the crests of levees or roads. The sequential approach to reading datasets offers unlimited flexibility and increased efficiency. This layered approach also offers good traceability and quality control. Refer also to Section 12.2 and 12.3 which provide further guidance on model naming conventions and methods in which the same control files may be used to simulate multiple flood events and scenarios, thereby reducing the potential number of files created. Table 4.7: GIS Input Data Layers and Recommended Prefixes - 2D Domain Suggested File Prefix GIS Data Type Description Refer to Section 2d_mat_ 2D Land-Use (Materials) Categories Layers to define or change the land-use (material) types on a cell-by-cell basis. XX 3d_po_ 2D Plot (Time-Series) Output Locations Layer(s) defining the locations and types of time-series output from the 2D domains. XX 2d_sa_ 2D Source over Area Layer(s) defining cell inflow locations. GIS objects with point geometery apply flow to the cell they reside in. GIS objects with polygon geometry will select cells with cell centroids that reside within the polygon boundary. XX 2d_zln_ (2d_zlr_) (2d_zlg_) 2D Elevation Lines Optional 2D or 3D breaklines defining the crest of ridges (e.g. levees, embankments) or thalweg of gullies (e.g. drains, creeks). Ridges and gullies cannot occur in the same layer so 2d_zlr_ is often used for ridges and 2d_zlg_ for gullies. These files are typically created by renaming the 2d_z__empty file. XX 2d_ns_ Nodestring Lines Layers to define the spatial location of boundary conditions, hydraulic struture 1D/2D connections and flux reporting. XX 2d_zn_ Zone Polygons Layers to define 1D/2D hydraulic structure connections when using Linked Zone structure types. XX 4.4.3.3 GIS Vector Layer Attribute Interpretation TUFLOW expects certain attributes, in a specific order for input layers. For example a material input (2d_mat) layer only requires a single attribute (which is the material identifier), whilst a nodestring layer (2d_ns) has a number of attributes including the nodestring name and boundary snapping options. The attributes required for each input layer are detailed in their respective sections throughout this manual. Any additional attributes appended to the layer will be ignored by TUFLOW FV. The .fvc command Write Empty GIS Files can be used to automate the creation of template files with attribute structures that TUFLOW FV expects and with the recommended GIS data naming convention. They also can be automatically created using the TUFLOW Plugin Import Empty Tool. A list of the TUFLOW template files is available on the TUFLOW FV Wiki. The names of GIS attributes as documented or produced by Write Empty GIS Files may change from previous TUFLOW FV releases to reflect new features and changes. The name of the attribute is irrelevant as far as TUFLOW FV is concerned as TUFLOW FV only requires that attributes are in the correct order and of the correct type (i.e. Character, Float, Integer, etc.). In all TUFLOW FV layers, the attributes can be named as the modeller wishes, so older layers that do not have the same attribute names as documented in this manual will still work correctly. 4.4.3.4 GIS Vector Layer Object Interpretation Table 4.8 and Table 4.9 outline the compatible GIS objects and how they are interpreted by TUFLOW. Object snapping is often used to relate point data with line and region data, for example with the Read GIS Z Line. TUFLOW FV supports point, end and vertex snapping. It does not support edge snapping. Objects that are linked (for example a 2d_zln point and polyline layers, must be snapped and also read in to TUFLOW on the same command line separated by a vertical bar “|”. For example: Read GIS Z Line == 2d_zln_Breakwater_001_L.shp | 2d_zln_Breakwater_001_P.shp Table 4.8: TUFLOW Interpretation of Supported GIS Objects Object Type TUFLOW Interpretation Point Refers to the 2D cell that the point falls within or a 1D object such as a node or boundary location. Points snapped to the sides or corners of a 2D cell may give uncertain outcomes as to which cell the point refers to. Line (straight line) Variety of uses including defining a continuous line of 2D cells, 1D channels, to connect objects, alignment of a 3D breakline, linking 1D and 2D elements. Pline (line with one or more segments) As for Line above. Region (polygon) For 2D cells either: Modifies any 2D cell or cell mid-side/corner (e.g. Zpt) that falls within the region. If the command is modifying a whole 2D cell, it uses the cell’s centre to determine whether the cell falls inside or outside of the region. If the cell’s centre, mid-side or corner lies exactly on the region perimeter, uncertain outcomes may occur. Holes within a region are accepted except for polygon objects in shape layers used for TIN boundaries. Or, only uses the region’s centroid. Examples are the original flow constriction layers (2d_fc) and time-series output locations for some output data types. For 1D: 1D nodes within the region are selected. If the 1D node falls exactly on the region perimeter uncertain outcomes may occur. Multiple (Combined) Objects In later versions of TUFLOW, multiple point, polyline and region objects are generally accepted (ERROR or WARNING messages are given if not the case). Table 4.9: TUFLOW Interpretation of Unsupported GIS Objects Object Type TUFLOW Interpretation Arc Ignored (do not use). Collections Not supported. Collections are groups of objects of differing type. Ellipse Ignored (do not use). none These objects are ignored and most commonly occur when a line of attribute data is added that is not associated with an object. In MapInfo, this occurs when a line of data is added directly to a Browser Window (i.e. no object was digitised). Roundrect (Rounded Rectangle) Ignored (do not use). Rect (Rectangle) Ignored (do not use). Text Ignored. 4.4.3.5 GIS Raster Layer Commands Commands containing “GRID” read and/or write a GIS raster layer. The format is controlled by the file extension (e.g. .flt or .asc). For real (float) inputs the value is interpolated from the grid. For integer inputs (such as Code), the value applied is the integer value of the grid cell that the TUFLOW point falls within. MJS Need to check this re integer… 4.4.3.6 GIS TIN Commands The Read TIN Zpts command containing “TIN” (triangulation file) read and/or write a TIN file. The format is controlled by the file extension (e.g. .tin). 4.4.4 Input NetCDF Files BCs ICs 4.4.5 Input Mesh Files .2dm 4.4.6 Input Restart Files Describe format 4.4.7 Input Transport File Describe format 4.5 Layering Input Data One of TUFLOW FV’s most powerful features is the ability to layer and prioritise data layers of the same data type. This means that TUFLOW FV constructs the model from the data layers with no need to copy or duplicate input data for the thousands of simulations that may ensue. Data layering has considerable benefits in terms of quality control and workflow efficiencies. MJS more needed here… 4.6 Output Files Table 4.10: List of Most Commonly Used Output File Types File Extension Description Format Section Comma Delimited Files .csv Text format output geometry check files and stability diagnostic outputs. Text 4.6.1 ArcGIS Shapefile Layers .shp .dbf .shx .prj Output GIS check files in ArcGIS’s industry standard for GIS layers. Binary 4.6.2 MapInfo MIF/MID Files .mif .mid Output GIS check files in MapInfo’s industry standard GIS data exchange format. Text 4.6.2 QGIS Workspace .qgs Check file written to the log directory. A QGIS workspace file that contains the input and output GIS layers used by a simulation. Text 4.6.2 Mapinfo Workspace .wor Check file written to the log directory. A Mapinfo workspace file that contains the input and output GIS layers used by a simulation. Text 4.6.2 NetCDF .nc The recommended file output format for TUFLOW FV. Supports unstructured 2D and 3D map output. Ability to view raw cell centre, or vertex interpolated results. Binary 4.6.3 TUFLOW Plot Control .tpc File read by the TUFLOW QGIS plugin to associate output timeseries data with GIS plotting locations such as flux nodestrings and point outputs. Text 4.6.4 Structure Log File .slf CSV text output that logs the state of hydraulic structures that operate using control block features. For example the .slf can report if a a storm tide gate how a storm tide gate opens and closes during a simulation. Text 4.6.5 SMS Super File .sup SMS super file containing the various files and other commands that make up the output from a single simulation. Opening this file in SMS or QGIS opens the .2dm file and the primary .xmdf file or .dat files. Text 4.6.6 SMS Data File .dat SMS generic formatted simulation results file. Results reported at cell vertices. Supports 2D model outputs or 2D slices of 3D models. Binary 4.6.6 SMS XMDF File .xmdf An alternative to using the .dat files described above . .xmdf files are much faster to access and can contain all TUFLOW map output within a single file (rather than one file per output type as for the .dat format). Results reported at cell vertices. Supports 2D model outputs or 2D slices of 3D models. Binary 4.6.6 TUFLOW FV Log File .log A log file containing information about the 1D/2D/3D data input process and a log of the simulation. Text 4.6.7 TUFLOW FV Restart File .rst A snapshot computational results at an instant in time, used for hot-restart of simulations. Written to the model log directory. Binary 4.6.8 TUFLOW FV Transport File _trans.nc Output file that saves hydrodynamic variable data at a user defined output interval. Used to run subsequent simulations in hydrodynamic offline mode. Binary 4.6.9 4.6.1 Output CSV Files diagnostics geo csvs 4.6.2 Output GIS Files Check Files Workspaces 4.6.3 Output NetCDF Files 4.6.4 Output TUFLOW Plot Control 4.6.5 Output Structure Logging 4.6.6 Output SMS Data Files 4.6.7 Output Log File 4.6.8 Output Restart Files 4.6.9 Output Transport File "],["HD2D-1.html", "Section 5 Model Construction: 2D HD Simulation Class 5.1 Overview 5.2 Model Initialisation 5.3 Coordinate Reference Frame 5.4 Spatial Order 5.5 Hardware 5.6 Simulation Time Settings 5.7 Computational Timestep 5.8 Wetting And Drying 5.9 Bottom Drag Model 5.10 Horizontal Momentum Mixing 5.11 Computational Mesh 5.12 Bathymetry 5.13 Materials 5.14 Initial Conditions 5.15 Boundary Conditions 5.16 Hydraulic Structures 5.17 Model Outputs", " Section 5 Model Construction: 2D HD Simulation Class 5.1 Overview This chapter describes the components required to construct a 2D HD Simulation Class TUFLOW FV model. 5.2 Model Initialisation Model initialisation requires the following three primary components that should be undertaken at the start of a new modelling project. Create the standard TUFLOW FV folder structure (further described in Section 4.2) Define the Coordinate Reference Frame (Section 5.3), which includes selection of the GIS format, coordinate reference system and model units Create empty template GIS and control files To assist with this set up, and indeed more broadly with the initialisation, execution and results interrogation of a TUFLOW FV simulation, a freely available TUFLOW QGIS plugin has been developed. TUFLOW eLearning resources (also free of charge) have been prepared to support deployment and use of this TUFLOW plugin, and as such the content of that resource is not repeated here. Users are however encouraged to access this resource before initialising their first TUFLOW FV simulation: using this plugin is seen as a core component of the set up of a TUFLOW FV simulation. Doing so manually is discouraged. The eLearning materials can be accessed by: Registering for TUFLOW FV eLearning here if not already registered Emailing support@tuflow.com noting the registered username and with a request access to the TUFLOW plugin eLearning course Following instructions subsequently provided to access the course Completing the course On completion of the course, users will be able to initialise a TUFLOW FV simulation in the desired geographical projection system and units. The sections presented below assume that this QGIS initialisation process has occurred and describe the resulting general arrangements and subsequent construction of a TUFLOW FV simulation. 5.3 Coordinate Reference Frame 5.3.1 Command Status Required - If using the recommended TUFLOW QGIS Plugin model initialisation process (Section 5.2) the coordinate reference frame commands are automatically populated and this section is provided for reference. 5.3.2 Description The coordinate reference frame defines how spatial locations and units are interpreted within the TUFLOW FV model domain. It determines the projection system, horizontal geometry (Cartesian or spherical), and the unit system used for all spatial inputs and calculations. TUFLOW FV offers the following coordinate reference frame options. Cartesian (Easting and Northing) in metric units Spherical (Longitude and Latitude) in metric units Cartesian (Easting and Northing) in US customary units The coordinate reference frame is defined by executing five steps: Set the model projection. If developing the model using QGIS, ArcGIS, or the SMS TUFLOW FV Interface, use the SHP Projection command. If developing the model in Mapinfo use the MI Projection command Set the GIS output format. If developing the model using QGIS, ArcGIS, or the SMS TUFLOW FV Interface, use GIS Format == SHP. If developing the model in Mapinfo use GIS Format == MIF Generate empty template GIS input layers in the model coordinate system using the Write Empty GIS Layers command Set the computational coordinate system to either Cartesian or Spherical using the Spherical command Select the model units as either Metric or US Customary via the Units command The coordinate reference frame commands are summarised in Table 5.1. Further guidance on science and usage is provided in Appendix E.3. Table 5.1: Coordinate Reference Frame Commands Command Description GIS Format Required - Sets the format of output GIS files. Write Empty GIS Layers Required - Writes empty template GIS files used for TUFLOW FV model development in the choosen model projection. SHP Projection Conditional - Only required if inputting or outputting ESRI .shp files. Defines an ESRI shape file projection string or .prj file that sets the geographical coordinate system for all input and output shape file GIS layers. MI Projection Conditional - Only required if inputting or outputting Mapinfo .mif files. Defines a Mapinfo projection string or .mif file that sets the geographical coordinate system for all input and output GIS .mif layers. Spherical Optional - Defines the computational coordinate system used by TUFLOW FV’s solver to Spherical (Longitude and Latitude) or Cartesian (Eastings and Northings) coordinates. Latitude Conditional - Sets the latitude for Coriolis calculations when a Cartesian coordinate system is used. Units Optional - Sets the model to Metric or US Customary Units. GIS Projection Check Optional - Sets the error level when comparing input GIS layer projections with the model projection. 5.3.3 Examples Cartesian Model In Metric Units ! Cartesian (Eastings and Northings) Model in Metric Units SHP Projection == ..\\model\\gis\\projection.prj ! Projection string - No default GIS Format == SHP ! {MIF} | SHP ! Write Empty GIS Layers == ..\\model\\shp\\empty ! Directory to write empty GIS vector layers. Only need to run this once during model setup Units == Metric ! {Metric} | US Customary | Imperial | English Spherical == 0 ! {0} Cartesian | 1 Spherical Latitude == -32.0 ! {0.0} Representative latitude for study area Spherical Model In Metric Units ! Spherical (Longitude and Latitude) Model in Metric Units SHP Projection == ..\\model\\gis\\projection.prj ! Projection string - No default GIS Format == SHP ! {MIF} | SHP ! Write Empty GIS Layers == ..\\model\\shp\\empty ! Directory to write empty GIS vector layers. Only need to run this once during model setup Units == Metric ! {Metric} | US Customary | Imperial | English Spherical == 1 ! {0} Cartesian | 1 Spherical Spherical Model In US Customary Units SHP Projection == ..\\model\\gis\\projection.prj ! Projection string - No default GIS Format == SHP ! {MIF} | SHP ! Write Empty GIS Layers == ..\\model\\shp\\empty ! Directory to write empty GIS vector layers. Only need to run this once during model setup Units == US Customary ! {Metric} | US Customary | Imperial | English Spherical == 0 ! {0} Cartesian | 1 Spherical Latitude == 27.5 ! {0.0} Representative latitude for study area Spherical Model In Metric Units - Mapinfo MIF ! Spherical (Longitude and Latitude) Model in Metric Units for Mapinfo MIF MI Projection == ..\\model\\mi\\model_projection.mif ! Projection string - No default GIS Format == MIF ! {MIF} | SHP ! Write Empty GIS Layers == ..\\model\\mi\\empty ! Directory to write empty GIS vector layers. Only need to run this once during model setup Units == Metric ! {Metric} | US Customary | Imperial | English Spherical == 1 ! {0} Cartesian | 1 Spherical 5.4 Spatial Order 5.4.1 Command Status Optional: The commands in this section are only required if second order horizontal spatial reconstruction is specified, otherwise defaults will apply and the commands can be omitted from the .fvc file. 5.4.2 Description Spatial order defines how the values of model variables, such as depth and velocity, are assigned at cell faces during the calculation of TUFLOW FV’s equations. First and second order options are available. Which option to use is dependant on the modelling problem being investigated, and further guidance to assist users in this selection is provided in Appendix E.4. Horizontal spatial order commands relevant to the 2D HD simulation class are provided in Table 5.2. Table 5.2: Horizontal Spatial Order Command Description Spatial Order Optional - Sets the horizontal spatial reconstruction to first or second order. Horizontal Gradient Limiter Conditional - Sets the horizontal gradient limiter model used with second order horizonal spatial reconstruction. Horizontal AlphaR Conditional - Sets a reduction factor to scale between first and second order horizontal spatial reconstructions for depth, velocity and scalar model variable fields. 5.4.3 Examples First Order Horizontal Spatial Accuracy ! First Order Horizontal Spatial Accuracy Spatial Order == 1,1 ! {1 1st Order Horizontal} | 2 2nd Order Horizontal, The second term is not used for the 2D HD simulation class Second Order Horizontal Spatial Accuracy ! Second Order Horizontal Spatial Accuracy Spatial Order == 2,1 ! {1} 1st Order Horizontal | 2 2nd Order Horizontal, The second term is not used for the 2D HD simulation class Second Order Horizontal Spatial Accuracy With Gradient Limiters ! Second Order Horizontal Spatial Accuracy With Gradient Limiters Spatial Order == 2,1 ! {1} 1st Order Horizontal | 2 2nd Order Horizontal, The second term is not used for the 2D HD simulation class Horizontal Gradient Scheme == LCD ! {LCD} | MLG Horizontal AlphaR == 1.0, 1.0, 1.0 ! {1.0} AlphaH (depth), {1.0} AlphaV (velocity), {1.0} AlphaS (scalars) 5.5 Hardware 5.5.1 Command Status Optional: The commands in this section are only required if running on Graphical Processing Unit (GPU) hardware, otherwise defaults will apply and the commands can be omitted from the .fvc file. 5.5.2 Description Hardware commands affect how a simulation will utilise computer resources. Simulations can be run using the Central Processing Unit (CPU), or a combination of CPU and Graphical Processing Unit (GPU). If running on GPU, the simulation requires access to both a compatible NVIDIA graphics card, and a TUFLOW FV GPU Module license instance. Further information on compatible graphics cards is provided in Appendix E.5. The default model hardware configuration is set via the commands in Table 5.3. In practice, these defaults are typically overridden at runtime through the use of Windows Batch or Linux Shell Script switches. These switches along with hardware usage guidance is described in Appendix E.5.2. Table 5.3: Hardware Command Description Hardware Optional - Run the simulation using Central Processing Unit (CPU) only or a combination of Central Processing Unit and Graphical Processing Unit (GPU). Device ID Optional - Select the NVIDIA GPU Device ID to run a simulation on. 5.5.3 Examples CPU Compute ! Run on CPU Hardware Hardware == CPU ! {CPU} | GPU GPU Compute ! Run on GPU Hardware Hardware == GPU ! {CPU} | GPU GPU Device ID == 0 ! {0} NVIDIA Device ID 5.6 Simulation Time Settings 5.6.1 Command Status Required 5.6.2 Description Simulation time settings define the temporal framework for a TUFLOW FV model, including how time is formatted, interpreted, and applied across inputs and outputs. These settings control the simulation start and end times, establish the reference time datum, and ensure consistency when reading time series data or writing results. TUFLOW FV supports two time formats: ISODATE and HOURS (default), set using the Time Format command (Table 5.4). The selected format must be applied consistently across all control files and time series inputs. In ISODATE mode, time inputs are in the format dd/mm/yyyy HH:MM:SS. In HOURS mode, time is expressed in decimal hours. The default time datum is 01/01/1990 00:00:00 for ISODATE and 0.0 for HOURS. This datum is applied when interpreting NetCDF boundary condition inputs and when writing model output. Simulation start and end times are specified using the Start Time and End Time commands, using the chosen time format. Table 5.4: Time Format Command Description Time Format Optional - Sets the format of time to either decimal HOURS or ISODATE (dd/mm/yyyy HH:MM:SS). Start Time Required - Specifies the start time for the simulation. End Time Required - Specifies the end time for the simulation. 5.6.3 Examples Model Time Format, Start Time And End Time in HOURS ! Time settings using the HOURS time format Time Format == Hours ! {Hours} | ISODATE Start Time == 0.0 ! Simulation Start Time (Hours) End Time == 3.0 ! Simulation End Time (Hours) Model Time Format, Start Time And End Time in ISODATE ! Time settings using the ISODATE time format Time Format == ISODATE ! {Hours} | ISODATE Start Time == 01/01/2015 00:00:00 ! Simulation Start Time (dd/mm/yyyy HH:MM:SS) End Time == 01/02/2015 00:00:00 ! Simulation End Time (dd/mm/yyyy HH:MM:SS) 5.7 Computational Timestep 5.7.1 Command Status Required 5.7.2 Description The computational timestep defines how frequently TUFLOW FV updates the model state during a simulation. It directly influences model stability, accuracy, and model runtime speed. TUFLOW FV uses an adaptive computational timestep that changes during a simulation in response to flow and scalar concentration stability constraints. Further guidance on timestep selection and timestep science is provided in Appendix E.7. The commands affecting TUFLOW FV’s computational timestep are provided in Table 5.5. Table 5.5: Computational Timestep Commands Command Description Timestep Limits Required - Sets the limiting value for the lower and upper timestep for the simulation. CFL Optional - Assigns the global computational stability constraints. CFL Internal Optional - Command to override the global CFL stability constraint for internal advective flux calculations. CFL External Optional - Command to override the global CFL stability constraint for the free surface shallow water wave celerity calculations. 5.7.3 Examples Global CFL With Timestep Limits GLobal CFL With Timestep Limits CLF == 0.95 ! {1.0} CFL Number Timestep Limits == 0.5, 5.0 ! {No default} Minimum Timestep (s), {No default} Maximum Timestep (s) Internal and External CFL With Timestep Limits Internal and External CFL With Timestep Limits CLF Internal == 0.6 ! {1.0} Internal CFL Number CLF External == 0.95 ! {1.0} External CFL Number Timestep Limits == 0.5, 5.0 ! {No default} Minimum Timestep (s), {No default} Maximum Timestep (s) 5.8 Wetting And Drying 5.8.1 Command Status Optional: Wetting and drying and stability limits commands are optional and can be omitted from the .fvc file. 5.8.2 Description Wetting and drying refers to the process by which individual cells in the computational mesh transition between wet (active) and dry (inactive) states during a simulation. TUFLOW FV supports wetting and drying by progressively switching on model computations as a function of cell depth. Two depth thresholds, the drying depth, and the wetting depth are set using the Cell Wet/Dry Depths command (Table 5.6). A description of wetting and drying science is provided in Appendix E.8. Table 5.6: Wetting and Drying Command Description Cell Wet/Dry Depths Optional - Sets the cell dry and wetting depths used to switch off momentum and mass calculations in regions of shallow flow. 5.8.3 Examples Wetting And Drying - Metric Units Wetting And Drying (Metric) Cell Wet/Dry Depths == 0.0001, 0.05 ! {1.e-5} Dry depth (m), {1.e-2} Wet depth (m) Wetting And Drying - US Customary Units Wetting And Drying (U.S. Customary) Cell Wet/Dry Depths == 0.001, 0.1 ! {3.28e-5} Dry depth (ft), {3.28e-2} Wet depth (ft) 5.9 Bottom Drag Model 5.9.1 Command Status Required 5.9.2 Description Bed resistance is modelled by setting the Bottom Drag Model command (Table 5.7). The default model ‘Manning’ applies Manning’s formulation and requires the spatial definition of Manning’s ‘n’ roughness coefficients. Alternatively, a log-law velocity profile model ‘ks’ can be used, which requires the spatial definition of Nikuradse roughness length scale (ks) values. Further information on the science of each model is provided in Appendix E.9. Roughness values are defined globally using the Global Bottom Roughness command. Global values can be overridden locally through use of material-specific values (Section 5.13.5). Table 5.7: Bottom Drag Model Commands Command Description Bottom Drag Model Required - Sets the bottom drag model for bed friction calculations. Global Bottom Roughness Required - Sets the default global Manning’s ‘n’ coefficient or Nikuradse roughness length. 5.9.3 Examples Manning Bottom Drag Model Manning Bottom Drag Model Bottom Drag Model == Manning ! {Manning} | ks Global Bottom Roughness == 0.03 ! {1.0E-6} Manning's 'n' ks Bottom Drag Model - Metric Units ks Bottom Drag Model (Metric Units) Bottom Drag Model == ks ! {Manning} | ks Global Bottom Roughness == 0.1 ! {1.0E-6} Nikuradse roughness length (m) ks Bottom Drag Model - US Customary Units ks Bottom Drag Model (US Customary Units) Bottom Drag Model == ks ! {Manning} | ks Global Bed Roughness == 0.3 ! {1.0E-6} Nikuradse roughness length (ft) 5.10 Horizontal Momentum Mixing 5.10.1 Command Status Required 5.10.2 Description Sub-grid-scale horizontal turbulent mixing is modelled using the Momentum Mixing Model command. Four models are available: ‘None’, ‘Constant’, ‘Smagorinksy’, and ‘Wu’. Further information on the science of each model is provided in Appendix E.10. Horizontal turbulent mixing is specified for the entire model domain by using the Momentum Mixing Model command and two ‘Global’ commands in combination (Table 5.8). Global values can be overridden locally through use of material-specific values (Section 5.13). Table 5.8: Momentum Mixing Model Commands Command Description Momentum Mixing Model Required - Selects the momentum mixing model for horizontal sub-grid scale turbulent mixing. Global Horizontal Eddy Viscosity Conditional - Assigns the eddy viscosity coefficient or constant value. Global Horizontal Eddy Viscosity Limits Conditional - Sets a minimum and maximum limit on computed eddy viscosity. 5.10.3 Examples Momentum Mixing Disabled ! Momentum Mixing Disabled Momentum Mixing Model == None ! {None} | Constant | Smagorinsky | Wu Constant Model ! Constant Model Momentum Mixing Model == Constant ! {None} | Constant | Smagorinsky | Wu Global Horizontal Eddy Viscosity == 1.0 ! {0.0} Eddy viscosity (m²/s) Smagorinsky Model ! Smagorinsky Model Momentum Mixing Model == Smagorinsky ! {None} | Constant | Smagorinsky | Wu Global Horizontal Eddy Viscosity == 0.5 ! {0.0} Smagorinksy coefficient Global Horizontal Eddy Viscosity Limits == 0.05, 99999. ! {0.0} Minimum eddy viscosity (m²/s), {99999.} Maximum eddy viscosity (m²/s) Wu Model ! Wu Model Momentum Mixing Model == Wu ! {None} | Constant | Smagorinsky | Wu Global Horizontal Eddy Viscosity == 4.0 ! {0.0} Wu coefficient Global Horizontal Eddy Viscosity Limits == 0.05, 99999. ! {0.0} Minimum eddy viscosity (m²/s), {99999.} Maximum eddy viscosity (m²/s) 5.11 Computational Mesh 5.11.1 Command Status Required: Either one unstructured, or one structured mesh (but not both) is needed to define the computational mesh. 5.11.2 Description The computational mesh defines the horizontal spatial discretisation of the model domain and forms the geometric basis for all calculations in TUFLOW FV. Two mesh types are supported: Unstructured mesh: Comprised of irregular triangular and/or quadrilateral elements (Section 5.11.3) Structured mesh: Composed of regularly spaced rectangular elements (Section 5.11.5) 5.11.3 Unstructured Mesh TUFLOW FV supports unstructured meshes generated in the Aquaveo SMS .2dm file format (Appendix E.11.1.1). Unstructured meshes are typically used to represent complex geometries such as estuaries, rivers, and coastal systems such as the mesh shown in Figure 5.1. Detailed instructions on how to generate unstructured meshes are provided in TUFLOW FV’s Tutorial Modules. The tutorials range in complexity, and provide general guidance on meshing with links to further educational meshing resources. Unstructured meshes are read using the Geometry 2D command as described in Table 5.9. Table 5.9: Unstructured Mesh Read Command Command Description Geometry 2D Required - Reads the mesh topology from a .2dm unstructured mesh file. This mesh may contain triangles, quadrilaterals, or a combination of these geometries. Only one Geometry 2d command and mesh should be used per simulation. 5.11.4 Unstructured Mesh Examples ! Unstructured Mesh Geometry 2D == ..\\model\\geo\\MB_001.2dm Figure 5.1: Moreton Bay Unstructured Mesh (Constructed Using Aquaveo SMS) 5.11.5 Structured Mesh Structured rectangular meshes, with or without rotation, are defined using the set of commands described in Table 5.10. Table 5.10: Structured Mesh Commands Command Description Grid Origin Required - X and Y coordinate of the grid origin Grid Rotation Optional - Grid rotation specified in degrees positive from East as indicated in the left panel of Figure 5.2 Cell Size Required - The model cell size which can be independent in the X and Y directions Grid Size Required - The length of the X and Y grid axis Figure 5.2: Regular Mesh Rotation Convention 5.11.6 Structured Mesh Examples ! Regular grid definition Grid Origin == 548225, 7015813 ! X origin, Y origin (m or decimal degrees) Grid Rotation == 20. ! Rotation of x axis (degrees anti-clockwise from east) Cell Size == 100., 100. ! Cell size x, Cell size y (m or decimal degrees) Grid Size == 1000., 1000. ! Grid size x, Grid size y (m or decimal degrees) The mesh generated from the code block above is shown in Figure 5.3 Figure 5.3: Example Regular Mesh - Cell IDs are presented at each cell centre 5.12 Bathymetry 5.12.1 Command Status Required: At least one static bathymetry command must be user-specified in the .fvc file. Time-varying bathymetry commands are optional and can be omitted from the .fvc file. 5.12.2 Description TUFLOW FV includes the following bathymetry model classes. Static: Commands (potentially multiple) specifying bathymetry that does not change with time during a simulation (Section 5.12.3) Time-Varying: Commands specifying bathymetry that can change with time during a simulation (Section 5.12.5) 5.12.3 Static Bathymetry TUFLOW FV supports the assignment of static model bathymetry using a range of input formats, including digital elevation models (DEMs), triangulated irregular networks (TINs), and GIS vector layers. These inputs can be used to define elevations across the model domain, enforce breaklines, or apply values to specific areas. TUFLOW FV’s static bathymetry commands are provided in Table 5.11 and are further described in the sub-sections that follow. Commands can be used individually or in combination, with TUFLOW FV’s input layering approach determining the final bathymetric surface (Appendix E.12.1.1). Example .fvc file inputs are provided in Section 5.12.4. A typical workflow to assign static bathymetry is executed using the steps below. Read in an unstructured mesh using the Geometry 2D command. If bathymetry data is present it is read from the .2dm file Set a global default bathymetric value using the Set Zpts command Read in spatially varying bathymetry directly from a TIN using Read TIN Zpts, or a DEM using Read GRID Zpts. Multiple repeated instances of the command may be used if, for example, the dataset is tiled and multiple files require input The base elevations set up in the previous step(s) can be modified to represent hydraulic controls, proposed works, a design channel etc. Examples include: Defining the thalweg of estuaries or channels, or the crests of embankments, levees, fences, and other solid obstructions using Read GIS Z Line Incorporating proposed cut and fill developments or other earthworks using Read GIS Z Line or Read TIN Zpts Table 5.11: Static Bathymetry Commands Command Description Set Zpts Optional - Sets all elevations in the domain to a user specified value. Read GRID Zpts Optional - Updates cell centre elevations via a Digital Elevation Model (DEM) file. Read TIN Zpts Optional - Updates selected cell centre elevations via a Triangulated Irregular Network (TIN) file. Read GIS Z Line Optional - Reads GIS files that can contain polylines, points and/or polygons. Points and polylines are treated as breaklines in the model’s bathymetry. The breakline can vary in height along its length (i.e. a 3D breakline). Polygon features set a user-specified z elevation that updates any cell centroids located within the polygon extent. Cell Elevation File Optional - CSV file that updates cell centre elevations. Can be assigned using (Cell ID, Z) or (X,Y,Z) coordinates. Bed Elevation Limits Optional - Sets a lower limit (zbmin) and upper limit (zbmax) to the model bathymetry. Model elevations below zbmin will be set to zbmin, and likewise model elevations will be set to zbmax. This command is executed after all other bathymetry commands, and will overwrite any preceeding bathymetry below or above the zbmin or zbmax values. 5.12.3.1 Unstructured Mesh 2dm File If an unstructured mesh is specified using the Geometry 2D command (Section 5.11.3), .2dm vertex bathymetry values for each cell are averaged and assigned to the to cell centre. This averaging method is further described in Appendix E.12.1.2. When present, .2dm bathymetry data is always read and applied first, before any other bathymetry commands are processed. This occurs regardless of the position of the Geometry 2D command within the .fvc file. 5.12.3.2 Direct Reading Of DEM Grids The Read GRID Zpts command interpolates elevation values from an ESRI ASCII (.asc) or binary (.flt) grid to mesh cell centroids, using bilinear interpolation. Only cells within the spatial extent of the grid are updated. If a cell falls within the grid extent but corresponds to a null value (e.g. a NoData cell in the DEM), its elevation is not modified. Figure 5.4 illustrates an example in which the grid DEM_5m.asc is applied via this command. The resulting bathymetry interpolated to cell centres can be visualised using the _mesh_check output file (Section 13.4. Figure 5.4: Cell Bathymetry Assigned Using Read GRID Zpts (Displayed in QGIS) 5.12.3.3 Direct Reading Of TINs Bathymetry can be assigned using a Triangulated Irregular Network (TIN) through the Read TIN Zpts command. This command supports TINs in the Aquaveo SMS .tin file format (Figure 5.5). Elevations are assigned to mesh cell centres within the TIN’s spatial extent using bilinear interpolation. Figure 5.5: Design TIN Layout (Displayed In Aquaveo SMS) 5.12.3.4 Breakline Layers The Read GIS Z Line command updates cell elevations along a breakline using a combination of GIS polyline and point layers. The breakline can vary in height along its length (i.e. a 3D breakline). Linear interpolation is used to update cell centroid values between user-specified elevation points. Figure 5.6 shows an example using breaklines layers to enforce the bathymetry of a design bund. In the left a breakline polyline (black dash) has been digitised with elevation points (red circles) snapped to the start, middle and end polyline vertices with elevations -0.2, 1.0 and 0.5 m respectively. During model start-up cell elevations are linearly interpolated along the polyline resulting in the cell centre elevation updates indicated by the pink triangles with red labels in the right image. Figure 5.6: Breakline Definition Using Combination Of Polyline And Point GIS Layers The template GIS layers required to define breaklines, prefixed with ‘2d_zln_’ are generated during model initialisation (Section 5.2). Multiple geometry types are supported and are indicated by the following suffixes: _P for point features (e.g., 2d_zln_M03_002_P.shp) _L for line features (e.g., 2d_zln_M03_002_L.shp) ‘2d_zln_’ layers require the assignment of a single ‘Z’ elevation attribute as shown in Table 5.12. Table 5.12: 2D Z (2d_z_) Attribute Description Attribute Name(s) Description Type ID Elevation of the point, polyline or polygon. Float When specifying Read GIS Z Line point and polyline layers are associated by using the vertical bar syntax (|). Up to nine point layers can be specified per command line. When using both polylines and points, the line file must appear first in the command string. For example: Correct: Read GIS Z Line == ..\\model\\gis\\2d_zln_M03_002_L.shp | ..\\model\\gis\\2d_zln_M03_002_P.shp Incorrect: Read GIS Z Line == ..\\model\\gis\\2d_zln_M03_002_P.shp | ..\\model\\gis\\2d_zln_M03_002_L.shp Multiple point files may be included but must not appear as the first entry in the list. For example: Read GIS Z Line == ..\\model\\gis\\2d_zln_M03_002_L.shp | ..\\model\\gis\\2d_zln_M03_002_P.shp | ..\\model\\gis\\2d_zln_M03_003_P.shp If using Mapinfo .mif files, point and polyline geometries can be contained in a single .mif file if preferred. For example: Read GIS Z Line == ..\\model\\gis\\2d_zln_M03_001.mif Modified cell centre elevations are output to the 2d_zln_zpt_check layer if Write Check Files has been set. 5.12.3.5 Polygon Layers GIS polygon layers can be used to set a spatially constant elevation for any cell centroids located within the polygon’s extent using the Read GIS Z Line command. Figure 5.7 shows an example application where a polygon is used to represent the reclamation associated with a proposed development. The reclamation area is defined by the blue hatched polygon. The updated cell centre values are shown via 2d_zln_zpt_check layer as pink triangles with red labels, showing all values have been set to 2 m. Figure 5.7: Filling Of Spoil Ground Modelled Using GIS Polygon During model initialisation (Section 5.2), template layers prefixed with ‘2d_zln_’ are created to support the digitisation of breaklines. Geometry type is indicated by the ‘_R’ suffix for polygon features (e.g., 2d_zln_SpoilGround_001_R.shp). ‘2d_zln_’ layers require the assignment of a single ‘Z’ elevation attribute as shown in Table 5.12. Modified cell centre elevations are output to the 2d_zln_zpt_check layer (see Section 13.4) if Write Check Files has been set. 5.12.3.6 Pre-Processed Cell Elevations The Cell Elevation File command assigns bathymetry values directly to mesh cells, either by referencing cell IDs or by specifying x,y coordinates that fall within individual cells. Cell elevation files are mesh-specific and must be pre-generated prior to a simulation. A suggested workflow for creating cell elevation files is provided in Appendix E.12.2.1. Unlike other bathymetric assignment methods, cell ID referencing does not require interpolation, enabling near-instantaneous bathymetry assignment during model start-up. However, this approach is mesh-specific and requires pre-processing prior to running a TUFLOW FV simulation. If the mesh is modified, a new cell elevation file must typically be generated. Due to its dependence on the mesh structure, this method is recommended primarily if minimising model initialisation time is a priority. 5.12.3.7 Bed Elevation Limits The Global Bed Elevation Limits command sets a lower limit (zbmin) and upper limit (zbmax) to the model bathymetry. Model elevations below zbmin will be set to zbmin, and likewise model elevations will be set to zbmax. This command is executed after all other bathymetry commands, and will overwrite any preceeding bathymetry below or above the zbmin or zbmax values. 5.12.4 Static Bathymetry Examples Catchment/Floodplain Bathymetry This example is a representative sequence of commands and datasets used for defining catchment/floodplain model bathymetry. For reference the bathymetry range of the floodplain is between RL 25-65m. The unstructured mesh is used to define the model topology only, any bathymetry within the .2dm is overwritten by subsequent commands A default bathymetric value of 90 m is set. This is well above the 25-65m physical bathymetry in the study area. In this instance the default is set to ensure any missing data values in the GIS are filled in and can be easily identified Lidar-dervied survey is used to define the ‘base’ bathymetry A manually surveyed breakline of the channel thalweg is enforced using breaklines Detailed survey of road crests is enforced using breaklines To improve 1D/2D culvert structure linking, polygons are used to enforce surveyed culvert invert levels that the Lidar data has missed ! GEOMETRY Geometry 2D == ..\\model\\geo\\Mesh_001.2dm ! Flexible mesh geometry ! Topography Set Zpts == 90. ! Overwrite .2dm elevations and set all to 90 m Read Grid Zpts == ..\\model\\geo\\dem_m01.asc ! Assign Zb elevations with DEM Read GIS Z Line == ..\\model\\gis\\2d_zln_M03_Thalweg_001_L.shp | ..\\model\\gis\\2d_zln_M03_Thalweg_001_P.shp ! Enforce channel thalweg breakline Read GIS Z Line == ..\\model\\gis\\2d_zln_M03_Rd_Crest_001_L.shp | ..\\model\\gis\\2d_zln_M03_Rd_Crest_001_P.shp ! Enforce road crest breaklines Read GIS Z Shape == ..\\model\\gis\\2d_zsh_Invert_Correction_001_R.shp ! Enforce mesh Zb to surveyed culvert invert levels Coastal Bathymetry This example shows a sequence of bathymetry layers used to represent a proposed port upgrade design. The unstructured mesh is used to define the model topology only, any bathymetry within the .2dm is overwritten by subsequent commands A default bathymetric value of land value of 10 m is set. As this is a coastal project, this value is well above the highest water level expected during the analysis. This default is set to ensure any missing data values in the GIS are filled in and can be easily identified A TIN of bathymetric sounding data is used to define the existing ocean bathymetry, pre-development Lidar-dervied survey is used to define the ‘base’ bathymetry for overland areas The design TIN earthworks of the proposed port development are ‘stamped’ onto the existing ‘base’ bathymetry ! Unstructured Mesh Specification Geometry 2D == ..\\model\\geo\\MB_001.2dm ! Overwrite .2dm Bathymetry with Updates Set Zpts == 10.0 Read TIN Zpts == ..\\model\\geo\\Bathy_Survey_202011.tin Read GRID Zpts == ..\\model\\geo\\Lidar_5m_202306.flt Read TIN Zpts == ..\\model\\geo\\Design_OPT_001.tin Bed Elevation Limits ! Truncate Bathymetry Below -100 mRL and above 10 mRL Global Bed Elevation Limits == -100, 10 ! {-9.99E+09} zbmin (mRL or ftRL), {9.99E+09} zbmax (mRL or ftRL) 5.12.5 Time Varying Bathymetry TUFLOW FV supports the specification of bathymetry that changes during the simulation using a set of time-varying structure commands. These allow localised adjustments to bed elevation based on a prescribed time series, model-sampled parameters (e.g. flow or level), or a combination of digital elevation model (DEM) surfaces and control rules. Common applications include the representation of levee breaches, sandbar migration, or event-driven scouring and deposition. Variable bathymetry is configured using TUFLOW FV’s hydraulic structure block functionality and thus is not repeated here (see Section 5.16.2). 5.13 Materials 5.13.1 Command Status Required 5.13.2 Description Materials are integer identifiers assigned to each 2D cell. They are used to define spatially varying hydraulic and bed-related properties across the model domain. Material ID is then linked to one or more material properties, such as bottom roughness, horizontal eddy viscosity, or elevation limits using material blocks. The methods for assigning spatial material IDs, and specifying their associated material properties are described in (Section 5.13.3) and (Section 5.13.5) respectively. 5.13.3 Material Spatial Definition Materials can be applied uniformly, read from the unstructured mesh file, or defined via GIS layers. Material spatial definition commands are provided in Table 5.13. The recommended material spatial definition workflow is as follows. Read in an unstructured mesh using the Geometry 2D command. If no material data is present in the .2dm file, all cells are set to 0 Set a global default material ID using the Set Mat command Read in spatially varying materials directly from a GIS polygon layer using one or more Read GIS Mat commands Commands can be used individually or in combination, with TUFLOW FV’s input layering approach determining the final material spatial converage. (Appendix E.13.1.1). Example .fvc file inputs are provided in Section 5.13.4. During model development, the Write Check Files command (refer Section 13.4) should be used to verify the material assignments and ensure proper model configuration. Figure 5.8 shows the use of material polygons to define the landcover and in-stream bed type for a coastal estuary analysis. The polygons are coloured according the the material ID assigned to each polygon, which is labelled for each polygon. Figure 5.8: Material ID Spatial Definition Table 5.13: Material Update Commands Command Description Set Mat Optional - Sets all material in the domain to a single user specified value. Read GIS Mat Optional - Spatially vary cell materials using a GIS layer of polygons. 5.13.3.1 Unstructured Mesh 2dm File If an unstructured mesh is specified using the Geometry 2D command (Section 5.11.3), materials IDs are directly read from the .2dm for each cell. When present, .2dm material data is always read and applied first, before any other material commands are processed. This occurs regardless of the position of the Geometry 2D command within the .fvc file. 5.13.3.2 GIS Material Layers GIS polygon layers can be used to set a the material ID for any cell centroids located within the polygon’s extent using the Read GIS Z Mat command. During model initialisation (Section 5.2), template layers prefixed with ‘2d_mat_’ are generated for use in defining materials. ‘2d_mat_’ layers require the assignment of a single ‘Mat’ elevation attribute as shown in Table 5.14. Table 5.14: 2D Mat (2d_mat_) Attribute Description Number of Attributes Attribute Name Description Type 1 MATERIAL Cell Material ID Integer 5.13.4 Material Spatial Definition Examples ! Material Specification with Updates Geometry 2D == ..\\model\\geo\\South_Bay_001.2dm ! Read 'base' materials from .2dm ! Overwrite .2dm Materials Set Mat == 2 ! Override .2dm materials and set all cells to 2 Read GIS Mat == ..\\model\\gis\\2d_mat_BedMapping_001_R.shp ! Materials for offshore Read GIS Mat == ..\\model\\gis\\2d_mat_GovLanduse_001_R.shp ! Overland landuse mapping Read GIS Mat == ..\\model\\gis\\2d_mat_Design_OPT_001_R.shp ! Design channel bed type 5.13.5 Material Properties Material properties are specified within a material block, which begins with the Material command and ends with End Material. A separate block must be provided for each material ID used in the model, and each block contains the property values assigned to that material. Table 5.15 lists the available material property commands. Multiple material properties commands (e.g. bottom roughness, horizontal eddy viscosity, bed elevation limits etc.) can be used within a single material block. Table 5.15: Material Properties Commands Command Description Material Required - instantiates a material block for a given material ID. Bottom Roughness Optional - Assignes a material-specific bottom roughness. Overrides the Global Bottom Roughness. Horizontal Eddy Viscosity Optional - Assignes a material-specific horizontal eddy viscosity value or coefficient. Overrides the Global Horizontal Eddy Viscosity command. Horizontal Eddy Viscosity Limits Optional - Assignes material-specific horizontal eddy viscosity limits. Overrides the Global Horizontal Eddy Viscosity Limits command. Bed Elevation Limits Optional - Assignes material-specific bed elevation limits. Overrides the Global Bed Elevation Limits command. Spatial Reconstruction Optional - Used to revert an area to first-order calculations where the model is otherwise a second-order odel. If a first-order model is being used, then this flag will have no effect. End Material Required - Closes the material block. 5.13.6 Material Properties Examples Bed Resistance The example below presents a global bottom roughness that is modified for three of the materials. Global Settings - ks Bottom Drag Model Bottom Drag Model == ks ! {Manning} | ks Global Bottom Roughness == 0.10 ! {1.0E-6} Nikuradse roughness length (m) ! Local Materials ! Sandy Bed Material == 10 ! {0} Material ID &nbsp;&nbsp;Bottom Roughness == 0.05 ! {Global value} Nikuradse roughness length (m) End Material ! Grassland Material == 2 ! {0} Material ID &nbsp;&nbsp;Bottom Roughness == 0.15 ! {Global value} Nikuradse roughness length (m) End Material ! Reeds Material == 8 ! {0} Material ID &nbsp;&nbsp;Bottom Roughness == 0.25 ! {Global value} Nikuradse roughness length (m) End Material Horizontal Eddy Viscosity Global Settings - Momentum Mixing Model Momentum Mixing Model == Smagorinsky ! {None} | Constant | Smagorinsky | Wu Global Horizontal Eddy Viscosity == 0.5 ! {0.0} Smagorinksy coefficient Global Horizontal Eddy Viscosity Limits == 0.05, 99999. ! {0.0} Minimum eddy viscosity (m²/s), {99999.} Maximum eddy viscosity (m²/s) ! Locally Increase Horizontal Eddy Viscosity Material == 11 ! {0} Material ID &nbsp;&nbsp;Horizontal Eddy Viscosity == 1.0 ! {Global value} Smagorinksy coefficient &nbsp;&nbsp;Horizontal Eddy Viscosity Limits == 100., 99999. ! {Global value} Minimum eddy viscosity (m²/s), {Global value} Maximum eddy viscosity (m²/s) End Material Bed Elevation Limits This example shows three materials set to different limits. Material 1 is trimmed so that any elevations below datum level -10m are set to -10m, without limiting higher levels. Material 2 is entirely set to +5m. Material 3 is trimmed to the same minimum level as material 1, but with an upper limit of -2m which might be below the tidal minimum, ensuring wet cells. ! Global Settings Global Bed Elevation Limits == -1000, 100 ! {-9.99E+09} zbmin (mRL or ftRL), {9.99E+09} zbmax (mRL or ftRL) ! Local Overrides ! Truncate below -10 mRL Material == 1 ! {0} Material ID &nbsp;&nbsp;Bed Elevation Limits == -10, 9999 ! {Global value} zbmin (mRL or ftRL), {Global value} zbmax (mRL or ftRL) End Material ! Set to 5m Material == 2 ! {0} Material ID &nbsp;&nbsp;Bed Elevation Limits == 5, 5 ! {Global value} zbmin (mRL or ftRL), {Global value} zbmax (mRL or ftRL) End Material ! Truncate below -10 mRL and above -2 mRL Material == 3 ! {0} Material ID &nbsp;&nbsp;Bed Elevation Limits == -10, -2 ! {Global value} zbmin (mRL or ftRL), {Global value} zbmax (mRL or ftRL) End Material Material Block With Multiple Properties Multiple Material Properties ! Local Materials ! Sandy Bed Material == 10 ! {0} Material ID &nbsp;&nbsp;Bottom Roughness == 0.05 ! {Global value} Nikuradse roughness length (m) &nbsp;&nbsp;Bed Elevation Limits == -10, 9999 ! {Global value} zbmin (mRL or ftRL), {Global value} zbmax (mRL or ftRL) End Material 5.14 Initial Conditions 5.14.1 Command Status Optional - If no initial conditions are user-specified, TUFLOW FV will automatically set the initial water level at each cell to the maximum of the bathymetry level, or datum level 0.0 (m or ft). Velocities are set to a default value of 0.0 (m/s or ft/s). 5.14.2 Description Initial conditions set the starting parameter state values of every cell within the model. Initial conditions can be specified as spatially constant across the whole model domain, be spatially varying, or using a restart file from a previous model run. Initial condition commands for the 2D HD simulation class are provided in the sub-sections that follow. Examples for each initial condition type is provided in Section 5.14.6. Initial condition and restart commands adhere to the command layering approach described in Appendix E.14.1.1. 5.14.3 Spatially Constant The spatially constant initial conditions available for the 2D HD simulation class are presented in Table 5.16. Table 5.16: Spatially Constant Initial Condition Commands Command Description Initial Water Level Optional - Sets the initial water level to a global user specified value. 5.14.4 Spatially Varying The spatially varying initial conditions available for the 2D HD simulation class are presented in Table 5.17. Table 5.17: Spatially Varying Initial Condition Commands Command Description Initial 2D Optional - File path to initial condition 2d csv file. Allows for user specified spatially varying water level and velocity initial conditions. 5.14.5 Restart File Restart files are generated by TUFLOW FV and contain spatially varying model variables at an instant in time. Once generated, they can be used to define the initial condition of a subsequent TUFLOW FV simulation. Restart commands are summarised in Table 5.18. Table 5.18: Restart Commands Command Description Write Restart dt Optional - Writes a restart file (.rst) to the log directory location at the time interval specified. Restart Optional - Load the simulation initial conditions from a restart file (.rst) generated by a previous TUFLOW FV simulation. Use Restart File Time Optional - Switch to choose whether to use the timestamp written to the restart file (.rst) or to use the simulation Start Time. Restart Overwrite Optional - Switch to overwrite the restart file at the time interval specified using the Write Restart dt command or create a series of restart files for each timestep: 5.14.6 Examples Global Initial Water Level ! Set Global Initial Water Level Initial Water Level == -0.1 ! {0.0} Water surface elevation (m) Spatial Varying Initial Water Level ! Spatially Varying Initial Water Level Initial 2D == ..\\model\\bc_dbase\\IC_0240301.csv ! 2D IC filepath Global Initial Water Level With Local Override ! Combination of Global and Spatially Varying Initial Water Level == -0.1 ! {0.0} Water surface elevation (m) Initial 2D == ..\\model\\bc_dbase\\IC_Midnight_Lake_001.csv ! 2D IC filepath. Begin lake at 1.1 m Restart files allow TUFLOW FV simulations to begin from previously computed results, enabling continuation across multiple simulation periods. Writing Restart Files An initial model, FR_20221201_20230101_001.fvc, models a one-month warm-up simulation (01-Dec-2022 to 01-Jan-2023) for the Fig Reach (FR) estuary flushing analysis. The following commands in the .fvc file specify restart file output: ! Write Restart File Write Restart dt == 24.0 ! Interval (hours) for writing restart data Restart Overwrite == 1 ! Enable overwrite mode (1: overwrite, 0: don't overwrite) This configuration writes a restart file every 24 hours and overwrites the previous restart file, resulting in a single restart file at the end of the simulation. Reading Restart Files A subsequent simulation (FR_20230101_20230701_001.fvc) continues the analysis from 01-Jan-2023 to 01-Jul-2023 by reading the restart file produced by the initial warm-up simulation: ! Read Restart File Restart File == ./log/FR_20221201_20230101_001.rst Use Restart File Time == 1 ! 0 Use the model Start Time | {1} Ignore the model Start Time in the .fvc file and use the time in the restart file This ensures the subsequent simulation picks up exactly from the conditions present at the end of the warm-up simulation, maintaining continuity in model state variables (e.g., water levels, velocities). 5.15 Boundary Conditions 5.15.1 Command Status Required 5.15.2 Description This section describes how to configure boundary conditions in a TUFLOW FV simulation. It introduces the available boundary model implementations, describes how to spatially define boundary locations, and explains the structure and use of boundary condition blocks. Detailed examples are provided for each boundary type. Boundary conditions in TUFLOW FV are assigned using the process as follows. Select a boundary condition model implementation for the modelling use case. For example inflow/outflow, water level, atmospheric etc. TUFLOW FV’s boundary model implementations are summarised in Table 5.19. For a given boundary condition model implementation, select from one of the pre-defined boundary condition types. For example, WL (polyline water level), Q (polyline inflow/outflow), QC (point inflow/outflow) (Section 5.15.3) Define the boundary location for the specific boundary type (Section 5.15.4) Configure the boundary with a boundary condition block (Section 5.15.5) Table 5.19: Boundary Condition Model Class - Model Implementations Model Implementation Description Water Level Water level boundary conditions. Inflow/Outflow Inflow or outflow boundary conditions. Stage Discharge User specified or automatic relationship between water level and flow. Ocean Circulation Model Fully specified boundary condition dervied from global ocean circulation models such as HYCOM or BRAN. Atmospheric Spatially constant or variable meterological variables such as wind speed, mean sea level pressure, solar and terrestrial radition, cloud cover, temperature, precipitation and relative humidity. The boundaries are typically driven usng output from a meterological/climate model such as ERA5, CFSv2, or ACCESS etc. Tropical cyclones can be modelled using the Holland Parametric Tropical Cyclone Model. Spectral Wave Spectral wave model forcing such as wave radiation stress and wave transport. Mass Direct mass input/output boundaries. For example to model dredge spoil. Force Force vector boundary conditions. For example to include the influence of a jet, or propeller wash. Zero Gradient and Reflective Boundary types that allow for free-overflow, or reflective conditions at model edges. Scalar Concentration Boundary condtions that set the value of scalar variables such as temperature, salinity, suspended sediment, tracers, and water quality constituents. Transport File File with hydrodynamic information from a previous simulation. The file is used to run a subequent simuation using a sub-set of hydrodynamic calculations, allowing the model to run more effeciently. Typically used for testing scenarios where the hydrodynamics do not change (tracer analysis for example). 5.15.3 Boundary Types The available boundary types for the 2D HD simulation class are listed in Table 5.20. Single or multiple boundary types may exist for a given boundary condition model implementation. For example, the tropical cyclone implementation is set using the boundary type ‘CYC_HOLLAND’ only, while the inflow/output implementation has multiple variants of the ‘Q’ type. Where multiple types exist, the boundary suffixes ‘C’, ‘C_POLY’, ‘C_GRID’, ‘CM’ and ‘G’ are used to differentiate how the boundary is added to the model. Each suffix is described in Table 5.21 using the inflow/outflow boundary condition model implementation as an example. Table 5.20: Boundary Condition Types - 2D HD Simulation Class Model Implementation Boundary Types Water Level WL, WLS, WL_CURT Inflow/Outflow Q, QC, QC_POLY, QC_GRID, QCM, QG Stage Discharge HQ, QN Ocean Circulation Model Not applicable to the 2D HD simulation class, refer Section 7.11.1. Atmospheric W10, PRECIP, W10_GRID, MSLP_GRID PRECIP_GRID, CYC_HOLLAND Spectral Wave WAVE, WAVE_COUPLED Mass Not applicable to the 2D HD simulation class, refer Section 7.11.1. Force FORCE, FORCE_POLY, FORCEM Zero Gradient and Reflective ZG, RS, RSN Scalar Concentration Not applicable to the 2D HD simulation class, refer Section 7.11.1. Transport File Not applicable to the 2D HD simulation class, refer Section 7.11.1. Table 5.21: Boundary Condition Suffixes Boundary Suffix Description Example Boundary Type N/A No keyword typically indicates the model is applied to a polyline (nodestring) location. Where exceptions exist they are described in each boundary condtion type section. Q C The keyword ‘C’ indicates this is a cell boundary type assigned to a single model cell. QC _POLY The keyword ’_POLY’ indicates this is a cell boundary type distributed over multiple model cells inside a polygon extent. QC_POLY _GRID The keyword ’_GRID’ indicates this is a cell boundary type distributed over multiple model cells using a grid of spatially varying values. QC_GRID M The keyword ‘M’ indicates this is a cell boundary type distributed over multiple model cells using a grid of spatially varying values. QCM G The keyword ‘G’ indicates this is a spatially constant cell boundary type assigned globally to all model cells. QG 5.15.4 Boundary Location Definition Boundary locations are defined using one of the methods described in Table 5.22. Examples of defining each boundary condition location are provided in the sub-sections that follow. Table 5.22: Assigning Boundary Locations - 2D HD Simulation Class Boundary Location Definition Description Polyline (Nodestring) Assigns boundary condition to cell faces or cells via model nodestrings using the Read GIS Nodestring command. Used to represent open boundaries on the edge or the mesh. Defined globally in the .fvc file. Point Boundary condtion applied to an indivdual model cell (boundary types assigned the ‘C’ boundary suffix). Typically used for localised forcing such as point inflows or flow extractions. Locations are defined via the Read GIS SA command using point geometry. Defined globally in the .fvc file. Polygon Boundary condition distributed over multiple model cells within a polygon extent (boundary types assigned the ’_POLY’ boundary suffix). Useful for spatially distributed forcing over specific user-defined regions. Polygon locations are set via the Read GIS SA command using region (polygon) geometry. Defined globally in the .fvc file. Global Applies the boundary condtion to all model cells with a spatially constant value (boundary types assigned the ‘G’ boundary suffix). Suitable for uniform forcing such as rainfall, evaporation and other meterological conditions over a small model domain where spatial variation is boundary input is neglibible. No location specification requried. Grid Boundary condtions are interpolated to the mesh from an input grid (boundary types assigned the ’_GRID’ boundary suffix). Useful for assigning spatailly and temporally varying boundary conditions such as meterological and oceanographic grids, or diffusers/outfalls. The grid is defined using a TUFLOW FV Grid Definition Block, a series of related commands that set the grid geomery. Defined globally in the .fvc file. Moving Point Boundary condtion applied to individual model cells along a moving path (boundary types assigned the ‘M’ boundary suffix). Typically used for assigning inflows, masses, forces of turbulence to items that move during a simulation. For example a dredge hopper, tug boat or ship. Coordinates of the moving point path are provided within the BC Block input time series file. Tropical Cyclone Boundary condtions are calculated at each model cell. Used to generate a parametric wind and atmospheric pressure boundary based on the Holland Tropical Cyclone model. Coordinates of the tropical cyclone track are provided within the BC Block input time series file. Spectral Wave Boundary condtions are interpolated to the mesh from either an input grid(s) or a coupled spectral wave model. Specified using a TUFLOW FV Grid Definition Block, a series of related commands that set the grid geomery for uncoupled simulation, or by directly referencing a spectral wave model control file for coupled simulation. Defined globally in the .fvc file. Transport File Not applicable to the 2D HD simulation class, refer Section 7.11.2.1. 5.15.4.1 Polyline Polyline boundaries are set using the Read GIS Nodestring command. During model initialisation (Section 5.2), template layers prefixed with ‘2d_ns_’ are created to support the digitisation of nodestring polylines. Geometry type is indicated by the ‘_L’ suffix for polyline features (e.g., 2d_ns_Ocean_001_L.shp). ‘2d_ns_’ layers require the assignment of two attributes as shown in Table 5.23. When read by TUFLOW FV, each polyline object is converted into a nodestring by snapping the polyline to the nearest cell faces along its path. The resulting nodestring cell face selections can be reviewed in the simulation output _ns_check_L and _bc_check_L layers if the Write Check Files command is enabled. Table 5.23: Empty 2d_ns Nodestring GIS Layer Attribute Name(s) Description Type ID Unique identifier/name of the polyline Character Flags If set to ‘BD’ informs TUFLOW FV to project, and snap the polyline onto the mesh boundary. If blank, select the cell faces closest to the polyline. Character For boundaries aligned with the edge of the model mesh, the direction in which a polyline (nodestring) is digitised does not affect how the boundary condition is applied. However, the digitised direction does determine the sign convention assigned to model result outputs such as polyline fluxes (Section ??) and mass balance (Section 5.17.10). To ensure consistency with model outputs, it is recommended to adopt the following digitising convention: Catchment and estuary models: Digitise from right bank to left bank when looking downstream. Coastal models: Digitise from right to left along the boundary when looking offshore (i.e. from land to sea). For instance, the nodestring shown in Figure 5.9 is digitised from south to north—right to left when viewed offshore. This boundary has the ID “Ocean” and the flag “BD”. The polyline has been styled using the TUFLOW FV QGIS Plugin to show small arrows pointing offshore, visually indicating the positive sign direction for fluxes across the nodestring. ! Polyline (Nodestring) Boundary Location Definition Read GIS Nodestring == ..\\model\\gis\\2d_ns_Ocean_001_L.shp Figure 5.9: Nodestring Defining Offshore Astronomical Tide Boundary Location 5.15.4.2 Point Point boundaries are set using GIS point 2d_sa layers in combination with the Read GIS SA command. During model initialisation (Section 5.2), template layers prefixed with ‘2d_sa_’ are created to support the digitisation of boundary points. Geometry type is indicated by the ‘_P’ suffix for point features (e.g., 2d_sa_UrbanCatch_001_P.shp). ‘2d_sa_’ layers require the assignment of a single ‘Name’ attribute as shown in Table 5.24. The cells selected can be reviewed in the simulation output _sa_check_P layer if the Write Check Files command is enabled. Table 5.24: Empty 2d_sa boundary GIS Layer Attribute Name(s) Description Type Name Unique identifier/name of the boundary location. Character Figure 5.10 illustrates catchment inflows to a coastal estuary, applied using the GIS layer 2d_sa_UrbanCatch_001_P.shp. This layer includes seven point locations where catchment inflow enters the estuary. ! Point Boundary Location Definition Read GIS SA == ..\\model\\gis\\2d_sa_UrbanCatch_001_P.shp Figure 5.10: Read GIS SA Points 5.15.4.3 Polygon Polygon boundary conditions are set using a combination of GIS region geometry type 2d_sa layers and the Read GIS SA command. During model initialisation (Section 5.2), template layers prefixed with ‘2d_sa_’ are created to support the digitisation of boundary polygons. Geometry type is indicated by the ‘_R’ suffix for region features (e.g., 2d_sa_UrbanCatch_001_R.shp). ‘2d_sa_’ layers require the assignment of a single ‘Name’ attribute as shown in Table 5.24. The cells selected can be reviewed in the simulation output _sa_check_P layer if the Write Check Files command is enabled. Figure 5.11 illustrates the use of inflow polygons to distribute local catchment runoff across multiple model cells. The example shows two polygons from the layer 2d_sa_UrbanCatch_001_R.shp: ‘Park Treatment’, which selects ten model cells, and ‘Carpark’, which selects six model cells. The flow is distributed among the selected cells, weighted according to their respective cell areas. ! Polygon Boundary Location Definition Read GIS SA == ..\\model\\gis\\2d_sa_UrbanCatch_001_R.shp Figure 5.11: Read GIS SA Polygons 5.15.4.4 Global Global boundary conditions apply a spatially constant condition to all model cells. No GIS or spatial input is required. 5.15.4.5 Grid Grid definition blocks define the location of gridded boundary condition types. These definitions establish an interpolation mapping from the grid to the computational mesh. Two grid definition types are available: Via an existing NetCDF file User (manually) defined Available grid definition commands for the 2D HD simulation class are provided in Table 5.25. Table 5.25: Grid Definition Block Commands Command Description Grid Definition File Required (Either Grid Definition File or Grid Definition must be specified) - Opens a grid definition block. Specifies the NetCDF file containing coordinates for defining the grid used in gridded boundary condition types. The recommended option for setting the grid geometry. Grid Definition Required (Either Grid Definition File or Grid Definition must be specified) - A user defined grid of coordinates used for gridded boundary condtion types. An alternative option to the Grid Definition File. Grid Definition Label Required - Assigns a name to the grid, allowing it to be referenced by multiple boundary conditions. Grid Definition Variables Required - If using the Grid Definition File option, this command specifies which variables should be read from the NetCDF to create the grid. Cell Gridmap Optional - Calculate interpolation weightings from the grid to the computational mesh. Boundary Gridmap Optional - MJS TODO - Relevant for 2D HD simulation class? Think this is currently only used for interpolating OBC_GRID data to the curtains. Supress Coverage Warnings Optional - Use the grid extent as a mask to reduce the calculation footprint of boundary updates. For example, if the computational mesh contains 40,000 cells and the boundary grid extent is cooincident with 1,000 of the cells, only process the 1,000 cells when reading and updating model boundary data. End Grid Required - Specified the termination or closure of the grid block opened by the Grid Definition File command. Examples for each grid definition type are provided below. Grid Definition File ! Grid Boundary Location Definition Grid Definition File == merge/CFSR_20230101_20230201_MGA56_UTC.nc ! Open grid definition block and reference file with grid coordinates &nbsp;&nbsp;Grid Definition Variables == x, y ! The x and y coordinate variable names within the specified NetCDF file &nbsp;&nbsp;Grid Definition Label == atmos ! Name of the grid End Grid ! Close grid definition block Figure 5.12: CFSR Wind Speed Grid Overlaid On TUFLOW FV Unstructured Mesh User-Defined Grid Definition As an alternative to setting the grid location via a NetCDF file, user-defined 2D grids can be specified using the Grid Definition command. The required arguments are: x0: The grid x origin in meters, feet, or decimal degrees y0: The grid y origin in meters, feet, or decimal degrees alp: The grid rotation in decimal degrees mx: The number of cells in the grid’s x direction my: The number of cells in the grid’s y direction dx: The cell size in the grid’s x direction in meters, feet, or decimal degrees dy: The cell size in the grid’s y direction in meters, feet, or decimal degrees The rotation convention is as described in Figure 5.2. ! Grid Boundary Location Definition Grid Definition == 158.5, -31.5, 0.0, 100, 50, 0.01, 0.01 x0, y0, alp, mx, my, dx, dy &nbsp;&nbsp;Grid Definition Label == user_defined_ocean ! Name of the grid End Grid 5.15.4.6 Moving Point Moving point boundary locations are defined via X and Y coordinates directly specified in the input boundary condition time series file. For example: Time,X,Y,Flow 01/05/2011 23:00:00,159.07365,-31.35875,0.00 02/05/2011 00:00:00,159.07365,-31.35875,10.0 02/05/2011 03:00:00,159.07438,-31.36102,10.0 02/05/2011 06:00:00,159.07569,-31.36364,10.0 02/05/2011 09:00:00,159.07668,-31.36633,10.0 02/05/2011 12:00:00,159.07864,-31.36915,10.0 02/05/2011 15:00:00,159.08048,-31.37086,10.0 02/05/2011 18:00:00,159.08219,-31.37145,10.0 02/05/2011 21:00:00,159.08468,-31.37361,10.0 03/05/2011 00:00:00,159.08632,-31.37420,10.0 Figure 5.13: Example Moving Boundary Condition 5.15.4.7 Tropical Cyclone Tropical cyclone tracks are defined via X and Y coordinates directly specified in the input boundary condition time series file. For example: Time,X,Y,P0,PA,RMAX,B,RHOA,KM,THETMAX,DELTAFM,Latitude,WBGX,WBGY 26/03/2010 16:30,137.756,-8.847,950,1010,50000,1.5,1.17,0.7,160,1,-8.847,0,0 01/04/2010 00:00,140.131,-14.741,950,1010,50000,1.5,1.17,0.7,160,1,-14.741,0,0 Further information on the configuration of tropical cyclone boundaries is provided in Section 5.15.10. 5.15.4.8 Spectral Wave Spectral wave boundary locations are specified using either: One-or-more grid definition blocks (using the same grid definitions described in Section 5.15.4.5) for uncoupled wave boundaries Using a configured two-way coupled spectral wave model Further information on the configuration of wave model boundaries is provided in Section 5.15.11. 5.15.5 Boundary Condition Block A TUFLOW FV boundary condition block is a set of commands used to define a single boundary condition. The general form of the boundary condition block is: BC = boundary_type, location_ID, data_filepath Various BC_block_commands End BC Where: BC == indicates the instantiation of a boundary condition block boundary_type is a character flag setting the boundary condition type (e.g. Q, WL, QC_GRID as described in Section 5.15.3) location_ID is a reference to the boundary location. For example the name of a polyline, point, polygon, grid, or via directly specified coordinates within the data set by the data_filepath (as defined using one of the methods in Section 5.15.4) data_filepath is the file containing the boundary data, which is typically a time series file in CSV or NetCDF format BC_block_commands are any commands that reside within a boundary block. BC block commands provide configuration settings for the boundary End BC closes the boundary condition block This general form applies for the majority of boundary types. Where a departure from the general form occurs for a given boundary type, it is described for the specific boundary type in Sections 5.15.7 to 5.15.13. A unique boundary condition block is required for each boundary condition. It is common for models to include multiple boundary condition blocks in a given simulation. The sub-sections that follow describe boundary condition block commands that are used to select and modify how boundary data is read into TUFLOW FV. Table 5.26: Boundary Condition Commands Command Description Global Temporal Extrapolation Check Optional - The global error behaviour if boundary time series data does not cover the model simulation period and data extrapolation is required. Applied outside of all BC blocks. BC Default Update dt Optional - A global command to set the update timestep for all boundary conditions. If not specified, the boundary condition is updated at every simulation timestep. Applied outside of all BC blocks. BC Required - Command to instantiate a boundary condition block. Sets the boundary type, and typically a reference to the boundary location, and the data input, however this varies with boundary type. BC Header Required - BC block command that allows the user to specify the .CSV input file column headers or NetCDF file variable names BC Update dt Optional - BC block command that allows the user to specify the update timestep for a boundary condition. If not specified, the global BD Default Update dt is used. BC Scale Optional - BC block command to apply a scale factor to boundary condition values. BC Offset Optional - BC block command to apply an offset to boundary condition values. BC Default Optional - BC block command to specify a default boundary condition value if an entry in the input file is empty. Includes MSLP Optional - BC block command that allows the user to specify whether a water level boundary condition (WL or WLS) includes an inverse barometer offset. BC Time Units Optional - BC block command used to specify the unit of time for a boundary condition specified using a NetCDF file. BC Reference Time Optional - BC block command to set the boundary condition reference time. Sub-Type Optional - BC block command for selected boundary condition types. Allows the user to select from pre-defined numerical boundary methods. Temporal Extrapolation Check Optional - BC block command that sets the error behaviour if boundary time series data does not cover the model simulation period and data extrapolation is required. Overrides the global behaviour set via Global Temporal Extrapolation Check. End BC Required - Each boundary condition type is defined using a boundary condition (BC) block. The ‘BC’ and ‘End BC’ commands indicate the beginning and end of a boundary condition block. 5.15.5.1 Boundary Data Headers Data headers define the data to read from the input data file and apply to the boundary location. If the data_filepath is a CSV format, than the data headers specify the specific columns in the CSV file to read from. If the data_filepath is a NetCDF file, than the data headers refer to NetCDF data variables. Data headers are defined by the user using the BC Header command. The required headers depend on the specified boundary_type and are listed for each example in Sections 5.15.7 to 5.15.13. For example, the ‘WL’ boundary_type requires two data inputs for ! TIME and WL as shown below. ! Data Selection Using BC Header BC == WL, Ocean, Tide_20230101_20240101.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == Time_UTC, Tide_mMSL ! {TIME}, {WL} (mRL or ftRL) (Required data headers for the WL boundary type) End BC If the BC Header command is not included within a BC block, TUFLOW FV will attempt to use pre-defined default data header names. For the 2DHD simulation class, these defaults are listed in Appendix @ref(#App2DHD-BC-Scie-BCB-4) and are also included as comments in the examples presented in Sections 5.15.7 to 5.15.13. If the expected headers are not found—either through the BC Header specification or from the default list—TUFLOW FV will issue a warning and apply a default boundary condition value (Section 5.15.5.2) to the affected boundary. 5.15.5.2 Boundary Default Values Boundary default values are values applied to a boundary if missing data is encountered, and are set using the BC Default command. If the BC Default command is not specified and missing data is present, TUFLOW FV will assign the missing values not-a-number (NaN). A NaN value applies a zero-gradient boundary condition (zero-gradient science is described Appendix E.15.1.10 for the period of missing data. In the example below, a default flow of 35.0 m\\(^3\\)/s is applied as the data header ‘Dummy’ is not within the data file Inflows_001.csv ! Example of BC Default Use When 'Dummy' Header Not Found BC == QC, Outfall, ..\\bc\\Inflows_001.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == Time, Dummy ! {TIME}, {Q} (m&sup3;/s or ft&sup3;/s) &nbsp;&nbsp;BC Default == 35.0 ! {NaN} (m&sup3;/s or ft&sup3;/s) Q value to apply if missing data encountered End BC 5.15.5.3 Boundary Modifiers Boundary condition modifiers allow the modeller to adjust or control how input data is applied at runtime. These modifiers include scaling and offsetting. The BC Scale and BC Offset commands allow modification of raw boundary condition data as it is read into the model. Scaling is applied first, multiplying each applicable column of data (excluding the time column which is not required) by the specified factor. Offsetting is then applied by adding a constant value to each scaled value. The following example increases all flow values by 10%: ! Use BC Scale To Modify Flow BC == Q, 2, ..\\bc\\UpstreamFlow_001.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == Time, US_Q ! {TIME}, {Q} (m&sup3;/s or ft&sup3;/s) &nbsp;&nbsp;BC Scale == 1.1 ! {1.0} Scale flow by +10% End BC Similarly, the example below applies a vertical offset to water level values, such as to represent sea level rise: ! Use BC Offset To Modify Water Level BC == WL, 1, ..\\bc\\OffshoreTide_001.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == Time, WL ! {TIME}, {WL} (mRL or ftRL) &nbsp;&nbsp;BC Offset == 0.92 ! {0.0} Add 0.92 m sea-level offset End BC 5.15.6 Boundary Condition Specification - Worked Example The following worked example demonstrates the general process and syntax to define a boundary condition within an .fvc file. ! BOUNDARY CONDITIONS ! Location of boundaries Read GIS Nodestring == ..\\model\\gis\\2d_ns_OpenBoundaries_001_L.shp ! Open boundary nodestrings ! Boundary definition BC == Q, Upstream, ..\\bc_dbase\\Upstream_Q_001.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == time, sandy_creek ! {TIME}, {Q} (m&sup3;/s or ft&sup3;/s) End BC BC == WL, Downstream, ..\\bc_dbase\\Downstream_WL_001.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == time, ocean_tide ! {TIME}, {WL} (mRL or ftRL) End BC Boundary Location This example uses a polyline (nodestring) boundary. For polyline boundaries, the spatial location is defined globally (outside of the BC blocks) using the command Read GIS Nodestring. The shapefile 2d_ns_OpenBoundaries_001_L.shp contains one or more digitised polyline features, each assigned a unique identifier. In this example there are two polylines with the ID “Upstream” and “Downstream” respectively, as shown in Figure 5.14. These identifiers correspond to the boundary names referenced within the individual boundary condition blocks. The command is placed globally so that multiple BC blocks can reference objects from the same GIS file. Figure 5.14: Example Nodestring Location Definition Boundary Condition Blocks In the example two boundary condition blocks are specified, initiated by the BC command and ended with the End BC command. All BC block commands placed between BC == and End BC relate exclusively to that specific boundary and do not affect other boundary blocks defined within the .fvc file. The first boundary condition block is: BC == Q, Upstream, ..\\bc_dbase\\Upstream_Q_001.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == time, sandy_creek ! {TIME}, {Q} (m&sup3;/s or ft&sup3;/s) End BC This block defines a flow (Q) boundary_type applied at location_ID “Upstream”, which provides the link between the boundary block and the GIS layer 2d_ns_OpenBoundaries_001_L.shp. The boundary data is read from a CSV file located at the data_filepath ..\\bc_dbase\\Upstream_Q_001.csv. The BC Header BC_block_command sets the specific columns to read time series data from ..\\bc_dbase\\Upstream_Q_001.csv. In this case, the column labelled “time” contains the simulation timestamps, and the column labelled “sandy_creek” contains the flow values (in cubic metres per second, m³/s). The subset of the content from ..\\bc_dbase\\Upstream_Q_001.csv is provided below. It contains the referenced data headers and flow timeseries. The data in the ‘one_mile_creek’ column is unused by this BC block and is ignored. Upstream_Q_001.csv time, sandy_creek, one_mile_creek 0.0, 0.0, 0.0 0.5, 10.0, 4.0 1.0, 35.0, 12.0 2.0, 0.0, 0.0 Similarly, the second boundary condition block is: BC == WL, Downstream, ..\\bc_dbase\\Downstream_WL_001.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == time, ocean_tide ! {TIME}, {WL} (mRL or ftRL) End BC Here, a water level (WL) boundary_type is applied at the location_ID “Downstream”, using data from the CSV file ..\\bc_dbase\\Downstream_WL_001.csv. The BC Header command specifies the columns from which the time and water level (in metres relative level, mRL) data are read (“time” and “ocean_tide”, respectively). The subset of the content from ..\\bc_dbase\\Upstream_Q_001.csv is shown below which contains the referenced headers and required water level timeseries. Downstream_WL_001.csv time, ocean_tide 0.0, -0.5 0.25, -0.32 0.5, -0.02 0.75, 0.28 5.15.7 Water Level Water level boundary are applied to the model at polyline (nodestring) locations. The available water level boundary conditions types are described in Table 5.27. An example of each boundary type is provided. Table 5.27: Water Level Boundaries Boundary Type Description WL A spatially constant water level. This boundary is typically used to set downstream boundary conditions for small model domains, where the spatial variation in astronomical tide is negligible or for river/estuaries. WLS A spatially varying water level interpolated between two data points, WL_A, and WL_B located at the digitised start and end of the boundary polyline (nodestring) respectively. This boundary type is a simplified alternative to the WL_CURT. WL_CURT A spatially varying water level as a function of chainage along the boundary polyline (nodestring). This is the recommended boundary condition type for applying astronomical tidal boundary conditions to model domains where water level variation is expected on the ocean boundary. The CHAINAGE data column should be in ascending order consistent with the digitised direction of the GIS polyline (nodestring). i.e. the start of the polyline is chainage 0.0 m or ft. The ZTYPE argument is not used for the 2D HD simulation class and is ignored. It is recommended to generate WL_CURT boundary conditions using the TUFLOW FV Get Tide tool. Water Level (WL) ! Polyline (Nodestring) Boundary Location Definition Read GIS Nodestring == ..\\model\\gis\\2d_ns_Ocean_001_L.shp ! Water Level BC == WL, Ocean, Tide_20230101_20240101.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == Time_UTC, Tide_mMSL ! {TIME}, {WL} (mRL or ftRL) End BC Sloping Water Level (WLS) ! Polyline (Nodestring) Boundary Location Definition Read GIS Nodestring == ..\\model\\gis\\2d_ns_Ocean_001_L.shp ! Simple Sloping Water Level BC == WLS, Ocean, Tide_20230101_20240101.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == Time_UTC, Tide_A_mMSL, Tide_B_mMSL ! {TIME}, {WL_A} (m or ft), {WL_B} (m or ft) &nbsp;&nbsp;Includes MSLP == 0 ! {1} Set to 0 to adjust for mean sea level inverse barometer effect End BC Water Level Curtain (WL_CURT) ! Polyline (Nodestring) Boundary Location Definition Read GIS Nodestring == ..\\model\\gis\\2d_ns_Ocean_001_L.shp ! Spatially Varying Water Level BC == WL_CURT, Eastern_Boundary, GoC_Tide_20100301_20100501_AEST.nc ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == local_time, nsEastern_Boundary_chainage, dummy, nsEastern_Boundary_wl! {TIME}, {CHAINAGE} (m or ft), {ZTYPE} (not used for 2D HD simulation class), {WL} (m of ft) &nbsp;&nbsp;BC Update dt == 60. ! {0} (s) Update the boundary data every 60 seconds &nbsp;&nbsp;BC Time Units == days ! {ISODATE | HOURS} | DAYS | MINUTES | SECONDS - Days since the BC Reference Time (01/01/1990 00:00:00 or 0.0) &nbsp;&nbsp;Includes MSLP == 0 ! {1} Set to 0 to adjust for mean sea level inverse barometer effect End BC 5.15.8 Inflow/Outflow The available inflow/outflow boundary conditions types are described in Table 5.28. An example of each boundary type is provided. Inflows into the model are achieved by having positive values in the input data timeseries for ‘Q’. Outflows (flow extractions) by specifying negative ‘Q’ values. Table 5.28: Inflow/Outflow Boundaries Boundary Type Description Q The Q boundary type is applied at polyline (nodestring) locations snapped to the edge of the model mesh, and not internally. Q boundaries are typically used to apply model inflow boundary conditions from rivers or major tributaries. There are four boundary sub-types applicable to the Q polyline (nodestring) boundary type that modify how the boundary is numerically applied to the model as follows. Sub-Type 1: Applied as cell face flux and distributed across the nodestring by cell width Sub-Type 2: Applied as cell centre source term and distributed across the nodestring by cell width Sub-Type 3: Applied as cell face flux and distributed across the nodestring by cell width and depth Sub-Type 4: Applied as cell centre source term and distributed across the nodestring by cell width and depth The numerical treatment for each Q boundary Sub-Type is described in Appendix E.15.1.5. QC The QC boundary type is applied at point locations and is typically used to apply sub-catchment inflows, point source discharges and localised flow extractions. Inflows/outflows are applied to the single model cell that the point resides within. QC_POLY The QC_POLY boundary type is used for similar applications to the QC boundary, however it allows inflows/outflows to be distributed over a larger area via user-specified polygons. Inflows/outflows are distibuted as a function of cell area across all cells selected by a polygon. QC_GRID The QC_GRID boundary allows inflows/outflows to be spatially and temporally varied across a 2D grid. Spatial varation is set using a spatial weighting variable WEIGHT. Further information on the required QC_GRID boundary format is provided in Appendix E.15.1.2.1. QCM The QCM boundary is a QC boundary that can move along a path during a simulation. They are typically used to represent inflows/outflows from ships or dredgers, but can be used to represent any moving point source/sink. QG QG is a global inflow/outflow boundary that is commonly used to represent rainfall, evaporation, or infiltration losses for small model domains where spatial variabilty is deemed negligible. Polyline (Nodestring) Inflow/Outflow (Q) ! Polyline (Nodestring) Boundary Location Definition Read GIS Nodestring == ..\\model\\gis\\2d_ns_MyInflows_001_L.shp ! Inflow Boundary - River BC == Q, Mary, ..\\bc_dbase\\M01_002.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == time_hr, MaryRiver ! {TIME}, {Q} (m&sup3;/s or ft&sup3;/s) &nbsp;&nbsp;Sub-Type == 4 ! {1} | 2 | 3 | 4 - Distribute nodestring flow as a function of cell water depth (h1.5) End BC Point Inflow/Outflow (QC) ! Point Boundary Location Definition Read GIS SA == ..\\model\\gis\\2d_sa_MyInflows_001_P.shp ! Catchment C2 Inflow BC == QC, C2, ..\\bc_dbase\\M01_002.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == time_hr, C2 ! {TIME}, {Q} (m&sup3;/s or ft&sup3;/s) End BC Polygon Inflow/Outflow (QC_POLY) ! Point Boundary Location Definition Read GIS SA == ..\\model\\gis\\2d_sa_MyInflows_001_R.shp ! Tributary Inflow Distributed Over Multiple Cells BC == QC_POLY, Trib, ..\\bc_dbase\\M01_002.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == time_hr, Tributary ! {TIME}, {Q} (m&sup3;/s or ft&sup3;/s) End BC Grid Inflow/Outflow (QC_GRID) ! Grid Location Definition Grid Definition File == example_diffuser.nc ! The NetCDF file containing coordinates used to define the grid to which gridded boundary conditions are applied &nbsp;&nbsp;Grid Definition Variables == longitude, latitude ! {No defaults} X coordinate variable, Y coordinate variable to be read from the NetCDF to create the grid map &nbsp;&nbsp;Grid Definition Label == diffuser_grid ! {No defaults} Grid name &nbsp;&nbsp;Gridmap Compression == 1 ! {0} Use the grid extent to mask the mesh update extent End Grid ! Model Inflow From Outfall/Diffuser BC == QC_GRID, diffuser_grid, example_diffuser.nc ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == time, weight, flow ! {TIME}, {WEIGHT}, {Q} (m&sup3;/s or ft&sup3;/s)- NetCDF variable names &nbsp;&nbsp;BC Time Units == hours ! The unit of time for the boundary condition ! {ISODATE | HOURS} | DAYS | MINUTES | SECONDS - Hours since the BC Reference Time (01/01/1990 00:00:00 or 0.0) &nbsp;&nbsp;BC Update dt == 300.0 ! {0} Update the boundary data every 300 seconds End BC Moving Point Inflow/Outflow (QCM) The QCM boundary directly specifies the moving point location in the input timeseries. Therefore the general form of the BC block (boundary_type, location_ID, data_filepath) is modified for QCM boundary type to boundary_type, data_filepath. ! Moving Point Inflow - Ship Ballast BC == QCM, ..\\bc_dbase\\Ship_Ballast_001.csv ! boundary_type, data_filepath BC Header == Time, X, Y, Flow ! {TIME}, {X}, {Y}, {Q} (m&sup3;/s or ft&sup3;/s) End BC Global Inflow/Outflow (QG) The QG boundary is specified globally and does not require location information. Therefore the general form of the BC block (boundary_type, location_ID, data_filepath) is modified for QG boundary type to boundary_type, data_filepath. ! Global Inflow BC == QG, ..\\bc_dbase\\M01_003_QG.csv ! boundary_type, data_filepath &nbsp;&nbsp;BC Header == Time_hr, QG ! {TIME}, {Q/A} (m/s or ft/s) End BC 5.15.9 Stage-Discharge The available stage-discharge boundary conditions types are described in Table 5.28. An example of each boundary type is provided. Table 5.29: Stage-Discharge Boundaries Boundary Type Description HQ The HQ boundary type is applied at polyline (nodestring) locations snapped to the edge of the model mesh, and not internally. HQ boundaries are typically used to apply downstream tailwater boundaries at locations where a known, or generated relationship between water level and flow is available. For example, a flow gauging station. QN The QN (normal flow condition) boundary type is applied at polyline (nodestring) locations snapped to the edge of the model mesh, and not internally. QN boundaries are typically used to apply downstream tailwater boundaries. TUFLOW FV automatically calculates the boundary water level vs. flow curve via a user-specified friction slope (Appendix 5.15.9). Stage-Discharge Relationship (HQ) The HQ relationship from file HQ.csv is presented in Figure 5.15 with an example of the file contents. ! Polyline (Nodestring) Boundary Location Definition Read GIS Nodestring == ..\\model\\gis\\2d_ns_MyInflows_001_L.shp ! Stage-Discharge Relationship BC == HQ, Downstream, ..\\bc_dbase\\HQ.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == H, Q ! {H} (mRL of ftRL), {Q} (m&sup3;/s or ft&sup3;/s) End BC Figure 5.15: Example HQ Relationship ..\\bc_dbase\\HQ.csv H,Q 24.5, 0.0 25.5, 4.0 26.5, 8.0 27.5, 15.0 28.5, 25.0 29.5, 45.0 30.5, 90.0 31.5, 160.0 32.5, 250.0 Automatic Stage-Discharge Relationship (QN) The QN boundary type does not require a timeseries input. Therefore the general form of the BC block (boundary_type, location_ID, data_filepath) is modified for QN boundary types to boundary_type, location_ID, friction_slope. ! Polyline (Nodestring) Boundary Location Definition Read GIS Nodestring == ..\\model\\gis\\2d_ns_MyInflows_001_L.shp ! Automatatic Stage-Discharge Relationship BC == QN, Downstream, 0.01 ! boundary_type, location_ID, {0.0} friction_slope (rise/run) End BC 5.15.10 Atmospheric The available 2D HD simulation class atmospheric boundary conditions types are described in Table 5.30. An example of each boundary type is provided. Imperial/US Customary Units (Section 5.3) are not supported for atmospheric boundary conditions. MJS COMMENT: Have a reference to direct rainfall modelling section? Need to discuss the importance of wetting and drying and display depth commands if doing direct rainfall. Wiki page? PRECIP, PRECIP_GRID QC_POLY, QG, QC_GRID (using a negative flow rate) Table 5.30: Atmospheric Boundaries Boundary Type Description W10 Globally set, and spatially constant wind speed boundary condtion. Specified as X and Y wind speed vector components. Typically used to assign wind forcing for small model domains where spatially variability is negligible. PRECIP Globally set, and spatially constant precipitation boundary condtion. Typically used to assign direct rainfall for small model domains where spatially variability is negligible. W10_GRID Spatially varying gridded wind speed boundary condtion. Specified as X and Y wind speed vector components. Typically sourced from meterological or climate model outputs. Can be generated using TUFLOW FV’s Get Atmos tools. MSLP_GRID Spatially varying gridded mean sea level pressure boundary condtion. Typically sourced from meterological or climate model outputs. Can be generated using TUFLOW FV’s Get Atmos tools. PRECIP_GRID Spatially varying gridded precipitation boundary condtion. Typically sourced from meterological or climate model outputs and used to apply direct rainfall. Can be generated using TUFLOW FV’s Get Atmos tools. CYC_HOLLAND The Holland tropical cyclone parametric wind and pressure boundary condition generates a spatially varying wind speed, and mean sea level pressure field (Appendix E.15.1.7) that is calculated at each model cell. If running TUFLOW FV in cartesian coordinates (Section 5.3) Spherical == 0, a representative Latitude for the model domain is required to correctly configure the CYC_HOLLAND boundary type. Spatially Constant Wind Speed (W10) The W10 boundary is specified globally and does not require location information. Therefore the general form of the BC block (boundary_type, location_ID, data_filepath) is modified for W10 boundary type to boundary_type, data_filepath. ! Spatially Constant Wind Speed BC == W10, MET_20110401_20110701_AEST.csv ! boundary_type, data_filepath &nbsp;&nbsp;BC Header == local_time, uwnd10m, vwnd10m ! {TIME}, {W10_X} (m/s), {W10_Y} (m/s) &nbsp;&nbsp;BC Update Dt == 3600. ! (s) Update the boundary condition every hour of simulation time End BC Spatially Constant Precipitation (PRECIP) The PRECIP boundary is specified globally and does not require location information. Therefore the general form of the BC block (boundary_type, location_ID, data_filepath) is modified for PRECIP boundary type to boundary_type, data_filepath. ! Spatially Constant Precipitation (Direct Rainfall) BC == PRECIP, MET_20110401_20110701_AEST.csv ! boundary_type, data_filepath &nbsp;&nbsp;BC Header == local_time, rainfall ! {TIME}, {PRECIP} (m/day) &nbsp;&nbsp;BC Update Dt == 900. ! (s) Update the boundary condition every 15 minutes of simulation time End BC Wind, Mean Sea Level Pressure, and Precipitation Grid (W10_GRID, MSLP_GRID, and PRECIP_GRID) The below boundary conditions have been generated using the TUFLOW FV Get Atmos tool. ! TUFLOW FV FVC File for Atmospheric Dataset ! Written by `get_atmos` ! Netcdf start time: 2010-03-01 00:00 ! Netcdf end time: 2010-05-31 23:00 ! Netcdf x-limits: 135.0000, 143.0000 ! Netcdf y-limits: -19.0000, -7.0000 ! Grid Location Grid Definition File == GoC_ERA5_20100301_20100531_AEST.nc ! The NetCDF file containing coordinates used to define the grid to which gridded boundary conditions are applied &nbsp;&nbsp;Grid Definition Variables == longitude, latitude ! {No defaults} X coordinate variable, Y coordinate variable to be read from the NetCDF to create the grid &nbsp;&nbsp;Grid Definition Label == atmos ! {No defaults} Grid name End Grid ! Wind Speed BC == W10_GRID, atmos, GoC_ERA5_20100301_20100531_AEST.nc ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == local_time, uwnd10m, vwnd10m ! {TIME}, {W10_X} (m/s), {W10_Y} (m/s) &nbsp;&nbsp;BC Update dt == 3600. ! {0.0} Boundary update timestep (s) &nbsp;&nbsp;BC Time Units == hours! The unit of time for the boundary condition ! {ISODATE | HOURS} | DAYS | MINUTES | SECONDS - Hours since the BC Reference Time (01/01/1990 00:00:00 or 0.0) End BC ! Mean Sea Level Pressure BC == MSLP_GRID, atmos, GoC_ERA5_20100301_20100531_AEST.nc &nbsp;&nbsp;BC Header == local_time, mslp {TIME}, {MSLP} (hPa) &nbsp;&nbsp;BC Update dt == 3600. ! {0.0} Boundary update timestep (s) &nbsp;&nbsp;BC Time Units == hours! The unit of time for the boundary condition ! {ISODATE | HOURS} | DAYS | MINUTES | SECONDS - Hours since the BC Reference Time (01/01/1990 00:00:00 or 0.0) &nbsp;&nbsp;BC Scale == 0.01 ! {1.0} Scale from Pascals to Hectopascals End BC ! Precipitation BC == PRECIP_GRID, atmos, GoC_ERA5_20100301_20100531_AEST.nc &nbsp;&nbsp;BC Header == local_time, precip_rate {TIME}, {PRECIP} (m/day) &nbsp;&nbsp;BC Update dt == 3600. ! {0.0} Boundary update timestep (s) &nbsp;&nbsp;BC Time Units == hours! The unit of time for the boundary condition ! {ISODATE | HOURS} | DAYS | MINUTES | SECONDS - Hours since the BC Reference Time (01/01/1990 00:00:00 or 0.0) &nbsp;&nbsp;BC Scale == 86.4 ! {1.0} Scale from ERA5 \"Mean total preciptation rate' variable kg/m2/s to m/day End BC Holland Parametric Tropical Cyclone Model (CYC_HOLLAND) The tropical cyclone track is user-specified in the input timeseries file. Therefore the general form of the BC block (boundary_type, location_ID, data_filepath) is modified for CYC_HOLLAND boundary type to boundary_type, data_filepath. A description of the CYC_HOLLAND science is provided in Appendix E.15.1.7. BC == CYC_HOLLAND, ..\\bc_dbase\\Example_Holland_Cyclone.csv ! boundary_type, data_filepath &nbsp;&nbsp;BC Header == TIME, X, Y, P0, PA, RMAX, B, KM, THETAMAX, DELTAFM, WBGX, WBGY End BC ! Where: &nbsp;&nbsp;! - {TIME}: Time (HOURS or ISODATE) &nbsp;&nbsp;! - {X}: Cyclone position X coordinate (Decimal degrees or meters) &nbsp;&nbsp;- {Y}: Cyclone position Y coordiante (Decimal degrees or meters) &nbsp;&nbsp;- {P0}: Cyclone central pressure (hPa) &nbsp;&nbsp;! - {PA}: Ambient mean sea level pressure (hPa) &nbsp;&nbsp;! - {RMAX}: Radius of maximum winds (m) &nbsp;&nbsp;! - {B}: Holland peakedness coefficient &nbsp;&nbsp;! - {KM}: Gradient wind reduction factor &nbsp;&nbsp;! - {THETAMAX}: Line of maximum winds (Degrees) &nbsp;&nbsp;! - {DELTAFM}: Asymmetry factor &nbsp;&nbsp;! - {WBGX}: Background wind X-component (m/s) &nbsp;&nbsp;! - {WBGY}: Background wind Y-component (m/s) 5.15.11 Spectral Wave The available 2D HD simulation class spectral wave boundary conditions types are described in Table 5.31. An example of each boundary type is provided. Further information on spectral wave boundary condition science, including the specification of boundary variables is provided in Appendix E.15.1.8. Imperial/US Customary Units (Section 5.3) are not supported for wave boundary conditions. MJS TODO: How best to incorporate the wave chapter from the existing TUFLOW FV User Manual. Should it be its own construction section, and then refer into the SW BC section for setup? Or, list the commands here (wave parameters, stokes drift, surfzone undertow, stokes transport) plus SWAN GIS Tools info here or in the appendix ? Table 5.31: Spectral Wave Boundaries Boundary Type Description WAVE Wave fields are specified as gridded spatially and temporally varying boundary conditions. These are outputs generated from an external spectral wave model. This type of wave boundary condition is commonly known as uncoupled wave forcing. WAVE_COUPLED An external wave model (for example SWAN) is run together with TUFLOW FV. Hydrodynamic information such as water levels, currents and bed elevation are passed from TUFLOW FV to the wave model, and these influence wave calculations. There is then a feedback whereby waves calculated in the wave model can influence water level and currents. This type of wave boundary condition is commonly known as coupled wave forcing. WAVE ! Wave Parameters Wave Parameters == 0.35, 0.1 ! {0.35} Wave Gamma, {Cell wet depth} (m) ! Grid Location Grid Definition File == ..\\..\\SWAN\\Wave_Results.nc ! The NetCDF file containing coordinates used to define the grid to which gridded boundary conditions are applied Grid Definition Variables == xp, yp ! {No defaults} X coordinate variable, Y coordinate variable to be read from the NetCDF to create the grid Grid Definition Label == A ! {No defaults} Grid name End Grid ! Gridded Wave Boundary Conditions BC == WAVE, A, ..\\..\\SWAN\\Wave_Results.nc ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == time, hsig, tpsmoo, dir, ubot, tmbot, wforce_x, wforce_y, depth ! TIME, HSIG, TPS, DIR, UBOT, TMBOT, FORCE_X, FORCE_Y, DEPTH &nbsp;&nbsp;BC Update dt == 3600. ! {0.0} Boundary update timestep (s) &nbsp;&nbsp;BC Time Units == hours! The unit of time for the boundary condition ! {ISODATE | HOURS} | DAYS | MINUTES | SECONDS - Hours since the BC Reference Time (01/01/1990 00:00:00 or 0.0) End BC ! Where: &nbsp;&nbsp;! - TIME: Time (HOURS or ISODATE) - Required &nbsp;&nbsp;! - HSIG: Significant wave height (m) - Required &nbsp;&nbsp;! - TPS: Smoothed peak wave period (s) - Required &nbsp;&nbsp;! - DIR: Mean wave direction (degrees) - Required &nbsp;&nbsp;! - UBOT: The rms-value of the maxima of the orbital velocity near the bottom (m/s) - Optional &nbsp;&nbsp;! - TMBOT: The bottom wave period (s) - Optional &nbsp;&nbsp;! - FORCE_X: Wave induced force x-component (N/m2) - Optional &nbsp;&nbsp;! - FORCE_Y: Wave induced force y-component (N/m2) - Optional &nbsp;&nbsp;! - DEPTH: Wave model water depth (m) - Optional WAVE_COUPLED The spectral wave model control file, which contains the boundary condition location and time series data is user-specified as the swc_filepath. Therefore the general form of the BC block (boundary_type, location_ID, data_filepath) is modified for WAVE_COUPLED boundary type to boundary_type, swc_filepath. ! Wave Parameters Wave Parameters == 0.35, 0.1 ! Wave gamma, depth limits ! Coupled Hydrodynamic And Spectral Wave Model BC == WAVE_COUPLED, ..\\..\\SWAN\\input\\MB_002.swn ! boundary_type, swc_filepath End BC 5.15.12 Force The available 2D HD simulation class force boundary conditions types are described in Table 5.32. An example of each boundary type is provided. Imperial/US Customary Units (Section 5.3) are not supported for force boundary conditions. Table 5.32: Force Boundaries Boundary Type Description FORCE The FORCE boundary type is applied at point locations and is typically used to apply point source disturbances. Force x and y components are applied to the single model cell that the point resides within. FORCE_POLY The FORCE_POLY boundary type is used for similar applications to the FORCE boundary, however it allows forces to be distributed over a larger area via user-specified polygons. Forces are distributed as a function of cell area across cells selected by a polygon. FORCEM The FORCEM boundary is a FORCE boundary that can move along a path during a simulation. They are typically used to represent disturbances from ships or dredgers, but can be used to represent any moving disturbance. Point Force (FORCE) ! Point Boundary Location Definition Read GIS SA == ..\\model\\gis\\2d_sa_Pipe_Outlet_001_P.shp ! Force boundary - Add momentum flux to pipe outlet BC == FORCE, Pipe_Outlet_001, ..\\bc_dbase\\Outlets_001.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == Time, Force_X, Force_Y ! {TIME}, {FORCEX} (N), {FORCEY} (N) End BC Polygon Force (FORCE_POLY) ! Polygon Boundary Location Definition Read GIS SA == ..\\model\\gis\\2d_sa_Pipe_Outlet_001_R.shp ! Force boundary - Add momentum flux to pipe outlet BC == FORCE, DS_Outlet_001, ..\\bc_dbase\\Outlets_001.csv ! boundary_type, location_ID, data_filepath &nbsp;&nbsp;BC Header == Time, Force_X, Force_Y ! {TIME}, {FORCEX} (N), {FORCEY} (N) End BC Moving Point Force (FORCEM) The FORCEM boundary directly specifies the moving point location in the input timeseries. Therefore the general form of the BC block (boundary_type, location_ID, data_filepath) is modified for FORCEM boundary type to boundary_type, data_filepath. ! Moving Point Force - Propeller Wash BC == FORCEM, ..\\bc_dbase\\Ship_Wash_001.csv ! boundary_type, data_filepath BC Header == Time, X, Y, ForceX, ForceY ! {TIME}, {X}, {Y}, {FORCEX} (N), {FORCEY} (N) End BC 5.15.13 Zero Gradient And Reflective Zero gradient and reflective boundaries are applied to the model at polyline (nodestring) locations. The available zero gradient and reflective boundary conditions types are described in Table 5.33 and the science of each if further detailed in Appendix E.15.1.10. Each boundary type requires no input timeseries data, therefore the general form of the BC block (boundary_type, location_ID, data_filepath) is modified to boundary_type, location_ID. An example of each boundary type is provided. Table 5.33: Zero Gradient and Reflective Boundaries Boundary Type Description ZG The Zero Gradient (ZG) boundary type assumes the gradient of the flow variables (e.g., water level, velocity) across the boundary is zero, effectively allowing the values at the boundary to match those of the adjacent cell. This boundary condition is non-reflective and is commonly used at open boundaries where minimal wave reflection is desired. RS The Reflective, free-Slip (RS) boundary type reflects flow normal to the boundary, but allows tangential flow along the boundary. It is commonly used to model impermeable but frictionless walls. RNS The Reflective No-Slip (RNS) boundary enforces both zero normal and zero tangential velocities at the boundary face. It is commonly used to represent walls or embankments where wall friction requires representation. Zero Gradient (ZG) ! Polyline (Nodestring) Boundary Location Definition Read GIS Nodestring == ..\\model\\gis\\2d_ns_Outlet_001_L.shp ! Zero Gradient BC == ZG, OuterBay ! boundary_type, location_ID End BC Reflective Slip (RS) ! Polyline (Nodestring) Boundary Location Definition Read GIS Nodestring == ..\\model\\gis\\2d_ns_LabTest_001_L.shp ! Zero Gradient BC == RS, FlumeEast ! boundary_type, location_ID End BC Reflective Non-Slip (RNS) ! Polyline (Nodestring) Boundary Location Definition Read GIS Nodestring == ..\\model\\gis\\2d_ns_wall_001_L.shp ! Zero Gradient BC == RNS, Wall ! boundary_type, location_ID End BC 5.15.14 Transport MJS TODO - Add transport 5.16 Hydraulic Structures 5.16.1 Command Status Optional 5.16.2 Description TUFLOW FV supports a range of hydraulic structure types, including weirs, culverts, bridges, and pumps. Custom behaviour can also be modelled using user-defined water level–flow or time series relationships. Each structure type may be configured with operational controls to simulate gates, valves, or other flow regulation devices. Variable bathymetry, where bed elevations change during a simulation is also configured using the same operational structure framework. This section outlines the process for incorporating a hydraulic structure or variable bathymetry feature into a simulation. Each supported type is presented with configuration examples, and where applicable, references are provided to relevant appendix sections for further detail on implementation and underlying behaviour. To incorporate a hydraulic structure or variable bathymetry into a simulation, the following general process is used: Select the feature type appropriate for the modelling objective. This may be a hydraulic structure (e.g. weir, culvert, bridge, pump) or a variable bathymetry type (Section 5.16.3) Select a supported connection type between the feature and the 2D domain (nodestring, linked nodestrings, linked zones, or zone) and define the feature location using the selected connection type (Section 5.16.4) Configure the feature with a structure block in the control file, specifying all required parameters for the chosen type (Section 5.16.5) Add operational control if required by defining one or more control blocks. For hydraulic structures, controls may represent gates, valves, or pumps. For variable bathymetry, controls define when and how bed elevations are adjusted during the simulation. (Section 5.16.15) 5.16.3 Structure Types The available structure types are summarised in Table 5.34. Table 5.34: Structure Types Feature Description Weirs Represent hydraulic control structures that pass or restrict flow based on water level (Section 5.16.6). Culverts Model enclosed conduits conveying flow beneath embankments or structures (Section 5.16.7). Bridges Simulate constrictions caused by bridge piers or decks (Section 5.16.8). Porous Structures Define flow restrictions based on a user-specified permeability and Dary’s Law (Section 5.16.9). User-Defined Matrix Custom structure defined by a matrix relating upstream and downstream water levels to flow rate (Section 5.16.10). User-Defined Timeseries Structure behavior is driven by prescribed flow time series (Section 5.16.11). Pumps Represent forced conveyance of water from one location to another (Section 5.16.12). Walls (no flow) Impose a no-flow boundary condition to fully block flow across a specified location (Section 5.16.13). Variable Bathymetry Model localised adjustments to bed elevation based on a prescribed time series, model-sampled parameters (e.g. flow or level), or a combination (Section 5.16.14). of digital elevation model (DEM) surfaces and control rules. 5.16.4 Structure Connection Types The structure connection type defines how a structure or variable bathymetry adjustment is spatially linked to the 2D domain. For hydraulic structures, the connection type specifies how flow is exchanged between locations in the mesh (e.g., along a nodestring or between zones). For bathymetry-adjusting structures, the connection type acts as a spatial selector, identifying the cells where bed level changes will be applied during the simulation. The available connection types are described in Table 5.35. Not all connection types are applicable to every structure type and compatibility between structure types and connection types is summarised in Table 5.36. Further information on structure connection science, and guidance on selecting the appropriate connection type for a given structure is provided in Appendix E.16.1.1. The approach for spatially defining each connection type is outlined in the following sub-sections. Table 5.35: Structure Connection Types Connection Type Description Nodestring Defined using a single polyline (nodestring). This configuration is typically used for structures that span a channel or flow path, such as weirs and bridges. Linked Nodestrings Defined using two separate polylines. This configuration connects two discrete locations in the model and is commonly used for culverts or structures with both inlet and outlet points. It also allows for overtopping flow across the embankment between the nodestrings. Linked Zones Defined using two separate polygons. This configuration connects two areas within the model domain and is generally used for pump structures or other systems transferring water between distinct zones where momentum is low. Zone Defined using a single polygon. This configuration modifies the hydraulic properties within a defined area based on time or other model conditions. It is typically used for implementing time-varying bathymetry. Table 5.36: Supported 2D Connection Types Feature Nodestring Linked Nodestrings Linked Zones Zone Weir Y Y* Y* N Culvert Y* Y Y* N Bridge Y Y N N Pump Y Y Y N Porous Y Y Y N User-Defined Matrix Y Y Y* N User-Defined Timeseries Y Y Y* N Wall Y N N N Bathymetry N N N Y * Supported with limitations. MJS TODO: Beef this up here, need to either state it here or refer to specific sections the describe this. 5.16.4.1 Nodestring Nodestring structure connections are set using the Read GIS Nodestring command. During model initialisation (Section 5.2), template layers prefixed with ‘2d_ns_’ are created to support the digitisation of nodestring polylines. Geometry type is indicated by the ‘_L’ suffix for polyline features (e.g., 2d_ns_Bridge_001_L.shp). ‘2d_ns_’ layers contain two attributes as shown in Table 5.37. For hydraulic structure connections, the ID attribute should be populated and the Flag attribute left blank. When read by TUFLOW FV, each polyline object is converted into a nodestring by snapping the polyline to the nearest cell faces along its path. The resulting nodestring cell face selections can be reviewed in the simulation output _ns_check_L layer if the Write Check Files command is enabled. Table 5.37: Empty 2d_ns Nodestring GIS Layer For Hydraulic Structure Connections Attribute Name(s) Description Type ID Unique identifier/name of the polyline Character Flags Should be left blank for hydraulic structure connections. Character For hydraulic structure calculations the digitised direction of each polyline is important as it defines the upstream and downstream sides of the structure (see Appendix E.16.1.1). Polylines should be digitised from right to left when looking in the downstream direction. Figure 5.16 illustrates this convention, showing a single nodestring at a dam spillway where a weir structure is applied. In this example, flow moves from the dam to the floodplain in a north-westerly direction (from the bottom left to the top right of the image), and the digitised nodestring follows the recommended right-to-left orientation. Figure 5.16: Digitising a Nodestring (Single) 5.16.4.2 Linked Nodestrings The spatial definition of linked nodestrings follows the same approach as for single nodestrings (Section 5.16.4.1), with the key difference being that two separate nodestrings are digitised to form a connection pair. Figure 5.17 presents an example of this configuration, illustrating the digitisation of upstream and downstream nodestrings. In this example, linked nodestrings are used to represent a culvert beneath a road embankment. The bathymetry between the nodestrings is raised to define the embankment, allowing for the simulation of overtopping flow. Figure 5.17: Digitising Linked Nodestrings 5.16.4.3 Linked Zones The location of linked zones are set using 2d_zn layers and the Read GIS Zone command. During model initialisation (Section 5.2), template layers prefixed with ‘2d_zn_’ are created to support the digitisation of zone connections. Geometry type is indicated by the ‘_R’ suffix for region features (e.g., 2d_zn_Drain_001_R.shp). ‘2d_zn_’ layers require the assignment of a single ‘Name’ attribute as shown in Table 5.38. The cells selected by zone polygons can be reviewed in the simulation output _1d_to_2d_check_R layer if the Write Check Files command is enabled. Table 5.38: Empty 2d_zn Zone GIS Layer For Hydraulic Structure Connections Attribute Name(s) Description Type Name Unique identifier/name of the zone. Character Figure 5.18 shows the upstream and downstream connection zones for a hydraulic structure through an embankment. Figure 5.18: Digitising a Zone (Single) 5.16.4.4 Zone The spatial definition of a single zone connection follows the same approach as for linked zones (Section 5.16.4.3). Figure 5.19 shows the the digitising of a single zone polygon where a breach of the levee bank is to occur during a simulation. Figure 5.19: Digitising A Zone 5.16.5 Structure Block Structure blocks define and configure both hydraulic (e.g., weirs, culverts, bridges, pumps) and variable bathymetry structures. Each block links the structure’s spatial location and connection type with its functional behaviour, either controlling flow conditions or modifying bed levels. Multiple structure blocks can be defined in a simulation, with each block operating independently. A structure block is initiated with the Structure command, which specifies the connection type and location identifier(s). The block is closed with the End Structure command. All commands between these lines apply only to the structure being defined. For hydraulic structures with a single nodestring connection the general arrangement is: Structure = connection_type, location_ID structure_type various structure_configuration commands End Structure For hydraulic structures with linked nodestring or linked zone connections: Structure = connection_type, location_ID_upstream, location_ID_downstream structure_type various structure_configuration commands End Structure For varying bathymetry structures using a zone connection: Structure = connection_type, location_ID bathy_adjust_type various structure_configuration commands End Structure Where: connection_type — defines how the structure connects to the model (e.g., Nodestring, Linked Nodestrings, Linked Zones, Zone). location_ID or location_ID_upstream/downstream — matches a feature defined via Read GIS Nodestring or Read GIS Zone. structure_type — specifies the hydraulic structure type (e.g., Weir, Culvert, Matrix), set using Flux Function or Energy Loss Function. bathy_adjust_type — specifies the bathymetry adjustment method (e.g., by DEM, absolute elevation, or offset elevation), set using Bed Adjust. structure_configuration — commands and parameters specific to the chosen structure_type or bathy_adjust_type and connection_type. Detailed syntax and worked examples for each structure type are provided in Sections 5.16.6 to 5.16.14. A summary of structure block commands is presented in Table 5.39. Table 5.39: Structure Block Commands Command Description Structure Required - Defines the beginning of the structure block and the connection type linking the structure and 2D model domain. Bed Adjust Optional - Sets the bathymetric modification model for variable bathymetry. Bathy Database Conditional - Required if Bed Adjust == bathy_database. Sets the csv filepath to a lookup table of digital elevation models (DEMs) to interpolate bathymetry values from. Update dt Optional - Sets the interval to call the structure update function. Name Optional - Assigns a string name to the structure, which can be useful when reviewing structure csv outputs and log files. NLSWE Limit Conditional - Switches off structure flux limit checks. Required if modelling a pump. Flux Function Conditional - Required if not using the default NLSWE structure model. Sets the flux model to modify flow equations. Energy Loss Function Conditional - Required if modelling a bridge structure or other flow interference. Sets the method to represent structure energy losses. Zone Inlet/Outlet Orientation Conditional - Required for structures linked to the 2D domain using the linked zones connection type. Sets the flow direction at the upstream and downstream side of the structure. Used for flux limiting calculations. Max Open Width Conditional - Required for structures linked to the 2D domain using the linked zones connection type. Sets the maximum structure flow width. Used for flux limiting calculations. Blockage File Optional - Can be used when modelling a bridge or flow constriction to reduce the effective flow width through the structure. Width File Optional - Can be used when modelling a bridge or flow constriction to reduce the effective flow width through the structure. Energy Loss File Conditional - Required if using the table Energy Loss Function. Sets a relationship between structure flow (Q) and head loss (dH). Culvert File Conditional - Required when using the culvert flux function. Properties Conditional - Sets the hydraulic parameters of the structure if using the weir, weir_dz or porous flux function. Form Loss Coefficient Conditional - Required if using the coeffecient energy loss function. Used to represent sub-grid scale energy losses as a function of the flow velocity head. Control Optional - Used for structure operation or variable bathymetry. Defines the beginning of a control sub-block, and the structure control type. See Section 5.16.15) for instructions on the configuration of operational structure and variable bathymetry control. End Control Conditional - Defines the end of a structure control block. End Structure Required - Defines the end of a structure block. 5.16.6 Weirs Weirs are defined by setting the Flux Function command within a structure block to one of the following. Weir: A weir structure with a fixed crest level Weir_dz: A weir structure with a crest level (dz) above the existing cell elevation By default, both options implement the broad-crested weir equation with weir submergence, however a range of alternative weir types (Ogee, crump, sharp crest etc.) can also be modelled. Further information on the weir equation and alternative weir configurations are described in Appendix E.16.1.2. Hydraulic parameters for the weir equation are specified using the Properties command. The weir flux function is supported for the nodestring and linked nodestrings structure connection types. Linked zones are also supported, although use in this context is recommended only for areas where flow momentum is low (e.g., flow velocities less than 0.5 m/s). The weir_dz flux function is supported for the nodestring connection type only. Example weir and weir_dz flux function types for each supported connection type are provided below. Weir - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Weir ! 1D weir &nbsp;&nbsp;Properties == 3.0, 1.705, 1.5, 8.55, 0.556, 0.7 ! {No default} H(mRL), {1.705} C, {1.5} Ex, {8.55} a, {0.556} b, {0.7} Csf_min End Structure Weir - Linked Nodestrings ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_LNS_001_L.shp ! Structure Block Structure == Linked Nodestrings, LNS_US, LNS_DS ! connection_type, nodestring_id_upstream, nodestring_id_downstream &nbsp;&nbsp;Flux Function == Weir ! 1D weir &nbsp;&nbsp;Properties == 3.0, 1.705, 1.5, 8.55, 0.556, 0.7 ! {No default} H(mRL), {1.705} C, {1.5} Ex, {8.55} a, {0.556} b, {0.7} Csf_min End Structure Weir - Linked Zones ! Set Hydraulic Structure Location(s) Read GIS Zone == ..\\model\\gis\\2d_zn_LZN_001_R.shp ! Structure Block Structure == Linked Zones, LZN_US, LZN_DS ! connection_type, zone_id_upstream, zone_id_downstream &nbsp;&nbsp;Flux Function == Weir ! 1D weir &nbsp;&nbsp;Properties == 3.0, 1.705, 1.5, 8.55, 0.556, 0.7 ! {No default} H(mRL), {1.705} C, {1.5} Ex, {8.55} a, {0.556} b, {0.7} Csf_min &nbsp;&nbsp;Max Open Width == 4.0 ! {No default for weirs} Max flow width (m) for flux limiting &nbsp;&nbsp;Zone Inlet/Outlet Orientation == 180., 180 ! {No default} Inlet and outlet angle (degrees anticlockwise from east) End Structure Weir_dz - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Weir_dz ! 1D weir &nbsp;&nbsp;Properties == 0.2, 1.705, 1.5, 8.55, 0.556, 0.7 ! {No default} dz(m), {1.705} C, {1.5} Ex, {8.55} a, {0.556} b, {0.7} Csf_min End Structure 5.16.7 Culverts Culverts are defined using the Flux Function command in combination with a culvert database read using the Culvert File command. Advanced configuration for inlet control and automatic inlet and outlet energy loss coefficients are specified using the Culvert Parameters command, however typically these can be omitted from the .fvc file and the default values can be applied. Further information on culvert calculation science and culvert file configuration is provided in Appendix E.16.1.3. Culverts are typically implemented using the linked nodestring connection type. Linked zones are also supported, but are recommended only in areas with low flow momentum (e.g., velocities below 0.5 m/s). Single nodestrings can be used, however they do not allow for embankment overtopping and should therefore be avoided where overtopping is likely. Culvert examples for each connection type are provided below. Culvert - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Culvert ! 1D culvert &nbsp;&nbsp;Culvert File == ..\\model\\csv\\Culvert_database.csv, 1 ! 1 x 2.8m 1.4m box culvert End Structure Culvert - Linked Nodestrings ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_LNS_001_L.shp ! Structure Block Structure == Linked Nodestrings, LNS_US, LNS_DS ! connection_type, nodestring_id_upstream, nodestring_id_downstream &nbsp;&nbsp;Flux Function == Culvert ! 1D culvert &nbsp;&nbsp;Culvert File == ..\\model\\csv\\Culvert_database.csv, 1 ! 1 x 2.8m 1.4m box culvert End Structure Culvert - Linked Zones ! Set Hydraulic Structure Location(s) Read GIS Zone == ..\\model\\gis\\2d_zn_LZN_001_R.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Culvert ! 1D culvert &nbsp;&nbsp;Culvert File == ..\\model\\csv\\Culvert_database.csv, 1 ! 1 x 2.8m 1.4m box culvert &nbsp;&nbsp;! Max Open Width == Automatically calculated from culvert geometry &nbsp;&nbsp;Zone Inlet/Outlet Orientation == 180., 180 ! {No default} Inlet and outlet angle (degrees anticlockwise from east) End Structure 5.16.8 Bridges Bridge decks, abutments and piers are represented using one of the following energy loss methods. Energy losses calculated by the model using a combination of user specified form loss coefficient and optional application of a width (or blockage) file (Section 5.16.8.1) A lookup table of energy losses as a function of flow rate (Section 5.16.8.2) Both methods are supported for nodestring and linked nodestrings connection types only. Further detail on the scientific basis of energy loss functions is provided in Appendix E.16.1.4. 5.16.8.1 Form Loss Coefficient Energy loss coefficients are defined using the Energy Loss Function command. To account for reductions in effective flow width caused by bridge abutments or piers, either a Blockage File or a Width File may be applied. Example control file syntax is shown below, with accompanying illustrations of a blockage file (Figure 5.20) and width file (Figure 5.21). Bridge With Form Loss Coefficient - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Energy Loss Function == Coefficient ! {None} | Coefficient | Table &nbsp;&nbsp;Form Loss Coefficient == 0.25 ! {0.0} Form loss coefficient End Structure Bridge With Form Loss Coefficient - Linked Nodestrings ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Linked Nodestrings, LNS_US, LNS_DS ! connection_type, nodestring_id_upstream, nodestring_id_downstream &nbsp;&nbsp;Energy Loss Function == Coefficient ! {None} | Coefficient | Table &nbsp;&nbsp;Form Loss Coefficient == 0.25 ! {0.0} Form loss coefficient End Structure Bridge With Form Loss Coefficient And Blockage File - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Energy Loss Function == Coefficient ! {None} | Coefficient | Table &nbsp;&nbsp;Form Loss Coefficient == 0.25 ! {0.0} Form loss coefficient &nbsp;&nbsp;Blockage File == ..\\model\\csv\\Bridge_BLK_001.csv ! Blockage file End Structure Bridge_BLK_001.csv Z, FRAC 5.0, 0.9 7.0, 0.9 7.1, 0.0 7.9, 0.0 8.0, 0.5 8.9, 0.5 9.0, 1.0 Figure 5.20: Blockage File - Bridge_BLK_001.csv Bridge With Form Loss Coefficient And Blockage File - Linked Nodestrings ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_LNS_001_L.shp ! Structure Block Structure == Linked Nodestrings, LNS_US, LNS_DS ! connection_type, nodestring_id_upstream, nodestring_id_downstream &nbsp;&nbsp;Energy Loss Function == Coefficient ! {None} | Coefficient | Table &nbsp;&nbsp;Form Loss Coefficient == 0.25 ! {0.0} Form loss coefficient &nbsp;&nbsp;Blockage File == ..\\model\\csv\\Bridge_BLK_001.csv ! Blockage file End Structure Bridge With Form Loss Coefficient And Width File - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Energy Loss Function == Coefficient ! {None} | Coefficient | Table &nbsp;&nbsp;Form Loss Coefficient == 0.25 ! {0.0} Form loss coefficient &nbsp;&nbsp;Width File == ..\\model\\csv\\Bridge_WID_001.csv ! Width file End Structure Bridge_WID_001.csv Z, WIDTH 5.0, 9.0 7.0, 9.0 7.1, 0.0 7.9, 0.0 8.0, 5.0 8.9, 5.0 9.0, 10.0 Figure 5.21: Width File - Bridge_WID_001.csv Bridge With Form Loss Coefficient And Width File - Linked Nodestrings ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_LNS_001_L.shp ! Structure Block Structure == Linked Nodestrings, LNS_US, LNS_DS ! connection_type, nodestring_id_upstream, nodestring_id_downstream &nbsp;&nbsp;Energy Loss Function == Coefficient ! {None} | Coefficient | Table &nbsp;&nbsp;Form Loss Coefficient == 0.25 ! {0.0} Form loss coefficient &nbsp;&nbsp;Width File == ..\\model\\csv\\Bridge_WID_001.csv ! Width file End Structure 5.16.8.2 Energy Loss Table Energy loss tables enable the user the directly assign the kinetic energy head loss (dH) as a function of flow using a combination of the and Energy Loss File commands. Example control file syntax and energy loss files are provided below. Bridge With Energy Loss Table - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Energy Loss Function == Table ! {None} | Coefficient | Table &nbsp;&nbsp;Energy Loss File == ..\\model\\csv\\Bridge_ELT_001.csv ! Energy loss file End Structure Bridge_ELT_001.csv Q, dH -5,0.1 0,0 1,0.02 2,0.05 5,0.1 Bridge With Energy Loss Table - Linked Nodestrings ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Linked Nodestrings, LNS_US, LNS_DS ! connection_type, nodestring_id_upstream, nodestring_id_downstream &nbsp;&nbsp;Energy Loss Function == Table ! {None} | Coefficient | Table &nbsp;&nbsp;Energy Loss File == ..\\model\\csv\\Bridge_ELT_001.csv ! Energy loss file End Structure 5.16.9 Porous Structures Porous structures allow the modification of flow based on Darcy’s law through a porous media. Porous structures are defined using the Flux Function command in combination with hydraulic properties set using the Properties command. Further information on Darcy’s equation and the required hydraulic properties is provided in Appendix E.16.1.5. Porous structures are supported for nodestring, linked nodestrings and linked zones connection types. Example .fvc file snippets for each connection type are provided below. Porous - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Porous ! Permeable structure - Darcy's Law &nbsp;&nbsp;Properties == 0.001, 10 ! {No default} K (m/s), {No default} Flowpath length (m) End Structure Porous - Linked Nodestrings ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_LNS_001_L.shp ! Structure Block Structure == Linked Nodestrings, LNS_US, LNS_DS ! connection_type, nodestring_id_upstream, nodestring_id_downstream &nbsp;&nbsp;Flux Function == Porous ! Permeable structure - Darcy's Law &nbsp;&nbsp;Properties == 0.001, 10 ! {No default} K (m/s), {No default} Flowpath length (m) End Structure Porous - Linked Zones ! Set Hydraulic Structure Location(s) Read GIS Zone == ..\\model\\gis\\2d_zn_LZN_001_R.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Porous ! Permeable structure - Darcy's Law &nbsp;&nbsp;Properties == 0.001, 10 ! {No default} K (m/s), {No default} Flowpath length (m) &nbsp;&nbsp;Zone Inlet/Outlet Orientation == 180., 180 ! {No default} Inlet and outlet angle (degrees anticlockwise from east) End Structure 5.16.10 User-Defined Matrix User-defined matrix structures are configured by setting the Flux Function command to Matrix and specifying a matrix file using the Flux File command. This structure type allows the user to define flow as a function of upstream and downstream water levels through a custom matrix of values. Each matrix entry defines a triplet of upstream head (h_us), downstream head (h_ds), and the resulting flow rate (Q). During a simulation, TUFLOW FV interpolates the matrix to determine the flow rate corresponding to the current head conditions. The user-defined matrix structure is flexible and can represent a wide range of hydraulic behaviours, including irregular weirs, gates, or compound structures. However, it requires the modeller to fully define the flow relationship via a flux file. Supported connection types include nodestring and linked nodestrings. Linked zones are also supported, although use in this context is recommended only for areas where flow momentum is low (e.g., flow velocities less than 0.5 m/s). Further detail on matrix structure science and matrix file formatting is provided in Appendix E.16.1.6. Example structure blocks for each supported connection type are provided below. Matrix - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Matrix ! User-defined flow matrix &nbsp;&nbsp;Flux File == ..\\model\\csv\\Matrix_001.csv ! hQh matrix file End Structure Matrix_001.csv - Simple example symmetrical flow matrix WL_DS,WL_US,,, 1,1,2,4,10 1,0,3.6,5,6 2,-3.6,0,4,5 4,-5,-4,0,4.5 10,-6,-5,-4.5,0 Matrix - Linked Nodestrings ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_LNS_001_L.shp ! Structure Block Structure == Linked Nodestrings, LNS_US, LNS_DS ! connection_type, nodestring_id_upstream, nodestring_id_downstream &nbsp;&nbsp;Flux Function == Matrix ! User-defined flow matrix &nbsp;&nbsp;Flux File == ..\\model\\csv\\Matrix_001.csv ! hQh matrix file End Structure Matrix - Linked Zones ! Set Hydraulic Structure Location(s) Read GIS Zone == ..\\model\\gis\\2d_zn_LZN_001_R.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Matrix ! User-defined flow matrix &nbsp;&nbsp;Flux File == ..\\model\\csv\\Matrix_001.csv ! hQh matrix file &nbsp;&nbsp;Zone Inlet/Outlet Orientation == 180., 180 ! {No default} Inlet and outlet angle (degrees anticlockwise from east) End Structure 5.16.11 User-Defined Timeseries To use this method, the Flux Function is set to Timeseries within the structure block, and the flow time series is specified using a secondary Flux File command. Supported connection types include nodestring and linked nodestrings. Linked zones are also supported, although use in this context is recommended only for areas where flow momentum is low (e.g., flow velocities less than 0.5 m/s). Further detail on timeseries stucture science is provided in Appendix E.16.1.7. Example structure blocks for each supported connection type are provided below. An example .csv flux file is also provided. Timeseries - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Timeseries ! User-specified flow timeseries &nbsp;&nbsp;Flux File == ..\\model\\csv\\Gate_Release_001.csv ! Measured flow release End Structure If Time Format == Hours: Gate_Release_001.csv time,Q 0,0 1.0,2 1.5,6 10,12.5 If Time Format == ISODATE: Gate_Release_001.csv time,Q 01/01/2024 00:00:00,0 01/01/2024 01:00:00,2 01/01/2024 01:30:00,6 01/01/2024 12:30:00,12.6 Timeseries - Linked Nodestrings ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_LNS_001_L.shp ! Structure Block Structure == Linked Nodestrings, LNS_US, LNS_DS ! connection_type, nodestring_id_upstream, nodestring_id_downstream &nbsp;&nbsp;Flux Function == Timeseries ! User-specified flow timeseries &nbsp;&nbsp;Flux File == ..\\model\\csv\\Gate_Release_001.csv ! Measured flow release End Structure Timeseries - Linked Zones ! Set Hydraulic Structure Location(s) Read GIS Zone == ..\\model\\gis\\2d_zn_LZN_001_R.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Timeseries ! User-specified flow timeseries &nbsp;&nbsp;Flux File == ..\\model\\csv\\Gate_Release_001.csv ! Measured flow release &nbsp;&nbsp;Zone Inlet/Outlet Orientation == 180., 180 ! {No default} Inlet and outlet angle (degrees anticlockwise from east) End Structure 5.16.12 Pumps Pumps are modelled using the same approach as user-defined time series structures, with one additional requirement: the NLSWE Limit command must be included to disable flux limiting. This ensures the full user-specified flow is applied. Examples of pump configurations for each supported connection type are provided below. Pump - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Timeseries ! User-specified flow timeseries &nbsp;&nbsp;Flux File == ..\\model\\csv\\Pump_001.csv ! Logged pumping times &nbsp;&nbsp;NLSWE Limit == 0 ! Disable flux limiting for pump End Structure If Time Format == Hours: Pump_001.csv time,Q 0,0 0.99,0 1.0,2 1.5,2 1.51,0 5,0 If Time Format == ISODATE: Pump_001.csv time,Q 01/01/2024 00:00:00,0 01/01/2024 00:59:00,0 01/01/2024 01:00:00,2 01/01/2024 01:30:00,2 01/01/2024 01:31:00,0 01/01/2024 05:00:00,0 Pump - Linked Nodestrings ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_LNS_001_L.shp ! Structure Block Structure == Linked Nodestrings, LNS_US, LNS_DS ! connection_type, nodestring_id_upstream, nodestring_id_downstream &nbsp;&nbsp;Flux File == ..\\model\\csv\\Pump_001.csv ! Logged pumping times &nbsp;&nbsp;NLSWE Limit == 0 ! Disable flux limiting for pump End Structure Pump - Linked Zones ! Set Hydraulic Structure Location(s) Read GIS Zone == ..\\model\\gis\\2d_zn_LZN_001_R.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Timeseries ! User-specified flow timeseries &nbsp;&nbsp;Flux File == ..\\model\\csv\\Pump_001.csv ! Logged pumping times &nbsp;&nbsp;NLSWE Limit == 0 ! Disable flux limiting for pump &nbsp;&nbsp;Zone Inlet/Outlet Orientation == 180., 180 ! {No default} Inlet and outlet angle (degrees anticlockwise from east) End Structure 5.16.13 Walls Wall type flux-functions block all flow and can be used to block flow along cell edges where the model resolution would otherwise not allow the bathymetry to do so. They are supported for single nodestring connection types only. Weir - Single Nodestring ! Set Hydraulic Structure Location(s) Read GIS Nodestring == ..\\model\\gis\\2d_ns_SNS_001_L.shp ! Structure Block Structure == Nodestring, SNS_HS ! connection_type, nodestring_id &nbsp;&nbsp;Flux Function == Wall ! No flow End Structure 5.16.14 Variable Bathymetry All variable bathymetry structures use the Zone connection type. The bathymetry adjustment method is specified in the structure block using the Bed Adjust command. Temporal bathymetry changes are applied via one or more structure control blocks nested within the same structure definition. This section provides syntax and configuration examples for Zb, dZb, and Bathy_Database bed adjustment types. A control block example is included for demonstration purpose. Control block commands and configuration is described in Section 5.16.15. Variable Bathymetry - Zb_Adjust MJS TODO: For each example, provide a brief summary of what the example is doing… ! Set Hydraulic Structure Location(s) Read GIS Zone == ..\\model\\gis\\2d_zn_SZN_001_R.shp ! Structure Block Structure == Zone, Rabbit_Levee ! connection_type, zone_id &nbsp;&nbsp;Bed Adjust == ZB_Adjust ! {''} | Zb_Adjust | dZb_Adjust | Bathy_Database &nbsp;&nbsp;! Nested Control Block - See Operational Structures Section &nbsp;&nbsp;Control == Trigger ! {None} | Trigger | Timeseries | Sample | Sample_Rule | Target_RuleControl Parameter == Zb ! {''} | Zb | dZb | Bathy_Control &nbsp;&nbsp;&nbsp;&nbsp;Sample Point == 540587.55,6866450.77 ! {No default} Sample x coordinate, {No default} Sample y coordinate &nbsp;&nbsp;&nbsp;&nbsp;Sample Parameter == WL ! {''} | Any model variable &nbsp;&nbsp;&nbsp;&nbsp;Sample dt == 0.0167 ! {No default} Sample timestep (hrs) Control Update dt == 0.0167 ! {0 computational timestep} Control update timestep (hrs) &nbsp;&nbsp;&nbsp;&nbsp;Trigger Value == 2.25 ! {No default} Value of sample parameter at sample point to initiate trigger control file response &nbsp;&nbsp;&nbsp;&nbsp;Control File == ..\\model\\csv\\Breach_Survey_001.csv ! Timeseries of bed change after trigger initiated &nbsp;&nbsp;End Control !Close nested control block End Structure Breach_Survey_001.csv Time, Zb 0,5 1,2.6 3,1.5 Time is in hours following the trigger condition being met regardless of time format being hours or ISODATE. Variable Bathymetry - dZb_Adjust ! Set Hydraulic Structure Location(s) Read GIS Zone == ..\\model\\gis\\2d_zn_SZN_001_R.shp ! Structure Block Structure == Zone, Bed_Scour ! connection_type, zone_id &nbsp;&nbsp;Bed Adjust == dZb_Adjust ! {''} | Zb_Adjust | dZb_Adjust | Bathy_Database &nbsp;&nbsp;! Nested Control Block - See Operational Structures Section &nbsp;&nbsp;Control == Trigger ! {None} | Trigger | Timeseries | Sample | Sample_Rule | Target_RuleControl Parameter == dZb ! {''} | Zb | dZb | Bathy_Control &nbsp;&nbsp;&nbsp;&nbsp;Sample Point == 540587.55,6866450.77 ! {No default} Sample x coordinate, {No default} Sample y coordinate &nbsp;&nbsp;&nbsp;&nbsp;Sample Parameter == WL ! {''} | Any model variable &nbsp;&nbsp;&nbsp;&nbsp;Sample dt == 0.0167 ! {No default} Sample timestep (hrs) Control Update dt == 0.0167 ! {0 computational timestep} Control update timestep (hrs) &nbsp;&nbsp;&nbsp;&nbsp;Trigger Value == 2.25 ! {No default} Value of sample parameter at sample point to initiate trigger control file response &nbsp;&nbsp;&nbsp;&nbsp;Control File == ..\\model\\csv\\Bed_Scour_001.csv ! Timeseries of bed change after trigger initiated &nbsp;&nbsp;End Control !Close nested control block End Structure Bed_Scour_dZb_001.csv Time, dZb 0,-0.5 1,-1.6 3,-2.5 Time is in hours following the trigger condition being met regardless of time format being hours or ISODATE. dZb is relative to the static bathymetry level at the start of the simulation, or from the previous Zb level if trigger reset is enabled. Variable Bathymetry - Bathy_Database ! Set Hydraulic Structure Location(s) Read GIS Zone == ..\\model\\gis\\2d_zn_SZN_001_R.shp ! Structure Block Structure == Zone, Bed_Scour ! connection_type, zone_id &nbsp;&nbsp;Bed Adjust == Bathy_Database ! {''} | Zb_Adjust | dZb_Adjust | Bathy_Database &nbsp;&nbsp;Bathy Database == ..\\model\\csv\\Bathy_Database_001.csv ! {''} Path to bathymery database file &nbsp;&nbsp;! Nested Control Block - See Operational Structures Section &nbsp;&nbsp;Control == Trigger ! {None} | Trigger | Timeseries | Sample | Sample_Rule | Target_RuleControl Parameter == Bathy_Control ! {''} | Zb | dZb | Bathy_Control &nbsp;&nbsp;&nbsp;&nbsp;Sample Point == 540587.55,6866450.77 ! {No default} Sample x coordinate, {No default} Sample y coordinate &nbsp;&nbsp;&nbsp;&nbsp;Sample Parameter == WL ! {''} | Any model variable &nbsp;&nbsp;&nbsp;&nbsp;Sample dt == 0.0167 ! {No default} Sample timestep (hrs) Control Update dt == 0.0167 ! {0 computational timestep} Control update timestep (hrs) &nbsp;&nbsp;&nbsp;&nbsp;Trigger Value == 6.2 ! {No default} Value of sample parameter at sample point to initiate trigger control file response &nbsp;&nbsp;&nbsp;&nbsp;Control File == ..\\model\\csv\\Bed_Scour_001.csv ! Timeseries of bathy database lookup values after trigger initiated &nbsp;&nbsp;End Control !Close nested control block End Structure ..\\model\\csv\\Bathy_Database_001.csv BATHY_CONTROL,BATHY_FILE -2.0, ..\\geo\\variable_bathy\\Bathy_neg2mRL_001.asc 0.00, ..\\geo\\variable_bathy\\Bathy_0mRL_001.asc 5.00, ..\\geo\\variable_bathy\\Bathy_5mRL_001.asc 10.0, ..\\geo\\variable_bathy\\Bathy_10mRL_001.asc ..\\model\\csv\\Bed_Scour_001.csv TIME,bathy_control 0,10. 1,0. 3,-2. 5.16.15 Operational Structures And Variable Bathymetry Hydraulic structures can be operated, and variable bathymetry is modified during a simulation using structure controls and user-defined logic. Structure controls are assigned within control blocks, which are nested within a parent structure block. This framework supports simulation of adjustable gates, valves, pumps, levee breaching, dredging, scour, and other time- or condition-dependent behaviours. The process to implement an operational hydraulic or variable bathymetry structure is as follows. Construct a structure block for the respective structure type being modelled (weir, culvert etc.) as described in the preceding sub-sections 5.16.6 to 5.16.14 Define the hydraulic or bathymetric control parameter to operate during the simulation. For example, the weir crest elevation, the bathymetry level, or opening and closing of a gate or valve (Section 5.16.15.1) Select a pre-defined control type used to operate the structure by modifying the control parameter selected during Step 2.) (Section 5.16.15.2) Within a structure block, create a nested control block and configure the control block with any required input files, sample locations, thresholds, or timing settings (Section 5.16.15.3). For each structure type (weir, bridge, culvert etc.) example .fvc syntax snippets are provided for supported combinations of control parameter and control type. Structure controls are not supported for wall or bridge structures. 5.16.15.1 Control Parameters A control parameter defines the aspect of the structure’s behaviour or geometry that is changed by the structure control type. It is set using the Control Parameter control block command. The available control parameters are provided in Table 5.40. Table 5.40: Control Parameters Control Parameter Description Fraction_Open Scale factor between 0 and 1 applied to the structure’s flow rate. Commonly used to operate gates or valves that can open or close during a simulation. Min_Flow Minimum allowable flow rate through the structure, subject to physical limits. Allows a known minimum flow to pass through the structure, without necessary needing to resolve it with the structure. Weir_Crest Adjusts the absolute crest elevation of a weir. Typically used to model weir structures whose crest level changes over time due to operational, environmental, or failure processes. Weir_dz As per Weir_Crest but adjusts the crest elevation of a weir by an relative change (ΔZ) from the model bathymetry. Zb A variable bathymetry feature. Sets the absolute bed elevation within the specified zone. Typically used to model levee breaches. dZb As per Zb but applies a relative change (ΔZ) to the bed elevation within the specified zone. Bathy_Control A variable bathymetry feature. Applies bathymetry adjustments using a predefined bathymetric control input. Uses DEMs to define bed elevation changes, allowing for complex geometric changes to be modelled. 5.16.15.2 Control Types The control type specifies how the control parameter will be updated during a simulation. The control type may modify the control parameter in response to an event, via a predefined time schedule, by sampling conditions within the model, or by targeting a desired outcome. The available control types are provided in Table 5.41. Table 5.41: Control Types Control Type Description Trigger Trigger controls define a condition that will commence after the first exceedance of a specific trigger value within the model at a specified sample point. Timeseries Timeseries controls define an adjusting condition based on a control file CSV timeseries. Sample Adjusts a control parameter by sampling a model variable at a user-specified location. Sample Rule Adjusts a control parameter by sampling a model variable at a user-specified location. The sampled value is mapped to a control response using a lookup table defined in a control CSV file. Target Rule Dynamically adjusts a control parameter to reach a time-varying target value (e.g. salinity, water level) at a specified location. The target is defined via a time series. Structure behaviour is adjusted to reduce the difference between current and target conditions 5.16.15.3 Control Block A control block defines how a control is applied to a hydraulic or variable bathymetry structure. It is nested within a structure block and contains the commands that specify the control type, control parameter, and all required settings such as input files, sample locations, thresholds, and timing. A structure control block is initiated with the Control command, which also specifies the control type (Section 5.16.15.2). . The block is closed with the End Control command. All commands between these lines apply only to the structure control being defined. The general form of a control block is nested within a parent structure block as follows. ! Single Nodestring Example (All connection types can support control blocks) Structure = connection_type, location_ID ! Structure Commands structure_type or bathy_adjust_type various structure_configuration commands ! Nested Control Block Control == control_type control_parameter various structure_control commands End Control End Structure Where: structure_type, bed_adjust_type, connection_type, location_ID, and structure_configuration are defined in the parent structure block as described in Section 5.16.5 control_type - is as described in Section 5.16.15.2. control_parameter - is as described in Section 5.16.15.1 structure_control - commands and configurations option specific combination of structure_type, control_type, and control parameter A summary of control block commands is presented in Table 5.39. Detailed syntax and examples for each hydraulic structure type are provided in Section 5.16.15.4. Table 5.42: Control Block Commands Command Description Control Required - Defines the beginning of a structure control block, and the structure control type. Control Parameter Required - Sets the hydraulic structure or variable bathymetry parameter that is modified by the control type. Control File Conditional - Required for the Trigger, Timeseries, Sample Rule and Target Rule control types. Sets temporal relatitionship (Trigger, Timeseries) or lookup (Sample Rule, Target Rule) used to modfiy the control parameter. Control Update dt Optional - Sets the interval to call the bathymetry control update function. If not specified the model timestep is used. Control Header Optional - Override the default header name read from the control file or bathymetry database. Sub-Type Optional - Defines how the final fraction open value is calculated if multiple control blocks using the fraction open control parameter are specified. Max Opening Increment Optional - Sets the maximum change of the control parameter over the control update dt. Not used for the Trigger control type. Target File Conditional - Required if using the Target control type. Sets a timeseries of the desired value of the sample parameter at the sample point or sample nodestring. Sample Parameter Conditional - Required if Control == Sample_Rule. The model variable that will be sampled. Fo example water level, velocity, salinity etc. Sample Nodestring Optional - Nodestring ID. Location to sample the sample parameter. Alternative to the sample point. Sample Point Optional - X and Y coordinate. Location to sample the sample parameter. Alternative to the sample nodestring. Sample dt Optional - Sets the interval to sample the model sample parameter. If not specified, the model timestep is used. Trigger Value Conditional - Required if Control == Trigger. The value of the sample parameter that once exceeded will trigger the structure to execute the control file. Trigger Reset Optional – A sample parameter value that, if it falls below this threshold, will re-enable the trigger, allowing it to be executed multiple times during a simulation. If omitted, the trigger can occur only once. Response Parameters Optional - Adusts the response rate of the control structure as a function of positvely or negatively trending sample parameter value. For example if the water level is increasing speed up the rate of bathymetric change, while on the falling limb (downtrending water level) slow down the rate of bathymetric change. Start Control State Optional - Sets the initial value or starting state of the structure. Not used for the Trigger control type. Not used for the Timeseries control type, unless the Response Function command is used in combination with Timeseries. End Control Required - Defines the end of a structure control block. 5.16.15.4 Control Structure Examples MJS TODO: THIS SECTION IS INCOMPLETE The following sub-sections summarise the supported combination of flux function, control type, and control parameter. Due to the large number of combinations available, example models are provided via the TUFLOW FV Wiki Example Model page MJS TODO, potentially add .fvc links in the tables below. 5.16.15.4.1 Control Structure Examples - Weir Table 5.43: Supported Control Types and Control Parameters for Weirs Control Type Trigger Timeseries Sample Rule Target Rule Fraction_Open Y Y Y Y Min_Flow Y Y Y Y Weir_Crest Y Y Y Y Weir_dz N N N N 5.16.15.4.2 Control Structure Examples - Weir_dz Table 5.44: Supported Control Types and Control Parameters for Weirs (Weir_dz) Control Type Trigger Timeseries Sample Rule Target Rule Fraction_Open Y Y Y Y Min_Flow Y Y Y Y Weir_Crest N N N N Weir_dz Y Y Y Y 5.16.15.4.3 Control Structure Examples - Culvert Table 5.45: Supported Control Types and Control Parameters for Culverts Control Type Trigger Timeseries Sample Rule Target Rule Fraction_Open Y Y Y Y Min_Flow N N N N Weir_Crest N N N N Weir_dz N N N N 5.16.15.4.4 Control Structure Examples - Matrix Table 5.46: Supported Control Types and Control Parameters for User-defined Flow Matrix Control Type Trigger Timeseries Sample Rule Target Rule Fraction_Open Y Y Y Y Min_Flow Y Y Y Y Weir_Crest N N N N Weir_dz N N N N 5.16.15.4.5 Control Structure Examples - Timeseries Table 5.47: Supported Control Types and Control Parameters for User-defined Flow Timeseries Control Type Trigger Timeseries Sample Rule Target Rule Fraction_Open Y Y Y Y Min_Flow N N N N Weir_Crest N N N N Weir_dz N N N N 5.16.15.4.6 Control Structure Examples - Porous Table 5.48: Supported Control Types and Control Parameters for Porous Structures Control Parameter Trigger Timeseries Sample Rule Target Rule Sample Fraction_Open Y Y Y Y N Min_Flow N N N N N Weir_Crest N N N N N Weir_dz N N N N N 5.16.15.4.7 Control Structure Examples - Bathymetry Table 5.49: Supported Control Types and Control Parameters for Variable Bathymetry Control Parameter Trigger Timeseries Sample Rule Target Rule Sample ZB Y Y Y Y N dZB Y Y Y Y N Bathy_Database Y Y Y Y Y MJS TODO: Need to discuss the sample rule and response parameters stuff. 5.16.15.5 Control Structure Review Structure controls are logged to a .slf file when Structure Logging is enabled. This provides a report of control values and structure states throughout the simulation. Further information on hydraulic structure model output is described in Section 5.17.9. 5.16.16 Treatment Structure Treatment structures are not applicable for the 2DHD simulation class. 5.17 Model Outputs MJS TODO: This section is in progress… 5.17.1 Command Status Required 5.17.2 Description 5.17.3 Output Types The available output types for the 2D HD simulation class are summarised in Table 5.50. Detailed descriptions and examples are provided in the following sub-sections. Table 5.50: Output Types Ouptut Type Description Point Cell output defined at discrete point locations (Section 5.17.6). Polyline Model fluxes integrated across discrete polyline (nodestring) (Section 5.17.7). Mesh Mesh output at all model cells. Also commonly refered to as ‘map output’ or ‘sheet output’ (Section 5.17.8). Structure Model fluxes through hydraulic structures (Section 5.17.9). Mass Balance Calculated model mass conservation outputs (Section 5.17.10). Transport Calculated model mass conservation outputs (Section 5.17.11). 5.17.4 Output Directories Output files are written to directories defined by the user as listed in Table 5.51. Table 5.51: Output Types Command Description Output Dir Required - Defines the directory where model results are saved. ‘Output Folder’ is also accepted. Log Dir Optional - Sets the model log directory. Write Check Files Optional - Writes model GIS check files to the specified directory. ! Model Output Directories Output Dir == ..\\results ! Result output directory Log Dir == log ! Log and diagnostics directory Write Check Files == ..\\check ! Directory for GIS check files 5.17.5 Output Block An output block defines the type and configuration of model result outputs. The general form of the boundary condition block is: Output = output_format Various output_block_commands End BC Where: Output == indicates the instantiation of a boundary condition block output_format is a character flag setting the result output type type (e.g. points, polyline, or whole-of-mesh output option as described in Section 5.17.3) output_block_commands are any commands that reside within an output block. Output block commands provide configuration settings for the output End Output closes the output block The available 2D HD simulation class output block commands are described in Table 5.52. Table 5.52: Output Block Commands Command Description Output Required - Defines the beginning of the output block and the result output format. Output Parameters Conditional - Required for points and map output types. Sets the model result output, for example water level, depth, velocity etc. Output Interval Required - Defines the output interval that result are saved. If not specified, results are output at the model timestep. Start Output Optional - Defines the start time of the model output. If not specified, uses the model Start Time. Final Output Optional - Defines the final output time of the model output. If not specified, uses the model End Time. Suffix Conditional - Enables multiple results of the same output format to be saved from the same simulation. Appends the suffix onto the result file name to ensure each result file name is unique. Read GIS PO Conditional - Required for the points output type. GIS layer that contains the location of the points. Exact Timestep Optional - Outputs the result at the exact computational timestep. Output Compression Optional - Enable or disable file compression for NetCDF or XMDF output formats. Output Statistics Optional - Track minimum or maximum map output values on a user-specifed Output Statistics dt. Output Statistics dt Optional - Sets the interval to track map output statistics. End Output Required - Defines the end of an output block. 5.17.6 Point The Read GIS PO command is used to define point locations. MJS TODO: add pic of points layer ! ADCP Calibration Points Output == Points ! CSV timeseries at each output point Read GIS PO == ..\\model\\gis\\3d_po_ACDPs_001_P.shp ! Point locations Map Output Parameters == h, d, v ! Water level, depth, velocity Output Interval == 300. ! (s) End Output ! Meteorological Boundary Comparisons To Measurements Output == Points ! CSV timeseries at each output point Read GIS PO == ..\\model\\gis\\3d_po_MetObs_001_P.shp ! Point locations Map Output Parameters == W10, MSLP ! Wind speed, mean sea level pressure Output Interval == 1800. ! (s) Suffix == MET ! Appends _MET to output to avoid overwrite of HD outputs End Output 5.17.7 Polyline Outputs csv files where any nodestrings are specified. Pic of monitoring lines… ! Location of Flux Polylines Read GIS Nodestring == ..\\model\\gis\\2d_ns_Monitoring_001_L.shp ! Output Flux Cross/Long Sections Output == Flux ! CSV timeseries of net flux across each polyline (nodestring) Output Interval == 300. ! (s) End Output 5.17.8 Mesh MJS TODO: investigate NetCDF and XMDF file compression defaults… Output == NetCDF ! NetCDF mesh output format Map Output Parameters == h, d, v ! Water level, depth, velocity Output Interval == 900. ! (s) End Output Output == XMDF ! XMDF mesh output format Map Output Parameters == h, d, v ! Water level, depth, velocity Output Interval == 900. ! (s) End Output Output == DATV ! DATV mesh output format Map Output Parameters == h, d, v ! Water level, depth, velocity Output Interval == 900. ! (s) End Output 5.17.8.1 Statistics Output == NetCDF Map Output Parameters == h, d, v ! Water level, depth, velocity Output Interval == 900. ! (s) Output Statistics == min, max ! Tracks the minimum and maximum h, d, v Output Statistics dt == 1 ! (s) Track the statistics at this timestep End Output 5.17.9 Structure ! Output == StructFlux Output Interval == 300. ! (s) End Output Structure Logging == 1 5.17.10 Mass Balance ! Accumulated Volume and Mass Balance Output == massbalance Output Interval == 900. ! (s) End Output ! Global Volume Tracking Output == mass Output Interval == 900. ! (s) End Output 5.17.11 Transport ! Output Transport HD File Output == Transport Output Interval == 900. ! (s) End Output "],["HD3D-1.html", "Section 6 Model Construction: 3D HD Simulation Class 6.1 Overview 6.2 Spatial Order 6.3 Vertical Momentum Mixing 6.4 Computational Mesh 6.5 Materials 6.6 Initial Conditions 6.7 Boundary Conditions 6.8 Hydraulic Structures 6.9 Model Outputs", " Section 6 Model Construction: 3D HD Simulation Class 6.1 Overview MJS provide a brief into to the chapter… This chapter describes model construction specific to the 3D hydrodynamic simulation class. The commands/features within this Chapter are an extension to those detailed for the 2D hydrodynamic simulation class model construction in Chapter XX. \\(\\newcommand{\\blockindent}{\\hspace{0.5cm}}\\) 6.2 Spatial Order Details Table Example 6.3 Vertical Momentum Mixing Details Table Example 6.4 Computational Mesh This section describes computational mesh construction specific to the 3D hydrodynamic simulation class. Extension of Section 5.11. Describe 3D Layering commands…. Details Table Example 6.5 Materials Table 6.1: Material Properties Commands Command Description Vertical Eddy Viscosity Limits Optional - Assignes material-specific vertical eddy viscosity limits. Overrides the Global Vertical Eddy Viscosity Limits command. 6.6 Initial Conditions This section describes initial condition construction specific to the 3D hydrodynamic simulation class. Extension of Section 5.14. Details Table Example 6.7 Boundary Conditions This section describes boundary condition construction specific to the 3D hydrodynamic simulation class. Extension of Section 5.15. Details Table Example 6.8 Hydraulic Structures 6.9 Model Outputs This section describes model output features specific to the 3D hydrodynamic simulation class. Extension of Section 5.17. Details Table Example "],["AD-1.html", "Section 7 Model Construction: AD Simulation Class 7.1 Overview 7.2 Temperature Model 7.3 Tracer Model 7.4 Scalar Mixing Model 7.5 Atmospheric Heat Exchange 7.6 Shortwave Radiation Model 7.7 Longwave Radiation Model 7.8 Latent Heat Model 7.9 Materials 7.10 Initial Conditions 7.11 Boundary Conditions 7.12 Hydraulic Structures 7.13 Model Outputs", " Section 7 Model Construction: AD Simulation Class 7.1 Overview \\(\\newcommand{\\blockindent}{\\hspace{0.5cm}}\\) ## Salinity Model {#AD-SM-2} 7.2 Temperature Model 7.3 Tracer Model 7.4 Scalar Mixing Model 7.4.1 Horizontal 7.4.2 Vertical 7.5 Atmospheric Heat Exchange 7.6 Shortwave Radiation Model 7.7 Longwave Radiation Model 7.8 Latent Heat Model 7.9 Materials Table 7.1: Material Properties Commands Command Description Horizontal Scalar Diffusivity Optional - Assigns a material-specific horizontal scalar diffusivity coefficient or value. Overrides the Global Horizontal Scalar Diffusivity command. Horizontal Scalar Diffusivity Limits Optional - Assigns material-specific horizontal scalar diffusivity limits. Overrides the Global Horizontal Scalar Diffusivity Limits command. Vertical Scalar Diffusivity Limits Optional - Assignes material-specific vertical scalar diffusivity limits. Overrides the Global Vertical Scalar Diffusivity Limits command. 7.10 Initial Conditions 7.11 Boundary Conditions BC Header and BC Trace should make this easier to explain. BC Nodestrings needs to be back in the commands table here… Still umming and arring over whether to have OBC BCs in the 2DHD section as fully specified BCs, rather than calling them Ocean Circulation BCs. Trying to keep the 2DHD simple for the majority of users. 7.11.1 Boundary Types 7.11.2 Boundary Location Definition 7.11.2.1 Transport No location specification required. Location is dependant on the mesh geometry of a previous TUFLOW FV simulation, and therefore the mesh must be identical to the mesh used in the previous simulation. Further information on the configuration of transport file boundaries is provided in Section 7.11.6. 7.11.3 Ocean Circulation Model Not applicable for the 2D HD simulation class. ! TUFLOW FV FVC File for Ocean Dataset ! Written by `get_ocean` ! Netcdf start time: 2010-03-01 00:00 ! Netcdf end time: 2010-04-30 21:00 ! Netcdf x-limits: 135.0400, 142.9600 ! Netcdf y-limits: -18.9600, -7.0400 Grid Definition File == ..\\bc_dbase\\GoC_HYCOM_20100326_20100402_AEST.nc Grid Definition Variables == longitude, latitude, depth Grid Definition Label == ocean Boundary Gridmap == 1 End Grid BC == OBC_GRID, ocean, ..\\bc_dbase\\GoC_HYCOM_20100326_20100402_AEST.nc BC Nodestrings == Eastern_Boundary, Western_Boundary ! Please supply open boundary ns list Sub-Type == 6 BC Header == local_time, surf_el, water_u, water_v, salinity, water_temp BC Update dt == 900. BC Time Units == hours BC Reference Time == 01/01/1990 00:00 BC Offset == -0.65, 0.0, 0.0, 0.0, 0.0 ! Replace -0.5 with relevant surf-el offset BC Default == NaN Vertical Coordinate Type == depth End BC 7.11.4 Mass 7.11.5 Scalar Concentration 7.11.6 Transport File Transport files are generated from an existing TUFLOW FV simulation as model output. The transport file is then used in a subsequent simulation to provide hydrodynamic fields (depth and momentum) Writing Transport File An initial model, TB_20230101_20230301_001.fvc, models a three-month simulation (01-Jan-2023 to 01-Mar-2023) for the Turtle Bay (FR) outfall siting analysis. The following commands in the .fvc file specify transport file output (MJS TODO see also Section XXX in model outputs…): ! Output Transport File Output == transport ! Output transport file to save hydrodynamic fields Output Interval == 600. ! Output every 600 seconds (10 minutes) End Output Read Transport Files ! Read transport file for hydrodynamic decoupling - typically used for tracer scenarios BC == transport, .._2D_008_trans.nc End BC 7.12 Hydraulic Structures 7.13 Model Outputs "],["ST-1.html", "Section 8 Model Construction: ST Simulation Class 8.1 Overview 8.2 Sediment Model 8.3 Sediment Configuration 8.4 Initial Conditions 8.5 Boundary Conditions 8.6 Hydraulic Structures 8.7 Model Outputs", " Section 8 Model Construction: ST Simulation Class 8.1 Overview MJS to be populated… 8.2 Sediment Model None, barotropic, baroclinic aka Include Sediment == 8.3 Sediment Configuration 8.4 Initial Conditions 8.5 Boundary Conditions 8.6 Hydraulic Structures 8.7 Model Outputs "],["WQ-1.html", "Section 9 Model Construction: WQ Simulation Class 9.1 Overview 9.2 Water Quality Model 9.3 Water Quality Configuration 9.4 Initial Conditions 9.5 Boundary Conditions 9.6 Hydraulic Structures 9.7 Model Outputs", " Section 9 Model Construction: WQ Simulation Class 9.1 Overview MJS to be populated… 9.2 Water Quality Model TUFLOW, External 9.3 Water Quality Configuration 9.4 Initial Conditions 9.5 Boundary Conditions 9.6 Hydraulic Structures 9.7 Model Outputs "],["PT-1.html", "Section 10 Model Construction: PT Simulation Class 10.1 Overview", " Section 10 Model Construction: PT Simulation Class 10.1 Overview MJS to be populated… "],["Hardware-1.html", "Section 11 Hardware And Operating System 11.1 Context", " Section 11 Hardware And Operating System 11.1 Context TUFLOW CATCH enables… Seamless assessment of the impact of land use or other catchment based changes on the hydrodynamics of downstream receiving waterways (i.e. without the need to simulate pollutant export, see Section ??, bullet point 1) \\(\\newcommand{\\blockindent}{\\hspace{0.5cm}}\\) "],["ManagingSimulations-1.html", "Section 12 Managing And Starting Simulations 12.1 Introduction 12.2 File Naming 12.3 Simulation Management 12.4 TUFLOW Executable Download 12.5 Running Simulations 12.6 Reproducibility of Results", " Section 12 Managing And Starting Simulations 12.1 Introduction This chapter provides guidance on model naming conventions and how TUFLOW’s powerful Variables, Events and Scenarios functionalities may be used to simulate any number of scenarios and events from a single control (.tcf) file. The latter part of the chapter discusses the installation of TUFLOW, the different TUFLOW dongle types and how to start a simulation, both as a standalone TUFLOW simulation and in conjunction with third-party software. Finally, there is a section on the reproducibility of results when using different hardware. 12.2 File Naming Each hydraulic modelling study can easily generate hundreds, if not thousands, of model input files in addition to a large number of check and result files. Devising a sound naming convention as part of the modelling process is key to modelling that is easily interpreted, logical, efficient, quick to error check and quality control, and provide traceability for quality assurance. The examples below are presented as guidance only. They demonstrate the progression of a simple model naming convention to a more complex version that incorporates different flood events and scenarios. The examples focus on the name of the .tcf control file, as this determines the prefix assigned to both the 1D and 2D check and result files. A general recommendation is to avoid long filenames and use acronyms where possible. For example, for a simulation of the Brisbane River for the existing topography for the 1 in 100, 12 hour duration flood event, “BR_Exg_100yr_12hr_001.tcf” is preferable to “Brisbane_River_Existing_100year_12hour_001.tcf”. Example 1 MODEL_001.tcf In its simplest form, the names of the majority of TUFLOW models consist of a few characters denoting the study name and a version number. The characters denoting the study name are typically included in all input files to specify that the files are unique or created for this study. The numbering is used to denote different versions of the model, where each time a change is made and the model re-simulated, the version number is incremented. Use of a model version numbering system ensures it is clear which model input files generated which model output files. This is particularly important when troubleshooting or quality controlling a model. Example 2 MODEL_0100F_001.tcf MODEL_1000F_001.tcf Most hydraulic modelling studies require the simulation of more than one event. In these cases, it is preferable to include the name of the event within the simulation name rather than simply incrementing the model version number. Note that the same number of characters is retained for the 100-year (0100F) and 1000-year (1000F) events and, in this case, the use of ‘F’ to denote a fluvial flood event. Retaining the same number of characters (for example, by using preceding zeroes) ensures that when the files are viewed in Windows Explorer, they are presented in ascending order. The model version number is the same in this example and tells the user that the same version of the model has been simulated for two different flood events. Refer to Section 12.3.2 which presents a method to model numerous hydraulic events using a single .tcf control file. Example 3 MODEL_0100F_EXG_001.tcf MODEL_0100F_PRP_001.tcf Many hydraulic modelling studies require the simulation of multiple scenarios, such as pre- and post-development scenarios or sensitivity testing where one or more model parameters are varied. Incorporating the name of the modelled scenario into the .tcf filename easily differentiates the output files associated with each scenario. The characters used to denote the scenario are typically also used for model input files specific to the scenario. For example, the post-development scenario ‘PRP’ may involve the raising of defences, hence the GIS layer used to raise the defences might be named ‘2d_zsh_MODEL_PRP_defence_001.shp’. The presence of this layer in a model simulation of the pre-development scenario ‘EXG’, will immediately highlight to the user that a mistake has been made. Refer to Section 12.3.3 which presents a method to model one or more scenarios using a single .tcf control file. 12.3 Simulation Management TUFLOW incorporates powerful functionality to manage the simulation of multiple events and multiple scenarios. The flexibility offered allows the user the ability to initiate all simulations using the one .tcf file should they so desire. Rather than create a new .tcf file for every simulation and a new .tgc and/or .ecf file for every different model scenario, it is possible to just have one of each of these files, or at least markedly reduce the number of these files. The example application described here uses a single set of control files to simulate 328,986 combinations of different model domains, events and scenarios. The following sections of the manual discuss the available options. 12.3.1 Time and Output Controls All time-dependent data must refer to an arbitrary time reference, which is defined by the simulation time commands: Start Time, End Time and Timestep in the .tcf file. The starting time and finishing times specify the period in hours for which calculations are made. If the Start Time or End Time is not defined, by default TUFLOW will use 0 hours and 1 hours respectively. The timestep is the calculation interval in seconds, which is dependent on various conditions as described in Section ??. For 1D/2D models, different timesteps may be used for both the 2D and 1D schemes. The output period is controlled by the times set using Start Map Output and Start Time Series Output for the 2D domains, and Start Output for the 1D domain. All outputs are limited to the period between these times and the end time. The output interval is defined by Map Output Interval and Time Series Output Interval for the 2D domains, and Output Interval for the 1D domain. The maximum and minimum hydraulic values can be determined using the Maximums and Minimums command for 2D domains (maximums and minimums are always output for 1D domains). Note: Maximum and minimum values are determined by tracking the model results every calculation timestep, not the output interval. 12.3.2 Events Most hydraulic modelling studies require the simulation of different probabilistic events. For example, a flood study may have to consider the 2, 5, 10, 20, 50, 100, 200 and 500 year Average Recurrence Interval events, and one or two extreme floods. Each, or most of these, may have to be simulated using a range of different duration rainfalls. A downstream boundary such as the ocean may also need to be varied to model different probability storm tides or climate change scenarios. The final number of simulations can easily be in the hundreds, if not thousands. The ability to simulate multiple events using a single .tcf control file not only makes management of the model easier, it also ensures consistency between the simulations and better quality control. Multiple events are set up through the creation of a TUFLOW Event File (recommended extension .tef) containing .tcf and .ecf commands that are particular to a specific event. The event specific commands are contained between Define Event and End Define commands. Global .tcf and .ecf commands can also be used by placing these commands outside the Define Event blocks (normally at the top). The .tef file is referenced in the .tcf file using the command Event File. Up to nine (9) different events can be specified for a single simulation, although in most cases only one or two is all that is needed. For example, a 100 year flood with a 10 year storm tide. The number of events in the .tef file is unlimited with the only limitation being the maximum of nine for the number of selected events per simulation. The .tef file should be viewed as a database of all the individual events that are or could be applied. To automatically insert the name of the event(s) into the output filenames to make the output files unique, place “~e~” or “~e&lt;X&gt;~” where &lt;X&gt; is from 1 to 9 into the .tcf filename. Note ~e~ is effectively the same as ~e1~ and is typically used if there is only one event type being varied. For example, MODEL_~e1~_~e2~_EXG_001.tcf can be configured to run any number of e1 and e2 events such as: e1=0100F and e2=12h results in MODEL_0100F_12h_EXG_001 e1=0100F and e2=24h results in MODEL_0100F_24h_EXG_001 e1=1000F and e2=12h results in MODEL_1000F_12h_EXG_001 e1=1000F and e2=24h results in MODEL_1000F_24h_EXG_001 Two options are available to run multiple events from the same .tcf file: Using a batch file (.bat): Specify the –e or –eX options (see Table 12.1) to run the multiple events using the same .tcf file – refer to the examples below. Using Model Events: Change the events manually before each simulation within the .tcf file. Note that if using the –e or -ex option, this will override any events defined using Model Events in the .tcf file. This option is particularly useful for carrying out quick what-if or sensitivity simulations. For example, do the results change if I halve the timestepping. The examples below show two approaches for running simulations for a 20 and 50 year flood and 1 and 2 hour duration storms. Example 1 just uses one event. Example 2 achieves the same outcome as Example 1, but by using two types of events (~e1~ and ~e2~) there is no need to repeat commands as is required for Example 1. In the examples below, note how the same command, in this case End Time, is used within the event blocks to assign a different simulation end time depending on the duration of the event. Also note the use of BC Event Source, which is a much more powerful alternative to using BC Event Text and BC Event Name, in that it can be used to define up to 100 different event text/name combinations instead of being limited to one. The linkages with the BC Database file key text fields are highlighted in yellow in the examples below. Note: The location of Event File within the .tcf file and the location of the commands within the .tef file are important. If, for example End Time occurs in the .tcf file after where Event File occurs, this latter occurrence of End Time will prevail over those specified in the .tef file. Essentially, the commands from the .tef file (for the events specified using the –e or -eX run options or Model Events) are inserted into the .tcf at the location of the Event File command, and are processed as if they are embedded into the .tcf file at that location. Note: To distinguish between 1D and 2D commands in a .tef file, prefix .ecf commands by “1D” followed by a space. In the examples below, the .ecf Output Folder command is used to set different folders for the 1D results depending on the event. Events Example 1: Within the BC Database file: Name,Source,Column 1,Column 2,Add Col 1,Mult Col 2,Add Col 2,Column 3,Column 4 C001,..\\Inflows\\_~ARI~_~durn~.csv,Time,C001 C002,..\\Inflows\\_~ARI~_~durn~.csv,Time,C002 … Include “~e~” in the .tcf filename, for example “Nile_~e~.tcf”, and add the following line: Event File == Nile_Events.tef The “Nile_Events.tef” file contains lines such as the below: !__________________________________________________________________________ ! Global Default Settings Start Time == 0 ! Unless Start Time is subsequently repeated all start at time 0 !__________________________________________________________________________ ! 20 year event definitions Define Event == 020y_01h       BC Event Source == ~ARI~ | 020y       BC Event Source == ~durn~ | 01h       End Time == 3       Output Folder == ..\\Results\\2d\\020y       1D Output Folder == ..\\Results\\1d\\020y End Define Define Event == 020y_02h       BC Event Source == ~ARI~ | 020y       BC Event Source == ~durn~ | 02h       End Time == 4       Output Folder == ..\\Results\\2d\\020y       1D Output Folder == ..\\Results\\1d\\020y End Define !__________________________________________________________________________ ! 50 year event definitions Define Event == 050y_01h       BC Event Source == ~ARI~ | 050y       BC Event Source == ~durn~ | 01h       End Time == 3       Output Folder == ..\\Results\\2d\\050y       1D Output Folder == ..\\Results\\1d\\050y End Define Define Event == 050y_02h       BC Event Source == ~ARI~ | 050y       BC Event Source == ~durn~ | 02h       End Time == 4       Output Folder == ..\\Results\\2d\\050y       1D Output Folder == ..\\Results\\1d\\050y End Define   Multiple events can be simulated from the one .tcf file using a batch file. Refer to Section 12.5.2 for details how to create a batch file. Below is a batch file example in its simplest form with no looping. set TUFLOWEXE=C:\\Program Files\\TUFLOW\\TUFLOW_iSP_w64.exe set RUN=start “TUFLOW” /low /wait /min “%TUFLOWEXE%” -b %RUN% –e 020y_01h Nile_~e~.tcf %RUN% –e 020y_02h Nile_~e~.tcf %RUN% –e 050y_01h Nile_~e~.tcf %RUN% –e 050y_02h Nile_~e~.tcf Events Example 2: Within the BC Database file: Name,Source,Column 1,Column 2,Add Col 1,Mult Col 2,Add Col 2,Column 3,Column 4 C001,..\\Inflows\\Nile\\_~ARI~_~durn~.csv,Time,C001 C002,..\\Inflows\\Nile\\_~ARI~_~durn~.csv,Time,C002 … Include “~e1~” and “~e2” in the .tcf filename, for example “Nile_~e1~_~e2~.tcf”, and add the following line: Event File == Nile_Events.tef The “Nile_Events.tef” file would contain lines such as the below: !__________________________________________________________________________________ ! Global Default Settings Start Time == 0! Unless Start Time is subsequently repeated all start at time 0 !__________________________________________________________________________________ ! ARI definitions Define Event == 020y | BC Event Source == ~ARI~ | 020y       Output Folder == ..\\Results\\2d\\020y       1D Output Folder == ..\\Results\\1d\\020y End Define Define Event == 050y | BC Event Source == ~ARI~ | 050y       Output Folder == ..\\Results\\2d\\050y       1D Output Folder == ..\\Results\\1d\\050y End Define !__________________________________________________________________________________ ! Storm duration definitions Define Event == 01h | BC Event Source == ~durn~ | 01h       End Time == 3       End Define Define Event == 02h | BC Event Source == ~durn~ | 02h       End Time == 4 End Define To run multiple events from the one .tcf file a .bat file may be used such as below (see Section 12.5.2): set TUFLOWEXE=C:\\Program Files\\TUFLOW\\TUFLOW_iSP_w64.exe set RUN=start “TUFLOW” /low /wait /min “%TUFLOWEXE%” -b %RUN% –e1 020y –e2 01h Nile_~e1~_~e2~.tcf %RUN% –e1 020y –e2 02h Nile_~e1~_~e2~.tcf %RUN% –e1 050y –e2 01h Nile_~e1~_~e2~.tcf %RUN% –e1 050y –e2 02h Nile_~e1~_~e2~.tcf If Event logic blocks are also permitted in the same manner as the If Scenario command. Refer to Section 12.3.3 for further information. Events are also automatically defined as variables and can be used, for example, to set the output folder name. See Section 12.3.4 for information on variables. 12.3.3 Scenarios The If Scenario feature controls the commands to be applied depending on the scenario or combination of scenarios specified by the user. Using If Scenario is similar to using If…Else If… Else…End If constructs in a programming or macro language. In Example 1 below, an If Scenario logic block has been inserted into a .tgc file: Scenarios Example 1: !__________________________________________________________________________________ ! Apply materials Set Mat == 1 ! Set unspecified materials to default of 1 Read GIS Mat == shp\\2d_mat_existing.shp ! Apply existing materials If Scenario == opA       Read GIS Mat == shp\\2d_mat_opA.shp ! Option A changes to existing materials End If TUFLOW will carry out the following steps: Set all material values over the entire 2D domain to a value of 1. Process the 2d_mat_existing.shp layer to assign material values from a layer of land-use polygons representing the existing situation. One of the following will then occur: If either “–s opA” was specified as a run option, or “Model Scenarios == opA” was specified in the .tcf file, then the 2d_mat_opA.shp layer is processed to modify the material values affected by the Option A scenario. If “~s~” or “~s1~” occurs within the .tcf filename, it is replaced by “opA” in the output filenames, otherwise “opA” is appended to the end of the .tcf filename for the output filenames. If opA was not specified as a scenario, this layer would be ignored. For example, as would be required if modelling the existing scenario. Example 1 can be extended to include an Option B, where Option B is a modified version of Option A as shown in Example 2a below: Scenarios Example 2a: Set Mat == 1 ! Set unspecified materials to default of 1 Read GIS Mat == shp\\2d_mat_existing.shp ! Apply existing materials If Scenario == opA | opB       Read GIS Mat == shp\\2d_mat_opA.shp ! Option A changes to existing materials End If If Scenario == opB       Read GIS Mat == shp\\2d_mat_opB.shp ! Option B changes to Existing and Option A End If In the above example, either “–s opB” or “–s1 opA –s2 opB” could be used for the run options when modelling the Option B scenario. An advantage of using the latter is the output files would be named “Nile_opA+opB” indicating that the simulation was for Option A plus Option B (which is the case as Option B builds upon Option A). If using Model Scenarios, the equivalent for “–s1 opA –s2 opB” would be “Model Scenarios == opA | opB”. However, if Option B was not a modification of Option A, but purely a change to the existing case the commands could be written as shown in Example 2b: Scenarios Example 2b: Set Mat == 1 ! Set unspecified materials to default of 1 Read GIS Mat == shp\\2d_mat_existing.shp ! Apply existing materials If Scenario == opA       Read GIS Mat == shp\\2d_mat_opA.shp ! Option A changes to existing materials End If If Scenario == opB       Read GIS Mat == shp\\2d_mat_opB.shp ! Option B changes to existing materials End If Alternatively, the following would give the same result: Set Mat == 1 ! Set unspecified materials to default of 1 Read GIS Mat == shp\\2d_mat_existing.shp ! Apply existing materials If Scenario == opA       Read GIS Mat == shp\\2d_mat_opA.shp ! Option A changes to existing materials Else If Scenario == opB       Read GIS Mat == shp\\2d_mat_opB.shp ! Option B changes to existing materials End If In the above, either “–s opB” or “Model Scenarios == opB” would be used when modelling Option B. If the Existing, Option A and Option B scenarios all had their own layer of materials for the whole model the commands could be laid out as shown in Example 2c, noting the use of the Else option which forces the use of the layer 2d_mat_existing.shp if opA or opB is not specified. Scenarios Example 2c: Set Mat == 1 ! Set unspecified materials to default of 1 If Scenario == opA       Read GIS Mat == shp\\2d_mat_opA.shp ! Option A materials for whole model Else If Scenario == opB       Read GIS Mat == shp\\2d_mat_opB.shp ! Option B materials for whole model Else       Read GIS Mat == shp\\2d_mat_existing.shp ! Existing materials for whole model End If Or, a more explicit approach to the above would be: Set Mat == 1 ! Set unspecified materials to default of 1 If Scenario == exg       Read GIS Mat == shp\\2d_mat_existing.shp ! Existing materials for whole model Else If Scenario == opA       Read GIS Mat == shp\\2d_mat_opA.shp ! Option A materials for whole model Else If Scenario == opB       Read GIS Mat == shp\\2d_mat_opB.shp ! Option B materials for whole model End If In the example above, to batch run the Existing, Option A and Option B scenarios the .bat file would be something like: set TUFLOWEXE=C:\\Program Files\\TUFLOW\\TUFLOW_iSP_w64.exe set RUN=start “TUFLOW” /low /wait /min “%TUFLOWEXE%” -b %RUN% –b -s exg Nile_~s~.tcf %RUN% –b -s opA Nile_~s~.tcf %RUN% –b –s opB Nile_~s~.tcf The If Scenario command can be nested up to 10 levels. The extract from a .tcf file of a complex model is shown below. The model is a combination of models that can be simulated at different resolutions and in different configurations depending on the simulation’s objective. Out of interest, the same .tcf file is used to simulate all historical and design flood events. The excerpt below shows the Casino township (Richmond River, Australia) sub-model able to be run at either a 20m or 60m resolution using the same .tcf file. The logic as to which other sub-models/boundaries the Casino sub-model needs is built into the .tbc file using nested If Scenarios. ##################### ### CASINO DOMAIN ### ##################### If Scenario == CAS ! Cell size dependent commands       If Scenario == 20m ! 20m grid Domain               Start 2D domain == CAS_20m                   Geometry Control File == ..\\model_CAS\\CAS_20m_001.tgc                   Timestep == 7.5               End 2D Domain       Else If Scenario == 60m ! 60m grid Domain               Start 2D domain == CAS_60m                   Geometry Control File == ..\\model_CAS\\CAS_60m_001.tgc                   Timestep == 20               End 2D Domain       Else             Pause == Should not be here - invalid CAS cell size scenario specified.       End If       ! Cell size independent commands       BC Control File == ..\\model_CAS\\CAS_001.tbc       Read GIS IWL == ..\\model_CAS\\2D_iwl\\2D_iwl_CAS_001.shp       ESTRY Control File == ..\\model_CAS\\CAS_001.ecf End If Of note is the Pause command can be used to pause TUFLOW whenever it is encountered. In the example above, the Pause command is used to pause the simulation and display the message shown as a cross-check that an appropriate cell size scenario has been specified. The user has the option to continue or discontinue the simulation via a dialogue window. Scenarios are also automatically defined as variables and can be used, for example, to set the output folder name. See Section 12.3.4 for information on variables. 12.3.4 Variables The Set Variable command can be used to set different values for the same variable. This command operates at a higher level than If Scenario or If Event logic blocks so that variables can differ within different scenarios/events. For example, in the case below the variable “2D_CELL_SIZE” is used to set both the grid output resolution and the cell size of the model. Variables are referenced within the control files by enclosing with “&lt;&lt;” and “&gt;&gt;” as in the examples below. Note: Set variable commands can only be specified in the .tcf or within a read file referenced from the .tcf. The variables can then be used in all control files (.tcf, .tgc, .tbc, .ecf, etc). In the .tcf file we have: If Scenario == 2m       Set Variable 2D_CELL_SIZE == 2 Else If Scenario == 5m       Set Variable 2D_CELL_SIZE == 5 End If … Grid Output Cell Size == &lt;&lt;2D_CELL_SIZE&gt;&gt; … And in the .tgc file we have: Cell Size == &lt;&lt;2D_CELL_SIZE&gt;&gt; The variable “2D_CELL_SIZE” centralises all of the scenario specific commands in the one location. For example, the timestep, log interval and cell size are all dependent on the scenario. If Scenario == 2m       Set Variable 2D_CELL_SIZE == 2       Set Variable 2D_TIMESTEP == 1       Set Variable Log_Interval == 60 Else If Scenario == 5m       Set Variable 2D_CELL_SIZE == 5       Set Variable 2D_TIMESTEP == 2.5       Set Variable Log_Interval == 120 End If In the .tgc we have the cell size command and in the .tcf we may have the following commands: Grid Output Cell Size == &lt;&lt;2D_CELL_SIZE&gt;&gt; Timestep == &lt;&lt;2D_TIMESTEP&gt;&gt; Screen/Log Display Interval == &lt;&lt;Log_Interval&gt;&gt; The use of variables allows the scenario specific commands to occur in a single logic block rather than having multiple If..Else If.. End If blocks of commands. This can optionally be moved into a Read File command. Read File == Cell_Size_Commands_001.trd Any scenarios and events are automatically set as a variable that can be used within your control files. For example, if your model results are to be output to different folders depending on Scenario 1 (~s1~), enter the following into the .tcf file noting the use of &lt;&lt; and &gt;&gt; to delineate the variable name. Output Folder == ..\\results\\&lt;&lt;~s1~&gt;&gt; In the case above, if Scenario ~s1~ is set to “OpA”, TUFLOW automatically sets a variable named “~s1~” to a value of “OpA”, and the output will be directed to ..\\results\\OpA. As an extension to the example above, if the output folder is to also include the first event name, which, for example, is the return period of the flood, the following could be used: Output Folder ==..\\results\\&lt;&lt;~e1~&gt;&gt;_&lt;&lt;~s1~&gt;&gt; If Event ~e1~ is set to “Q100”, the output will be directed to ..\\results\\Q100_OpA. 12.4 TUFLOW Executable Download 12.4.1 Overview and Where to Install The TUFLOW release consists of two different versions of the executable as follows: TUFLOW_iSP_w64.exe TUFLOW_iDP_w64.exe The naming convention for each executable is explained in . Each version has associated TUFLOW .dll and .ptx files, and several system .dll files. For each version all .exe, .dll and .ptx files must be placed in the same folder and kept together at all times. Older versions of TUFLOW may not have any .ptx files (these are associated with GPU based simulations. When replacing with a new build, archive the files by creating a folder of the same name as the Build ID (e.g. 2023-03-AD), and place all files in this folder. The Build ID includes the acronym and appears in the top bar of the Console window, in the .tlf file and elsewhere. For example, if running the single precision, Windows 64-bit version, the Build ID would be “2023-03-AD-iSP-w64”. Older builds can always be setup in a similar manner by placing the build in its own folder, if they are needed for running legacy models. Model TUFLOW Build or a combination of Model TUFLOW Release, Model Precision and Model Platform can be used to force a simulation to use a specific TUFLOW build, release, or precision (SP or DP). This can be very useful for ensuring a consistent TUFLOW build/release/version is used for a project. It is recommended that a folder structure such as shown below is used. If an update (patch) is issued, archive the old build by moving all files to a separate folder or .zip file, and copy in the new TUFLOW files. This way, batch files, text editors and GIS packages that are used to start TUFLOW simulations will access the latest build. Previous versions can still be used if required. Figure 12.1: TUFLOW Engine Files Running TUFLOW is carried out by initiating the TUFLOW_X.exe file using one of the approaches discussed in Section 12.5.2. The system .dll files are required for the following purposes: TUFLOW_LINK_X.dll allows other schemes such as 12D DDA, FloodModeller 1D, EPA SWMM and XPSWMM to dynamically link with TUFLOW. TUFLOW_USER_DEFINED_X.dll allows users to customise TUFLOW to suit their purposes (see Section 12.4.3). TUFLOW_AD_X.dll contains the AD (advection-dispersion) module algorithms. TUFLOW_MORPHOLOGY_X.dll contains the morphology module algorithms. These are deprecated and retained for backward compatibility. Other supplied .dlls are system DLLs required by TUFLOW. A number of .ptx files are required to run TUFLOW HPC/Quadtree simulations on a GPU card, these are:- hpcKernels_nSP.ptx hpcKernels_nDP.ptx qpcKernels_nSP.ptx qpcKernels_nDP.ptx As a general rule, once a build is over three years old, it is no longer supported. It can still be used, but there is no guarantee that older builds will recognise newer dongles or are updated with bug fixes. 12.4.2 Single and Double Precision When storing floating point values on a computer, a certain number of bytes per value is needed. Single precision numbers use 4 bytes and double precision 8 bytes. This will yield from 6 to 9 digits of precision for single precision and 15 to 17 digits for double. TUFLOW Classic and TUFLOW HPC are available in both single precision and double precision, however, the reasons why you would use double precision instead of single are somewhat different for the two solvers. 12.4.2.1 TUFLOW Classic Being an implicit matrix based solution, TUFLOW Classic solves for water levels rather than depths. The affect of this is best illustrated by an example. Consider a model where the highest ground level is under 10mAD. If a tiny amount of rainfall falls on the cell, this might raise the water level in the cell to 5.000001mAD. Both single and double precision will handle the accuracy needed as the resulting water level falls within the acceptable number of significant figures for both precisions. However, consider another model with much higher elevations, and a cell that has a water level of 1000.000mAD. If this cell receives 0.000001m of rainfall in one timestep, for single precision the resulting water level will be 1000.000mAD (i.e. the added rainfall has disappeared resulting in an incorrect calculation and associated mass error). However, for double precision the resulting water level is 1000.00000100000, which is the correct water level and mass is conserved. The need to use double precision for Classic also depends on other factors such as cell size and timestep. As there is no simple rule-of-thumb, the recommended action is to run the model in single and double precision modes. If the results are unacceptably different, and especially if the mass error is significantly lower in double precision, then double precision should be used. Note that the choice of single or double precision also impacts on simulation times and RAM allocation. iDP versions of TUFLOW Classic will take approximately 25% longer to run and require up to twice as much memory, limiting the ability to run concurrent simulations. Refer to Sections ?? and ?? for further information. Therefore, if the results of a model run in both iSP and iDP versions are consistent, the iSP version of TUFLOW is recommended to take advantage of the faster simulation times and smaller memory footprint. 12.4.2.2 TUFLOW HPC Being an explicit solution, the calculation method in TUFLOW HPC uses depth, unlike TUFLOW Classic which uses water level as discussed above. This means that precision issues associated with, for example, applying a very small rainfall to a high elevation are not applicable in TUFLOW HPC, resulting in most models being accurately solved using single precision. However, carrying out simulations in single and double precision and checking for consistency is still a recommended task, especially if the simulation is using for example, very small inflows or other metrics that are unusually fine-scale. Unless testing shows otherwise, use the single precision version for all TUFLOW HPC simulations. Note: Double precision solutions on GPU cards can be four times slower than single precision on some GPU devices! If the TUFLOW HPC simulation is started with the single precision version of TUFLOW, the HPC solver will utilise a single precision version. If the simulation is started with the double precision version of TUFLOW, error message ERROR 2420 will be output by default stating that the single precision version should be used. This can be overridden by using the HPC DP Check == OFF command. 12.4.3 Customising TUFLOW using TUFLOW_USER_DEFINED.dll The TUFLOW_USER_DEFINED.dll is a legacy feature for TUFLOW Classic that was primarily used for customising hazard category outputs and is no longer supported as the same service cannot be offered for HPC given its GPU code base. Note: For customising hazard category outputs, see ???. 12.5 Running Simulations 12.5.1 Dongle Types and Setup BMT dongles are generally distributed as a WIBU Codemeter (metal) dongle or software licence. These dongles were introduced in 2010. The older ‘SoftLok’ dongles are no longer supported. Two types of licences are currently provided: Local or Standalone Licence – Allows up to a specified limit the number of TUFLOW simulations to be run from the one computer. For example, a Local 1 licence will allow a single simulation to be performed on the machine. A local 4 licence allows up to 4 concurrent simulations. Local 1 to Local 16 licences can be configured. Network Licence – allows for multiple TUFLOW processes running at any one time across multiple machines within the limitations of the TUFLOW EULA. For example, a Network 5 licence allows up to 5 concurrent simulations to be performed. This could be 5 simulations on a single computer, 5 simulations with each one on a different computer, or anything in between. Refer to the installation instructions on the TUFLOW Wiki for both types of dongles. 12.5.1.1 Protocols for Accessing Dongles If more than one type of dongle is available the protocols for taking and checking licences are: WIBU Codemeter licences are searched for, and if a licence is free it is taken. If no licence is available, you can optionally set for TUFLOW to continue to try and find an available WIBU dongle licence. This is achieved using the “C:\\BMT\\TUFLOW_Dongle_Settings.dcf” file described below. This is useful if there are no free licences and you wish to start a simulation (the simulation will start once a free licence becomes available). Once a simulation is under way, and if the licence is lost, TUFLOW will try to regain a licence, but it cannot switch to a different dongle type / provider. For example, a WIBU dongle can’t be used to finish a simulation if it is started with another WIBU dongle which is removed. There are five varieties of licence type / vendor: BMT physical USB lock (dongle) BMT software lock (tied to a particular machine) Aquaveo (SMS) USB lock Jacobs (Flood Modeller) USB lock Jacobs (Flood Modeller) software lock With numerous licencing options available, setting the preferred licence type can (slightly) speed the simulation start-up. The licence search order can be set via a licence control file “TUFLOW_licence_settings.lcf”, this replaces the TUFLOW_Dongle_Settings.dcf. Note that this file can occur in several locations. When looking for a licence setting file TUFLOW searches in the following locations: A “TUFLOW_licence_settings.lcf” in the same location as the TUFLOW executable. A “TUFLOW_licence_settings.lcf” in a TUFLOW folder in the “ProgramData” environment variable location. By default this will resolve to C:\\ProgramData\\TUFLOW\\TUFLOW_licence_settings.lcf. Entering %programdata% into the windows explorer path will take you to the location. C:\\BMT\\TUFLOW_Licence_Settings.lcf C:\\BMT\\TUFLOW_Dongle_Settings.dcf If no licence settings files are found, TUFLOW defaults to the order listed above. WIBU Firm Code Search Order can be used to control the search order in the TUFLOW_licence_settings.lcf file. Note: Use of C:\\BMT\\ above is for legacy reasons and is not recommended as read/write access to local drives is now often blocked for protection against hackers. 12.5.1.2 TUFLOW_Licence_Settings.lcf File The TUFLOW Licence Settings (.lcf) file can be used to set WIBU settings, such as retry time interval and count. It has the same form and notation as a TUFLOW .tcf file. Note: This file is optional and if not found the settings below are the default. ! Use this file to set general and WIBU specific dongle parameters ! Use ! or # to comment out commands or make comments Simulations Log Folder == C:\\ProgramData\\TUFLOW\\\\log ! Path or URL to global .log file WIBU Retry Time == 60 ! seconds. Values less than 3 are reset to 3. Default = 60. WIBU Retry Count == 0 ! Use -1 for indefinitely. WIBU Dongles Only == OFF ! If ON, searches for WIBU dongles only. Default is OFF. Simulations Log Folder sets the folder path or URL to a folder for logging all simulations. If the keywords “DO NOT USE” occur within the folder path or URL, this feature is disabled. Also see Simulations Log Folder. WIBU Retry Time sets the interval in seconds for retrying to take a licence or regain a lost licence. The default is 60 and values less than 3 are set to 3. WIBU Retry Count sets the number of times to retry for a licence at the start of a simulation. By default, if a licence is lost during the simulation, TUFLOW tries indefinitely to regain a licence so as not to lose the simulation. WIBU Dongles Only if set to ON will force TUFLOW to only search for WIBU dongles. 12.5.1.3 Dongle Failure during a Simulation If TUFLOW fails to recognise a network lock during a simulation (e.g. the network dongle server computer is down) it enters a holding pattern and continues trying until a license is found. For local, standalone locks, TUFLOW prompts with a message that the lock could not be found. If it’s a USB lock try a different USB port, and press Enter to continue. 12.5.2 Starting a Simulation There are a number of ways TUFLOW can be started, in each case the TUFLOW executable is started with the TUFLOW control file (.tcf) as the input argument. There are a number of optional switches that can be specified when starting a simulation; these are outlined in ???. Starting a TUFLOW simulation can be carried out in a multitude of methods: From within a text editor such as Notepad++ Through a batch file From within your GIS software: QGIS via the QGIS TUFLOW Plugin ArcMap via the use of the ArcTUFLOW toolbox MapInfo (through the MiTools add-on) From a Console (DOS) Window Via the right mouse button in Microsoft Explorer Via a runner such as the TUFLOW Runner or TRIM This section of the manual only provides detailed instructions on initiating simulations through batch files as it is the most effective method to run several or many simulations. Instructions on all methods have been described on the TUFLOW Wiki. 12.5.2.1 Batch File Example and Run Options (Switches) A batch file is a text file that contains a series of commands or instructions that is read by the Windows Operating System. The batch file requires the extension .bat to be recognised by Windows. The simplest format of a TUFLOW batch file is to specify a single simulation. This is of the format: &lt;TUFLOW Executable&gt; &lt;TUFLOW Control File&gt; For example: C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe MR_H99_C25_Q100.tcf The .bat file is run or opened by double clicking on it in Windows Explorer. This opens a Console Window and then executes each line of the .bat file. The above batch file will start the TUFLOW executable with the control file “MR_H99_C25_Q100.tcf” as the input file. As the control file argument does not have a file path, the batch file must be located in the same folder as the .tcf file. This could also include a relative or absolute file path, for example in the batch file line below, the batch file could be stored in any folder as the absolute file path is used. As outlined in Section ??, the relative file path is recommended for TUFLOW modelling inputs. C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe C:\\Example\\MR_H99_C25_Q100.tcf To start multiple simulations one after the other, these can be listed in succession. C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe –b MR_H99_C25_Q100.tcf C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe –b MR_H99_C25_Q050.tcf C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe –b MR_H99_C25_Q020.tcf pause Note the use of the –b (batch) switch, which suppresses the need to press the return key at the end of a simulation. This ensures that one simulation proceeds on to the next without any need for user input. The pause at the end stops the Console window from closing automatically after completion of the last simulations so you can check the status of the simulations. The –t (test) switch is very useful for testing the data input without running the simulation. It is good practice to use this switch before carrying out the simulations, as this will tell you whether there are any data input problems. The –t switch runs TUFLOW to just before it starts the hydrodynamic computations. Using the example above, the recommended approach is to first run the following batch file: C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe -b –t MR_H99_C25_Q100.tcf C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe -b –t MR_H99_C25_Q050.tcf C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe -b –t MR_H99_C25_Q020.tcf pause This will indicate any input problems (note some WARNINGS do not require a “press return key”, but they can be located in the .tlf file). From TUFLOW version 2018-03-AA, it is possible to use the test model option without using a TUFLOW licence noting no diagnostics are reported so don’t use this option whilst you are developing/building a model. To utilise this licence free test, the -nlc (No Licence Check) input argument must be specified, e.g. the command line below would run the model in test model (-t) without needing a licence (-nlc): C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe -b –t -nlc MR_H99_C25_Q020.tcf To carry out the simulations the –t can be removed (and -nlc flag if used) or replaced with the –x (execute) switch. The -x switch is optional, but is useful when editing the .bat file to quickly change between –t and –x switches. C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe -b –x MR_H99_C25_Q100.tcf C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe -b –x MR_H99_C25_Q050.tcf C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe -b –x MR_H99_C25_Q020.tcf pause Comment lines are specified in a .bat file using “REM” (remark) in the first column. Alternatively, “::” has a similar effect. See also https://ss64.com/nt/rem.html. For example, if you want to re-run only the first simulation in the examples above, edit the file as follows: C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe -b –x MR_H99_C25_Q100.tcf :: C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe -b –x MR_H99_C25_Q050.tcf :: C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe -b –x MR_H99_C25_Q020.tcf pause Table 12.1 below describes other switches that are available. The switches are also displayed to the console if TUFLOW.exe is executed without any arguments (i.e. double click on TUFLOW.exe in Windows Explorer). Any of the options can be prefixed by a: “-” (short dash or minus sign); “-” (long dash); or “/” (forward slash) For example, to start a model in batch mode, the following all perform the exact same function: C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe -b MR_H99_C25_Q100.tcf C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe –b MR_H99_C25_Q100.tcf C:\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe /b MR_H99_C25_Q100.tcf Table 12.1: TUFLOW.exe Options (Switches) Switch Description -acf Automatically create folders (the default). Prevents the dialog prompt from appearing when encountering non-existent folders (ie. results folders), and creates these folders automatically. If for any reason the folder can’t be created, a dialog will appear. -b Batch mode. Used when running two or more simulations in succession from a .bat file (see Section 12.5.2.1). Suppresses display of the TUFLOW “simulation has finished” dialogue window, or a request to press Enter at the end of a simulation, so that the .bat file can continue onto the next simulation. -c Optional additional flags of “a” , “L”, “p” or “ncf”. (e.g. -c, -cap, -cpncf, -cncf) A copy of a TUFLOW model can be created as described below. Making a copy of a model is useful for transferring a model to another site or for making an archive of the input data. Also see the -pm (package model) option as an alternative. To copy a TUFLOW model, the -c switch must be included on the TUFLOW command line, as a minimum. The -c switch copies only the files read by TUFLOW. Therefore, for MapInfo users, the .mif and .mid files read by TUFLOW will be copied. To copy the remaining MapInfo format files (.tab, .id, .dat and .map) use the -ca option described further below. Additional optional flags can be added to the base -c switch, in any combination, including: “a” (all); “L” (list); “p” (path); and “ncf” (no check files). The addition of the “a” flag (e.g. -ca) copies all files of the same name for all input files (i.e. same name, but different extensions). This option is particularly useful if the .tab and other associated files of a GIS layer need to be archived or delivered. The addition of the “L” flag will output the files used by TUFLOW into a .tcl (TUFLOW Copy List) file but not copy the files to a destination folder. This can be useful if scripting the copying of models. To run the copy list the character “L” needs to be specified after the -c input argument. This works for all copy options, for example the following are all valid; -cL, -caL -capL. The .tcl file produced is output in the same directory as the .tcf and takes the simulation name. The addition of the “p” flag (e.g. -cp) allows the user to specify an alternate path in which to copy the model. Without this flag, the location defaults to the .tcf’s location. For example, specifying the following, will place a copy of the model into a folder C:\\put_model_here: “TUFLOW.exe” -cp “C:\\put_model_here” “C:\\TUFLOW\\runs\\M01_5m_003.tcf” The addition of the “ncf” flag (e.g. -cncf) copies the essential input files and excludes all check files. Note that these optional flags can be added in any combination to the base -c switch (e.g. -c, -ca, -cp, -cncf, -cap, -cancf, -cpncf, -capncf). Specifying -c on the TUFLOW command line creates a folder “\\(\\lt\\).tcf filename\\(\\gt\\)_copy” (or “\\(\\lt\\).tcf filename\\(\\gt\\)_copy_all” if the “a” flag is added) in the same location as the .tcf file. Under the folder, input files are copied (including the full folder structure), and any check files and output folders created. For example, specifying: TUFLOW.exe -c “C:\\tuflow_models\\my model.tcf” will make a copy of the TUFLOW model based on the file “my model.tcf” in a folder “my model.tcf_copy”, or “my model.tcf_copy_all” if using the “a” flag. Notes: Use the full path to the .tcf file (this is generally the default if running from an editor such as UltraEdit or using the right click approach). Make sure there is sufficient disk space (no checks for sufficient disk space are made). Output folders and some output files are created but these will be empty. Unless the -ncf option is used, any check folder(s) are created and check files written (these can be deleted if wishing to minimise the size of the folder). The full path of the input files is reproduced to provide traceability and also handle inputs from other drives and URLs. Drive letters are replaced, for example, “C:” becomes a folder “C Drive”. URLs (denoted by “\\” or “//” at the beginning of the path) are replaced by a folder called “URL\\”. To run the copied .tcf file, it will be necessary to change any non-relative pathnames according to the point above. Alternatively you can share and then map, for example, the “D Drive” folder as “D:”. If using MapInfo formats, the Check MI Save Date will need to be set to WARNING or OFF in the .tcf file if the –ca option has not been used as the .tab and other files will not have been copied. There is a limit of 1,000 characters (including spaces) on pathnames. As very long pathnames can result due to the above approach, if the number of characters exceeds 1,000, problems may occur. The -c switch automatically invokes the -t (i.e. the simulation does not commence, only the input data is tested/checked). The -b option still applies if several models wish to be copied using a batch (.bat) file. -e &lt;name&gt; -e{1-9} &lt;name&gt; Specifies an event name to be used by Define Event in a .tef Event File to customise inputs for an event. There must be a space between –e and &lt;name&gt;. &lt;name&gt; may itself contain spaces, but if it does the event name must be enclosed in quotes. More than one (up to a maximum of nine) events per simulation may be specified by placing a number after –e. –e and –e1 are treated the same (don’t specify both of them otherwise indeterminate results may occur). Also see Section 12.3.2 and Model Events. Examples: –e Q100 Run the Q100 event. –e1 Q100 –e2 02h Run the Q100, 2 hour storm event. –e Q100 –e2 02h Same as above. –e “100 yr” Run the event name “100 yr” noting quotes required as there is a space in the name. -et The end time for a simulation can be specified using the run option -et&lt;time_in_hours&gt;. Any end time specified via this run option argument is given the highest priority and overrides the End Time settings in the .tcf, event files (.tef) and override files. -nc The use of the -nc (no console) switch suppresses the appearance (hides) the console window (Section ??). You won’t be able to see the simulation running, however there will be a TUFLOW process visible in Windows Task Manager. The -nc switch automatically invokes the -nmb and -b switches. The “start” command included in the Advanced Batch File examples in Section 12.5.2.3 should not be used with the -nc command. It is strongly recommended to redirect standard console window output to a text file. It’s recommended that this file be given a unique name for each run, matching your simulation. “…TUFLOW.exe” –nc my_run.tcf &gt; my_run.txt Build 2018-03-AB included some enhancements when running with the -nc (no console option). These were designed to remove any need for user input to TUFLOW as follows: If no .tcf is specified, no licence check is performed and the simulation is halted. Previously a licence check was performed and the user was prompted to hit a key to release licences and close the simulation. If an invalid .tcf file is specified, the simulation stops and returns an error level of 1 to the operating system. Previously the user was prompted to enter a valid .tcf filename. If the set log path (-slp) is specified in conjunction with the no console option (-nc) the simulation stops and returns an error level of 1 to the operating system. Previously the user was prompted to confirm the set log path. Removed a number of locations where a simulation could pause and wait for a user input before closing. -nlc For Build 2018-03-AA or later it is possible to use the copy model (-c option) or test model (-t option) without using a licence. To utiltise this licence free copy / test, the -nlc (No Licence Check) input argument must be specified. If running without a TUFLOW licence no diagnostic output is generated (e.g. messages layer). If these are required, the -nlc option must be removed. -nmb No Message Boxes. Suppress use of windows message boxes to prompt the user. All prompts will be via the console window. -nq The use of the -nq (no queries) switch prevents the termination query dialog from displaying when Ctrl+C is pressed to terminate a simulation cleanly. If –nq is specified and Ctrl-C is pressed, the simulation terminates cleanly without a query dialog to check you are certain, so be careful! -nt Sets the number of CPU threads (cores) to use for a TUFLOW HPC simulation. Noting that the number of threads requested is limited to the maximum number of CPU cores available on the machine, and the available TUFLOW Thread licences. -nwk Force TUFLOW to search for a network licence (i.e. skip the search for a local licence). -od&lt;drive&gt; The Output Drive for a simulation can be specified with the –od command line option.  For example –odC will redirect all outputs to the C:\\ drive. -oz &lt;name&gt; Map output includes Output Zone &lt;name&gt;. For more information on Output Zones, please refer to Section??. For example “-oz ZoneA” would include output for Zone A, similar to the .tcf command: Model Output Zones == Zone A. -pm The package model (-pm) function copies all input files for all events and scenarios defined in the model. Unlike the -c option, -pm does not read and process the data during the file copy. As such it is substantially faster than -c.  The package model function does not require access to a TUFLOW licence. Optional switches are: “All” (e.g. -pmAll) copies all file extensions (e.g. 1d_nwk_culv_L.mif, will become 1d_nwk_culv_L.*). “L” (e.g. -pmL) list the files to be copied into an output file, but doesn’t copy the files. “ini” (-pmini &lt;file.ini&gt;) provides a .ini file with user defined options as described below. Combinations of the above are also valid, with the order of the optional switches not being important (-pmAllL would be treated the same as -pmLAll). Three options are also available for handling of the binary processed files created by TUFLOW to speed up the simulation start. These options are: -xf0: Do not copy .xf files, only the original inputs are copied. -xf1: Copy both raw input files and .xf files. -xf2: Copy only .xf files, if xf files exist for an input only the xf file will be copied. For example, the command line below will package the model but not include any .xf files. TUFLOW_iSP_w64.exe -pm -xf0 PR_~s1~_~e1~_~e2~_001.tcf When using package model the default destination folder is created in the same directory as the .tcf file, with the prefix “pm_”. For example, C:\\Projects\\Modelling\\TUFLOW\\runs\\Run_001.tcf will create a package in the folder “C:\\Projects\\Modelling\\TUFLOW\\runs\\pm_Run_001”. A .ini file can be used to overwrite the default base and destination folders. A .ini file is specified by including the optional ini argument after -pm followed by the ini file name. For example: TUFLOW_iSP_w64.exe -pmini package.ini PR_~s1~_~e1~_~e2~_001.tcf Valid commands in the .ini file are: Base Folder == &lt;folder&gt; Copy Destination == &lt;folder&gt; Model Scenario ~s&lt;number&gt; == &lt;scenario a&gt; | &lt;scenario b&gt; | … Model Event ~e&lt;number&gt; == &lt;event a&gt; | &lt;event b&gt; | … Max Event Name == &lt;number&gt; &lt;/file.ini&gt; -pu &lt;id&gt; Used to select which processing units to direct the simulation towards. At present this only applies to the HPC GPU solver where a simulation is to be directed to a particular GPU card or cards. –pu must be specified once for each device. For example, to direct the simulation to GPU devices 0 and 2, specify –pu0 –pu2. Can be used in place of the .tcf command GPU Device IDs. Note that the numbering starts at 0 for GPU devices. Override files (see Section ??) can be used to control the device ID’s used by a range of computers accessing the same control file. -qcf Query the creation of a folder. If you would prefer to have the create folder query dialog to appear (rather than TUFLOW automatically creating folders - see -acf), you can specify the –qcf run time option. -s &lt;name&gt; -s{1-9} &lt;name&gt; Specifies a scenario name to be used by If Scenario blocks to include/exclude commands. There must be a space between –s and &lt;name&gt;. &lt;name&gt; may itself contain spaces, but if it does the scenario name must be enclosed in quotes. More than one (maximum of nine) scenarios per simulation maybe specified by placing a number after –s. –s and –s1 are treated the same, so don’t specify both of them otherwise indeterminate results may occur. Also see Section 12.3.3 and Model Scenarios. Examples: –s exg Process all exg scenario commands. –s1 opA –s2 opB Process all opA and opB scenarios. –s opA –s2opB Same as above. –s “Option A” Quotes required as there is a space in the scenario name. -slp Simulation Log Path is a legacy option for Softlok (blue) dongles to set the path to a folder on the intranet to log all simulations initiated from the lock. Refer to the 2018 manual or earlier for details. (See Section 12.5.1.2 for equivalent option for WIBU Codemeter licences, and also Simulations Log Folder.) -st The start time for a simulation can be specified using the run option -st&lt;time_in_hours&gt;. Any start time specified via this run option argument is given the highest priority and overrides the Start Time settings in the .tcf, event files (.tef) and override files. -t Test input only. Processes all input data including writing of check files, but does not start the simulation. Useful for checking that simulations in a .bat file all initialise without error, prior to carrying out the simulations (especially when the runs will take all night or all weekend and you made a change you forgot to test!). -wibu Search for a WIBU Codemeter licence only. -x eXecute the simulation (the default). 12.5.2.2 Copy/Package Model from Batch Files TUFLOW can be run in copy mode, which can be useful for transferring a model to another site or for making an archive of the input data. To copy a TUFLOW model, the -c switch must be included on the TUFLOW command line. The -nlc (no licence check) flag can be used to copy a model without the need for a TUFLOW licence. Further details can be found here. A licence free package model function that copies all input files for all events and scenarios defined in the model is also available using the -pm switch. If only a single set of events and scenarios is required, -c is preferable. Unlike the -c option, -pm does not read and process the data during the file copy, as such it is substantially faster than -c. The package model function does not require access to a TUFLOW licence. More information on the Package model function can be found here. 12.5.2.3 Advanced Batch Files Batch files can be set up so that they are more generic and easily customised when moving from one project to another. Within the example below, a variable, TUFLOWEXE, is used to define the path to the TUFLOW executable, and a variable RUN is used to incorporate options such as starting the simulation on a low priority and to minimise the console window when the process starts (/min option). set TUFLOWEXE=C: Files\\TUFLOW\\2023-03\\TUFLOW_iSP_w64.exe set RUN=start “TUFLOW” /low /wait /min “%TUFLOWEXE%” -b %RUN% MR_H99_C25_Q100.tcf %RUN% MR_H99_C25_Q050.tcf %RUN% MR_H99_C25_Q020.tcf The advantage of using variables in batch files is if the path to the TUFLOW executable changes, or to run a different version of TUFLOW, it is just a simple single line change in the batch file. In the above, note the use of quotes around %TUFLOWEXE% in the definition for the RUN variable – quotes are needed around file path names whenever they contain a space. Also note there is no space between the variable name and the equals sign. For examples of batch files used for running multiple events and different scenarios from the same .tcf file, see Sections 12.3.2 and 12.3.3. It is also possible to create control logic such as loops in a batch file. For example, this could be used to loop through a large number of events and scenarios such as the example here. :: This sets the variables as local, another batch file can use the same variables SetLocal :: Set up variables set TUFLOWEXE=C:\\Program Files\\TUFLOW\\Releases\\2023-03\\TUFLOW_iSP_w64.exe set RUN=start “TUFLOW” /low /wait /min “%TUFLOWEXE%” -b set A=Q010 Q020 Q050 Q100 Q200 set B=10min 30min 60min 120min 270min :: Loop through each simulation FOR %%a in (%A%) do (       FOR %%b in (%B%) DO (               %RUN% -e1 %%a -e2 %%b filename_~e1~_~e2~.tcf                           )                   ) pause Further guidance on advanced batch files, including looping examples can be found on this page of the TUFLOW Wiki. 12.5.3 Using TUFLOW FV with SMS When running TUFLOW from SMS, SMS by default looks for a TUFLOW.exe in the installation folder. To change this to the location where you have placed the TUFLOW.exe and .dll/.ptx files, go to the Edit, Preferences, File Locations tab as shown in Figure 12.2. Figure 12.2: SMS Settings 12.5.4 Optimising Startup and Run Times MJS can add info about cell elevation file here and other items to help with model startup… Regardless of the method for initiating a TUFLOW simulation, a simulation start stats file (_start_stats.txt) is output to the same location as the .tlf file. This file contains information on the total time and the time elapsed for each stage of model initialisation. This can be used to identify the stages causing slow simulation start-up. If you have a problematic (slow starting) model, please email this file and corresponding .tlf file through to support@tuflow.com. From the 2018-03-AA release, a new output file is created named “_run_stats.txt”. This file contains the amount of time that TUFLOW spends in the 1D and 2D computations. At each mass balance output interval, the percentage of the total computational effort that TUFLOW has spent in 1D calculations, 2D calculations and other is output to the run_stats file. The “other” column includes a variety of tasks that are neither 1D or 2D computations, such as writing of outputs, and transfer of data to GPU (if running on GPU devices). “Other” also includes time spent within an external 1D solver. 12.5.4.1 Improved pre-processing of 1D Model Inputs For the 2020-01 release, reading and processing of 1D inputs has been significantly improved, particularly for large urban drainage models (&gt;1,000 1D pipe network elements). For a tested model with 25,000 1D channels, the start-up was approximately 40 times faster with the 2020-01 release compared to the previous 2018-03 release changing the start-up time from nearly two hours to less than 3 minutes. No changes in model files is required to implement this improved pre-processing time. 12.5.4.2 Parallel Processing for SGS initialisation With the default SGS Method C (the default if SGS == ON”), the SGS elevations are retained in memory throughout the pre-processing stage, with the generation of the storage and face hydraulic data curves occurring only once at the end of the pre-processing. This is a computationally intense exercise, particularly for large models with small SGS sample distances. To speed up model initialisation, this has been parallelised to utilise multiple CPU cores. By default, all CPU threads will be used for final SGS elevation pre-processing unless the number of threads (-nt[thread count]) command line argument has been specified. For example, to run on 8 threads the command line argument “-nt8” would be used. There is no check for thread licensing used for pre-processing. If the number of threads specified in the command line argument exceeds the number of threads available, all threads are used. At the end of the .tgc file, after all elevation datasets have been processed, an XF file is written if the XF Files command is set to on (default). The XF file is written to an “xf” folder, which sits in the same location as the .tgc. The XF file is then used for any subsequent simulations for optimised pre-processing performance. To avoid re-processing when changes are made to .tgc data other than elevation (e.g. active cells, materials, soils, etc.), the XF file is not written with the same filename as the .tgc. Instead, the .xf will be prefixed by “hpc” or “qdt” for HPC single grid and Quadtree simulations respectively and includes the nesting level and cell size. Any text set with the .tcf command XF Files Include in Filename is included. When reading the pre-processed SGS XF file, a check is done on the final SGS elevations, if these are consistent then the XF file is used. 12.5.4.3 Optimising Multi-GPU Performance (HPC Only) If a model is simulated across multiple GPU devices, one of the devices (usually the one with the most wet cells) will be controlling the speed of the simulation and the other devices will be underutilised. By default, TUFLOW HPC divides a model equally over multiple GPU devices. However, for real-world models, it is usual for the GPUs to have an inequitable amount of workload due to the number of active cells and number of wet cells, and this can change throughout the simulation as the model wets and dries. From the TUFLOW 2020-01 release it is possible to distribute the workload unequally to the GPU devices. During a simulation the workload efficiency of each GPU is output to the console and to the .tlf file with a suggested distribution provided at the end of the simulation. A number of iterations may be required to fully optimise the distribution. For example, a model simulated across four GPU devices reported at the end of the simulation in the .tlf file: - Relative device loads: 60.3% 100.0% 83.7% 53.2% - HPC Suggested workload balance HPC Device Split == 1.23, 0.74, 0.89, 1.40. The command HPC Device Split == 1.23, 0.74, 0.89, 1.40 was added to the .tcf file for the next simulation producing the improved device workload efficiencies below and a 20% faster run time. Relative device loads: 100.0% 96.1% 96.8% 94.6% Note: The benefit depends on the model, but if you have a significant variation in workload efficiencies between GPU devices this feature should provide a noticeable decrease in run times. 12.5.5 Auto Terminate (Simulation End) Options TUFLOW Classic and HPC include an Auto-Terminate feature for stopping simulations after the flood peak has been experienced within the simulation. This can help project efficiencies by avoiding unnecessary model simulation time once the peak flood extent has been achieved. The 2D cells that are monitored to trigger the auto-termination are controlled by specifying a value of 0 (exclude) or 1 (include) using the .tcf commands: Set Auto Terminate and Read GIS Auto Terminate. For example, in the below, all cells are first set to be excluded for monitoring followed by the reading of a GIS layer to set cells individually. Set Auto Terminate == 0 Read GIS Auto Terminate == ..\\2d_AT_001_R.shp At each Map Output Interval the monitored cells are compared against two criteria: The percentage of the wet cells that have become wet since the last map output interval. The velocity-depth product at the current timestep compared to the tracked maximum. For the percentage of cells that have become wet since the last interval, the maximum allowable value is controlled with the .tcf command: Auto Terminate Wet Cell Tolerance == &lt;maximum_allowable_%_of_newly_wet_cells&gt; If set to 0, then if any monitored cells have become wet since the last map output the simulation continues. If set to a value of 5, then up to 5% of monitored cells can become wet since the last map output without triggering an auto-termination of the simulation. For the velocity-depth tolerance, at each output interval the velocity-depth product is compared to the tracked maximum value. If the current dV product is within the specified tolerance Auto Terminate dV Value Tolerance the simulation is not terminated. The total number of cells that are allowable within the specified range is controlled with Auto Terminate dV Cell Tolerance. If set to a value of 1, then up to 1% of monitored cells can be within the tolerance value without triggering an auto-termination of the simulation. The larger the Auto Terminate dV Value Tolerance the further the dV product needs to have dropped from the peak value. The time that the auto-terminate feature commences can be controlled using the .tcf command Auto Terminate Start Time otherwise the Start Time is used. Note, this option is only assessed at every Map Output Interval. 12.6 Reproducibility of Results A key concern with hydraulic modelling is the replication of results across a range of hardware. The following sections provide some information to be aware of when looking at the replication of results. 12.6.1 TUFLOW Classic (CPU only) The TUFLOW Classic engine is written in Fortran and compiled for Windows™ with Intel™’s Fortran compiler, leading to well optimised CPU code. The computational algorithm is implicit in nature and difficult to parallelise for multi-thread execution. As a result race conditions do not exist and a repeat run of a model with the same inputs, with the same executable on the same type of CPU, should yield bit-wise identical results (i.e. a subtraction of results should be exactly zero). If a user finds that repeat model runs (same executable, same CPU) do not yield identical results then please contact support@tuflow.com as this may indicate a memory access error or an un-initialised variable in the code. A repeat model run with the same executable but on a different type of CPU (e.g. Intel Xeon vs i9, or AMD Epyc vs Ryzen, or Intel vs AMD) may produce very slight differences in results due to the CPUs having different instruction set extensions that may or may not be utilised. Such differences are typically less than 1 mm water surface elevation but, in some locations, the differences can become accentuated due to changes in overtopping or an operational structure threshold. Even though the source code for TUFLOW Classic is currently seeing little development, as we update Intel Fortran compilers, different releases of TUFLOW can be expected to show minor differences even on the same CPU. 12.6.2 TUFLOW HPC (incl. Quadtree) on CPU The TUFLOW HPC engine (incl Quadtree) is written in C++ with Nvidia™ CUDA GPU kernels. The kernels have been carefully written so that they can be compiled for both GPU and CPU execution. When compiled for CPU execution, the Microsoft Visual Studio compiler is used and the code is built into the dynamic link libraries (DLLs) in the executable bundle. Similar to TUFLOW Classic, repeat model runs of the same model (same TUFLOW executable, same CPU type) should produce bit-wise identical results. Again, if differences are observed please contact support@tuflow.com as this may indicate an issue that needs to be addressed. As the TUFLOW HPC and Quadtree solvers are fundamentally different to TUFLOW Classic, there will always be minor differences between solutions from the different schemes even when using the same turbulence model and without sub-grid sampling (SGS). As TUFLOW HPC and Quadtree both default to using the Wu turbulence model while Classic can only use the Smagorinksy model, the differences will be more significant when run with the default settings. 12.6.3 TUFLOW HPC (incl. Quadtree) on GPU When the CUDA kernels are compiled for GPU execution, a GPU agnostic intermediate code file (ptx) is produced with the final compilation of that being done on a just-in-time basis by the GPU driver on the machine that the executable is running on. The results may now depend not just on the version of TUFLOW executable used and type of CPU (since the pre-processing of the model input is still performed on CPU), but also on the type of GPU and the version of the GPU driver installed. GPUs have thousands of cores that work in parallel. However, the kernels have been carefully written to avoid race conditions, and the adaptive timestep control avoids relying on variables summed with atomic additions of floating point data. Therefore, provided these factors (version of TUFLOW, CPU type, GPU type, GPU driver version) are kept constant, a repeat model run will yield bit-wise reproducible results. Also note that the GPU cores use different hardware for the floating point operations and the GPU compiler may re-optimise the sequence of instructions for complex lines of code compared to the CPU compiler. Therefore, even when using the same version of TUFLOW HPC, very small differences in the solution can be seen when the model is run on GPU compared to running on CPU. These differences are typically less than 1 mm water surface elevation but again, in some locations, the differences can become accentuated due to changes in overtopping or an operational structure threshold. 12.6.4 TUFLOW HPC (incl. Quadtree) on multiple GPUs / CPU threads TUFLOW HPC (incl. Quadtree) support running a model across multiple GPU devices in one computer. In this case the model is decomposed into subdomains, and model data are exchanged and sychronised at the domain boundaries as required. Care has been taken to ensure that results when run on multiple GPUs (of all the same GPU type) are bit-wise identical to when run on a single GPU. If differences are observed between results from a run on multiple devices vs a single device please contact support@tuflow.com. Likewise when running on multiple CPU threads (default is four unless specified), the model results should be bit-wise identical to when running on a single thread (CPU Threads == 1). Please contact us at support@tuflow.com if found otherwise. "],["CAL-1.html", "Section 13 Checks And Logs 13.1 Context 13.2 TUFLOW FV Log File 13.3 Mesh Diagnostics 13.4 GIS Check Files", " Section 13 Checks And Logs 13.1 Context 13.2 TUFLOW FV Log File 13.3 Mesh Diagnostics 13.4 GIS Check Files \\(\\newcommand{\\blockindent}{\\hspace{0.5cm}}\\) "],["ViewingOutputs-1.html", "Section 14 Viewing Outputs 14.1 Context", " Section 14 Viewing Outputs 14.1 Context TUFLOW CATCH enables… Seamless assessment of the impact of land use or other catchment based changes on the hydrodynamics of downstream receiving waterways (i.e. without the need to simulate pollutant export, see Section ??, bullet point 1) \\(\\newcommand{\\blockindent}{\\hspace{0.5cm}}\\) "],["QAAndTroubleshooting-1.html", "Section 15 QA And Troubleshooting 15.1 Context", " Section 15 QA And Troubleshooting 15.1 Context TUFLOW CATCH enables… Seamless assessment of the impact of land use or other catchment based changes on the hydrodynamics of downstream receiving waterways (i.e. without the need to simulate pollutant export, see Section ??, bullet point 1) \\(\\newcommand{\\blockindent}{\\hspace{0.5cm}}\\) "],["AppCommands.html", "Appendix A Commands A.1 Command syntax A.2 Argument syntax A.3 Commands", " Appendix A Commands .book .book-body .page-wrapper .page-inner { max-width: 85%; } The manual’s introduction should be reviewed for instructions regarding the use of interactive components deployed in this section. All TUFLOW CATCH commands and descriptions are provided in Table A.1. A.1 Command syntax TUFLOW CATCH commands are coloured, for example Catchment Pollutant Export Model ==. These can be copied and pasted directly into a *.tcc control file, and arguments added. A.2 Argument syntax Descriptions of the arguments expected by TUFLOW CATCH commands (i.e. information provided after the ==) are contrastingly coloured and always included in angle parentheses, as \\(\\langle\\)argument\\(\\rangle\\) . This argument content takes one of the following forms: Single keyword options. Options are separated by semicolons. Options need to be used exactly as written because they are keywords. For example, \\(\\langle\\)Washoff1;Shear1\\(\\rangle\\) describes the available pollutant export models for the command Method ==. An example of implementing this description would therefore be Method == Washoff1 or for the Material == command, the argument is described as \\(\\langle\\)All;Up to 10 comma separated material numbers\\(\\rangle\\). An example of implementing this description would therefore be either Material == All or Material == 1, 6, 3 Single numeric values. Values are presented using their associated symbol, using the notation described in the manual’s introductory sections. For example, \\(d\\) describes the single numeric value for the command Depth Threshold ==. These arguments are hyperlinked to other relevant information in this manual. An example of implementing this description would therefore be Recommendations. This is denoted with a rec: prefix \\(\\langle\\)rec: plain text\\(\\rangle\\) that recommends a command argument, such as a file path A.3 Commands All TUFLOW CATCH commands and descriptions follow. This page has deliberately been set to be wider than the main document so as to accommodate the detail contained within the table. Tips provided in the manual’s introduction for interacting with the table should be reviewed, especially with regard to searching and navigation. Other tips for use specific to this table include: Commands are coloured and although they show as underlined on mouse hover, these are not hyperlinked Corresponding arguments (presented as their symbols) are coloured and listed in the required order within angled parentheses following each command ==. Each argument is a hyperlink to its description in the relevant Appendix, where appropriate. This description then includes hyperlinks to the relevant science and command syntax (Section ??). This allows easy navigation between command, parameter and scientific information The final text of each description is ‘Simulation construction section …’ and is a link to the relevant part of Section ?? where the command syntax is presented in context. More parameter details and descriptions are subsequently available via further hyperlinks included in the construction section Table A.1: TUFLOW FV #Commands Command Description Atmospheric Stability Model == \\(\\langle\\)\\(M_{asm}\\)\\(\\rangle\\) Test Optional Atmospheric Update dt  == \\(\\langle\\)\\(dt_{atm}\\)\\(\\rangle\\) NA BC == \\(\\langle\\)\\(M_{bc}\\)\\(\\rangle\\) NA BC Default == \\(\\langle\\)\\(V_{bc-default}\\)\\(\\rangle\\) NA BC Default Update dt  == \\(\\langle\\)\\(dt_{bc-default}\\)\\(\\rangle\\) NA BC Event Source == \\(\\langle\\)\\(S_{bc-wildcard}\\);\\(S_{bc-eventsource}\\)\\(\\rangle\\) NA BC Header == \\(\\langle\\)\\(S_{bc-header}\\)\\(\\rangle\\) NA BC Nodestrings  == \\(\\langle\\)\\(S_{bc-nodestrings}\\)\\(\\rangle\\) NA BC Offset == \\(\\langle\\)\\(V_{bc-offset}\\)\\(\\rangle\\) NA BC Reference Time == \\(\\langle\\)\\(T_{bc-ref}\\)\\(\\rangle\\) NA BC Scale == \\(\\langle\\)\\(s_{bc-scale}\\)\\(\\rangle\\) NA BC Time Units == \\(\\langle\\)\\(T_{bc-units}\\)\\(\\rangle\\) NA BC Update dt  == \\(\\langle\\)\\(dt_{bc}\\)\\(\\rangle\\) NA Bed Adjust == \\(\\langle\\)\\(M_{bedadjust}\\)\\(\\rangle\\) NA Bed Elevation Limits == \\(\\langle\\)\\(V_{mat-zbmin}\\);\\(V_{mat- zbmax}\\)\\(\\rangle\\) NA Bed Load Transport  == \\(\\langle\\)\\(B_{bedload}\\)\\(\\rangle\\) NA Blockage File == \\(\\langle\\)\\(FPath_{blockage}\\)\\(\\rangle\\) NA Bottom Drag Model == \\(\\langle\\)\\(M_{bottomdrag}\\)\\(\\rangle\\) Sets the bed resistance model to: • {Manning}: The Manning equation • ks: Log-law velocity profile Required Related commands are required as a function of \\(M_{bottomdrag}\\): • {Manning}: A spatially constant default Manning’s ‘n’ coefficient is specified using the Global Bottom Roughness (Manning) command • ks: A spatially constant default ks value is specified using the Global Bottom Roughness (ks) command 2D HD simulation construction section 5.9.  ST simulation construction section ??. Bottom Roughness  == \\(\\langle\\)\\(C_{n}\\)\\(\\rangle\\) Sets the Manning’s ‘n’ bed roughness coefficient for a given material ID. Optional Need to manually add Bottom Roughness  == \\(\\langle\\)\\(d_{ks}\\)\\(\\rangle\\) Set the Nikuradse bed roughness length for a given material ID. Optional Need to manually add Bulk Latent Heat Coefficient  == \\(\\langle\\)\\(C_{cln}\\)\\(\\rangle\\) NA Bulk Momentum Transfer Coefficient  == \\(\\langle\\)\\(C_{cdn}\\)\\(\\rangle\\) NA Bulk Sensible Heat Coefficient == \\(\\langle\\)\\(C_{csn}\\)\\(\\rangle\\) NA Cell 3D Depth  == \\(\\langle\\)\\(d_{cell3d}\\)\\(\\rangle\\) NA Cell Elevation File == \\(\\langle\\)\\(FPath_{cellz}\\);\\(M_{xytype}\\)\\(\\rangle\\) CSV file that updates cell centre elevations. Can be assigned using (Cell ID, Z) or (X,Y,Z) coordinates. Two different CSV file formats are supported as specified by the argument \\(M_{xytype}\\): • {CelID}: The .CSV file must contain a header line ID, Z with cell ids and corresponding elevations entered within the rows below the header line • Coordinate: The .CSV file contains a first line header X,Y,Z with the x-coordinate, y-coordinate and corresponding elevations entered within the rows below the header line. Optional Optional related command/s: Read GIS Z Line, Read GRID Zpts and Read TIN Zpts, and Set Zpts. 2D HD simulation construction section ??. Cell Elevation Polygon File == \\(\\langle\\)\\(FPath_{polygon}\\);\\(V_{zbpoly}\\),\\(V_{polygonid}\\)\\(\\rangle\\) NA Cell Elevation Polyline File == \\(\\langle\\)\\(FPath_{polyline}\\);\\(V_{polylineid}\\)\\(\\rangle\\) NA Cell Size == \\(\\langle\\)\\(d_{cellx}\\);\\(d_{celly}\\)\\(\\rangle\\) Sets the x and y cell resolution when using regular mesh specification. Required if using a structured mesh. In meters for Cartesian metric models, feet for Cartesian US Customary models, or decimal degrees for Spherical models.Required related command/s: Grid Origin and Grid Size.Optional related command/s: Grid Rotation. 2D HD simulation construction section ??. Cell Water Quality Depth == \\(\\langle\\)\\(d_{cellwq}\\)\\(\\rangle\\) NA Cell Wet/Dry Depths == \\(\\langle\\)\\(d_{dry}\\);\\(d_{wet}\\)\\(\\rangle\\) Sets the cell dry and wetting depths used to switch off momentum and mass calculations in regions of shallow flow. Optional 2D HD simulation construction section ??. CFL == \\(\\langle\\)\\(f_{cfl}\\)\\(\\rangle\\) Assigns the global maximum Courant–Friedrichs–Lewy (CFL) computational stability condition. Required Optional related command/s: CFL Internal and CFL External. 2D HD simulation construction section ??. CFL External == \\(\\langle\\)\\(f_{cflext}\\)\\(\\rangle\\) Overrides the globalthe global maximum Courant–Friedrichs–Lewy (CFL) condition for internal advective flux calculations. Optional Optional related command/s: CFL and CFL Internal. 2D HD simulation construction section ??. CFL Internal == \\(\\langle\\)\\(f_{cflint}\\)\\(\\rangle\\) Overrides the the global maximum Courant–Friedrichs–Lewy (CFL) condition for free surface shallow water wave celerity calculations. Optional Optional related command/s: CFL and CFL External. 2D HD simulation construction section ??. Constant Timestep == \\(\\langle\\)\\(dt_{cons}\\)\\(\\rangle\\) NA Control  == \\(\\langle\\)\\(M_{struct-ctrl}\\)\\(\\rangle\\) NA Control File == \\(\\langle\\)\\(FPath_{struct-ctrl}\\)\\(\\rangle\\) NA Control Parameter  == \\(\\langle\\)\\(S_{struct-ctrlparam}\\)\\(\\rangle\\) NA Control Update dt  == \\(\\langle\\)\\(dt_{struct-ctrl}\\)\\(\\rangle\\) NA Culvert File == \\(\\langle\\)\\(FPath_{struct-culv}\\)\\(\\rangle\\) NA Culvert Invert Check == \\(\\langle\\)\\(M_{struct-culv-invc}\\)\\(\\rangle\\) NA Culvert Parameters  == \\(\\langle\\)\\(V_{struct-culv-crhd}\\);Reserved,Reserved,\\(B_{struct-culv-adjust}\\),\\(B_{struct-culv-th}\\)\\(\\rangle\\) NA Decay Rate == \\(\\langle\\)\\(R_{trace-decay}\\)\\(\\rangle\\) NA Define Event == \\(\\langle\\)\\(S_{event}\\)\\(\\rangle\\) NA Demo Model  == \\(\\langle\\)\\(B_{demo}\\)\\(\\rangle\\) NA Density Air  == \\(\\langle\\)\\(\\rho_{air}\\)\\(\\rangle\\) NA Destratification Unit == \\(\\langle\\)\\(M_{struct-destrat}\\)\\(\\rangle\\) NA Device ID == \\(\\langle\\)\\(V_{gpu-id}\\)\\(\\rangle\\) Set the default NVIDIA GPU Device ID to run a simulation on. Optional - Can be used to select the GPU Device ID if multiple GPU Devices exist and Hardware == GPU. This may be overwritten at runtime via command line argument switches: -cpu, -gpu, and -pu.Required related command/s: Hardware. 2D HD simulation construction section 5.5. Diffusivity Limiter dt  == \\(\\langle\\)\\(dt_{diff-lim}\\)\\(\\rangle\\) NA Disable Hydros == \\(\\langle\\)\\(B_{disable-hd}\\)\\(\\rangle\\) NA Disable Water Quality Model  == \\(\\langle\\)\\(B_{disable-wq}\\)\\(\\rangle\\) NA Display Depth == \\(\\langle\\)\\(d_{disp}\\)\\(\\rangle\\) NA Display dt == \\(\\langle\\)\\(dt_{disp}\\)\\(\\rangle\\) NA Echo Geometry == \\(\\langle\\)\\(B_{geo}\\)\\(\\rangle\\) Switch to write a series of CSV and NetCDF geometry ouputs to the log directory: • Mesh details • Cell elevations and material types • Cell elevations that have been updated externally to the .2dm file (for example by using the cell elevation file command) • Nodestring locations and their purposes (boundary, structure, etc.) • Output locations \\(B_{geo}\\) options: • {0}: OFF • 1: ON Optional Echo Geometry CSV == \\(\\langle\\)\\(B_{geocsv}\\)\\(\\rangle\\) NA Echo Geometry NetCDF == \\(\\langle\\)\\(B_{geonc}\\)\\(\\rangle\\) NA Else NA Else If Event == \\(\\langle\\)\\(S_{event}\\)\\(\\rangle\\) NA Else If Scenario == \\(\\langle\\)\\(S_{scenario}\\)\\(\\rangle\\) NA End BC NA End Control  NA End Define NA End If NA End Output  NA End Structure  NA End Time == \\(\\langle\\)\\(T_{end}\\)\\(\\rangle\\) Specifies the end time for the simulation in the selected Time Format. Required Optional related command/s: Time Format. 2D HD simulation construction section 5.6. End Tracer NA Energy Loss File == \\(\\langle\\)\\(FPath_{struct-energyloss}\\)\\(\\rangle\\) NA Energy Loss Function  == \\(\\langle\\)\\(M_{struct-energyloss}\\)\\(\\rangle\\) NA Equation Of State == \\(\\langle\\)\\(M_{equationofstate}\\)\\(\\rangle\\) NA Evapo-Concentrate  == \\(\\langle\\)\\(B_{trace-evap}\\)\\(\\rangle\\) NA Event File == \\(\\langle\\)\\(FPath_{event}\\)\\(\\rangle\\) NA External Turbulence Model Directory == \\(\\langle\\)\\(DPath_{turbzext}\\)\\(\\rangle\\) NA Final Output  == \\(\\langle\\)\\(T_{output-final}\\)\\(\\rangle\\) NA Flux File  == \\(\\langle\\)\\(FPath_{struct-flux}\\)\\(\\rangle\\) NA Flux Function == \\(\\langle\\)\\(M_{structure}\\)\\(\\rangle\\) Sets the hydraulic structure model \\(M_{Structure}\\) to: • {None/NLSWE}: Non-linear shallow water equations • Weir: Weir structure with RL weir crest elevation • Weir_dz: Weir structure with bed offset weir crest elevation • Culvert: Culvert structure • Porous: Permeable barrier • Matrix: User-defined flow hQh relationship • Timeseries: User-defined flow timeseries or pump • Wall: No flow Optional Related commands are required as a function of \\(M_{Structure}\\) • {None/NLSWE}: Can be combined with the Energy Loss Function command to model bridges or other flow constrictions • Weir: Weir hydraulic properties are set using the Properties command • Weir_dz: Weir hydraulic properties are set using the Properties command • Culvert: Culvert details are set using the Culvert File command and advanced settings via Culvert Parameters • Porous: Porous hydraulic properties are set using the Properties command • Matrix: Matrix file via the Flux File command • Timeseries: Timeseries file via the Flux File command • Wall: No supporting commands are required 2D HD simulation construction section 5.16.3. Form Loss Coefficient  == \\(\\langle\\)\\(C_{struct-flc}\\)\\(\\rangle\\) NA g == \\(\\langle\\)\\(g\\)\\(\\rangle\\) NA Geometry 2D == \\(\\langle\\)\\(FPath_{geo2d}\\)\\(\\rangle\\) Reads the mesh topology from a .2dm unstructured mesh file. This mesh may contain triangles, quadrilaterals, or a combination of these geometries. The mesh can optionally contain spatial varying bathymetric and material data. Required if using an unstructured mesh. Only one Geometry 2d command and mesh can be used per simulation. If multiple are specified, the latter command takes precedence. 2D HD simulation construction section ??. GIS Format == \\(\\langle\\)\\(M_{gisformat}\\)\\(\\rangle\\) Sets the format of all output GIS files to either: • {MIF}: Mapinfo Interchange Format (.mif extension) • SHP: ESRI Shapefile (.shp extention) Required Typically set to SHP to align with the TUFLOW Plugin workflow.Optional related command/s: SHP Projection and MI Projection. 2D HD simulation construction section 5.3. GIS Projection Check == \\(\\langle\\)\\(M_{gisprojcheck}\\)\\(\\rangle\\) Sets the error behavior when comparing input GIS layer projections with the model projection set by the SHP Projection command: • {ERROR}: Will stop the simulation and report an error • WARNING: Will report a message to the GIS messeges check file, but not stop simulation Optional During model start-up, checks are completed by comparing each input GIS .shp layer projection with that specified by the SHP Projection command. If they are not equivilant ERROR 0305 - Projection of .shp file is different to that specified by the SHP Projection == command. will result. This error typically occurs if trying to read a layer with a different coordinate system. However, if mixing layers created by differing GIS packages, slight differences in the text string format can result in ERROR 305 being reported despite there being no material difference in the projection string. In such cases, this command can be used to adjust the error reporting behaviour. Required related command/s: GIS Format.Optional related command/s: SHP Projection and MI Projection. 2D HD simulation construction section 5.3. Global Bed Elevation Limits == \\(\\langle\\)\\(V_{globzbmin}\\);\\(V_{globzbmax}\\)\\(\\rangle\\) NA Global Bottom Roughness  == \\(\\langle\\)\\(C_{n}\\)\\(\\rangle\\) Set the global Manning’s ‘n’ bed roughness coefficient. Required if Bottom Drag Model == Manning Required related command/s: Bottom Drag Model. 2D HD simulation construction section 5.9.  ST simulation construction section ??. Global Bottom Roughness  == \\(\\langle\\)\\(d_{ks}\\)\\(\\rangle\\) Set the global Nikuradse bed roughness length. Required if Bottom Drag Model == ks Required related command/s: Bottom Drag Model . 2D HD simulation construction section 5.9.  ST simulation construction section ??. Global Horizontal Eddy Viscosity == \\(\\langle\\)None\\(\\rangle\\) Sets the global value or coefficient for the horizontal Momentum Mixing Model. Conditional - Not required if Momentum Mixing Model == None. Required related command/s: Momentum Mixing Model. 2D HD simulation construction section 5.10. Global Horizontal Eddy Viscosity == \\(\\langle\\)\\(V_{\\nu\\text{hglob}}\\)\\(\\rangle\\) Sets the global value of horizontal eddy viscosity. Conditional - Required if Momentum Mixing Model == Constant. Required related command/s: Momentum Mixing Model. 2D HD simulation construction section 5.10. Global Horizontal Eddy Viscosity == \\(\\langle\\)\\(C_{shglob}\\)\\(\\rangle\\) Sets the global value of the Smagorinsky eddy viscosity coefficient. Conditional - Required if Momentum Mixing Model == Smagorinsky. Required related command/s: Momentum Mixing Model and Global Horizontal Eddy Viscosity Limits. 2D HD simulation construction section 5.10. Global Horizontal Eddy Viscosity == \\(\\langle\\)\\(C_{whglob}\\)\\(\\rangle\\) Sets the global value of the Wu eddy viscosity coefficient. Conditional - Required if Momentum Mixing Model == Wu. Required related command/s: Momentum Mixing Model and Global Horizontal Eddy Viscosity Limits. 2D HD simulation construction section 5.10. Global Horizontal Eddy Viscosity Limits == \\(\\langle\\)\\(V_{\\nu\\text{hglobmin}}\\);\\(V_{\\nu\\text{hglobmax}}\\)\\(\\rangle\\) MJS TODO Global Horizontal Scalar Diffusivity == \\(\\langle\\)None\\(\\rangle\\) NA Global Horizontal Scalar Diffusivity == \\(\\langle\\)\\(V_{\\nu\\text{hglob}}\\)\\(\\rangle\\) NA Global Horizontal Scalar Diffusivity == \\(\\langle\\)\\(C_{shglob}\\)\\(\\rangle\\) NA Global Horizontal Scalar Diffusivity == \\(\\langle\\)\\(C_{\\alpha\\text{longhglob}}\\);\\(C_{\\alpha\\text{transhglob}}\\)\\(\\rangle\\) NA Global Horizontal Scalar Diffusivity == \\(\\langle\\)Warmup\\(\\rangle\\) NA Global Horizontal Scalar Diffusivity Limits == \\(\\langle\\)\\(V_{\\alpha\\text{hglobmin}}\\);\\(V_{\\alpha\\text{hglobmax}}\\)\\(\\rangle\\) NA Global Temporal Extrapolation Check == \\(\\langle\\)\\(M_{globtecheck}\\)\\(\\rangle\\) NA Global Vertical Eddy Viscosity Limits == \\(\\langle\\)\\(V_{\\nu\\text{vglobmin}}\\);\\(V_{\\nu\\text{vglobmax}}\\)\\(\\rangle\\) NA Global Vertical Scalar Diffusivity Limits == \\(\\langle\\)\\(V_{\\alpha\\text{vglobmin}}\\);\\(V_{\\alpha\\text{vglobmax}}\\)\\(\\rangle\\) NA Grid Definition  NA Grid Definition File  == \\(\\langle\\)\\(FPath_{griddef}\\)\\(\\rangle\\) NA Grid Definition Variables  == \\(\\langle\\)\\(S_{xcoordvar}\\);\\(S_{ycoordvar}\\),\\(S_{zcoordvar}\\)\\(\\rangle\\) NA Grid Origin == \\(\\langle\\)\\(V_{x0}\\);\\(V_{y0}\\)\\(\\rangle\\) Sets the x and y grid origin when using regular mesh specification. Required if using a structured mesh. In meters for Cartesian metric models, feet for Cartesian US Customary models, or decimal degrees for Spherical models.Required related command/s: Cell Size and Grid Size.Optional related command/s: Grid Rotation. 2D HD simulation construction section ??. Grid Rotation == \\(\\langle\\)\\(V_{grid\\theta}\\)\\(\\rangle\\) Sets the grid rotation when using regular mesh specification. Optional. Units are in degrees anticlockwise from East.Required related command/s: Grid Origin, Cell Size, and Grid Size. 2D HD simulation construction section ??. Grid Size == \\(\\langle\\)\\(d_{xmax}\\);\\(d_{ymax}\\)\\(\\rangle\\) Sets the x and y extent of the mesh when using regular mesh specification. Required if using a structured mesh. In meters for Cartesian metric models, feet for Cartesian US Customary models, or decimal degrees for Spherical models.Required related command/s: Grid Origin and Cell Size.Optional related command/s: Grid Rotation. 2D HD simulation construction section ??. Hardware == \\(\\langle\\)\\(M_{hardware}\\)\\(\\rangle\\) Sets the model default to compute the simulation using: • {CPU}: Central Processing Unit • GPU: A combination of Central Processing Unit and Graphical Processing Unit (GPU) Optional This may be overwritten at runtime via command line argument switches: -cpu, -gpu, and -pu. Running on GPU requires a supported NVIDIA graphics card and access to TUFLOW FV’s GPU Module.Optional related command/s: Device ID. 2D HD simulation construction section 5.5. Heat Relax dt == \\(\\langle\\)\\(dt_{heatrelax}\\)\\(\\rangle\\) NA Horizontal AlphaR == \\(\\langle\\)\\(f_{h\\alpha\\text{h}}\\);\\(f_{h\\alpha\\text{v}}\\),\\(f_{h\\alpha\\text{s}}\\)\\(\\rangle\\) Sets a reduction factor to scale between first and second order horizontal spatial reconstructions for depth, velocity and scalar model variable fields. Optional This may be implemented to solve for depth/water level and velocity in 1st order whilst solving plume/constituents in 2nd order as they may exhibit high spatial gradients (or vice-versa). Ignored if using first order spatial reconstruction Spatial Order == 1,1.Required related command/s: Spatial Order.Optional related command/s: Horizontal Gradient Limiter. 2D HD simulation construction section 5.4. AD simulation construction section ??. Horizontal Eddy Viscosity  == \\(\\langle\\)\\(V_{mat-h\\nu}\\)\\(\\rangle\\) Optional Horizontal Eddy Viscosity  == \\(\\langle\\)\\(C_{mat-sh}\\)\\(\\rangle\\) Optional Horizontal Eddy Viscosity  == \\(\\langle\\)\\(C_{mat-wh}\\)\\(\\rangle\\) Optional Horizontal Eddy Viscosity Limits == \\(\\langle\\)\\(V_{mat-\\nu\\text{hmin}}\\);\\(V_{mat-\\nu\\text{hmax}}\\)\\(\\rangle\\) Optional Horizontal Gradient Limiter == \\(\\langle\\)\\(M_{hgl}\\)\\(\\rangle\\) Sets the Total Variation Diminishing (TVD) limiting scheme for second order horizontal spatial reconstruction: • {LCD}: Limited Central Difference • MLG: Maximum Limited Gradient Optional Ignored if using first order spatial reconstruction Spatial Order == 1,1.Required related command/s: Spatial Order.Optional related command/s: Horizontal AlphaR. 2D HD simulation construction section 5.4. Horizontal Scalar Diffusivity  == \\(\\langle\\)\\(V_{mat-\\nuh}\\)\\(\\rangle\\) NA Horizontal Scalar Diffusivity  == \\(\\langle\\)\\(C_{mat-sh}\\)\\(\\rangle\\) NA Horizontal Scalar Diffusivity  == \\(\\langle\\)\\(C_{mat-\\alpha\\text{longh}}\\);\\(C_{mat-\\alpha\\text{transh}}\\)\\(\\rangle\\) NA Horizontal Scalar Diffusivity  == \\(\\langle\\)Warmup\\(\\rangle\\) NA Horizontal Scalar Diffusivity Limits == \\(\\langle\\)\\(V_{mat-\\alpha\\text{hmin}}\\);\\(V_{mat-\\alpha\\text{hmax}}\\)\\(\\rangle\\) NA If Event == \\(\\langle\\)\\(S_{event}\\)\\(\\rangle\\) NA If Scenario == \\(\\langle\\)\\(S_{scenario}\\)\\(\\rangle\\) NA Inactive == \\(\\langle\\)\\(B_{mat-inactive}\\)\\(\\rangle\\) NA Include == \\(\\langle\\)\\(FPath_{include}\\)\\(\\rangle\\) NA Include Bed Friction == \\(\\langle\\)\\(B_{bedfriction}\\)\\(\\rangle\\) NA Include Coriolis == \\(\\langle\\)\\(B_{coriolis}\\)\\(\\rangle\\) NA Include Heat  == \\(\\langle\\)\\(M_{heat}\\)\\(\\rangle\\) NA Include Salinity  == \\(\\langle\\)\\(M_{sal}\\);\\(M_{sal\\rho}\\)\\(\\rangle\\) NA Include Sediment  == \\(\\langle\\)\\(M_{sed}\\);\\(M_{sed\\rho}\\)\\(\\rangle\\) NA Include Stokes Drift  == \\(\\langle\\)\\(B_{stokes}\\)\\(\\rangle\\) NA Include Temperature  == \\(\\langle\\)\\(M_{temp}\\);\\(M_{temp\\rho}\\)\\(\\rangle\\) NA Include Wind == \\(\\langle\\)\\(B_{wind}\\)\\(\\rangle\\) NA Includes MSLP == \\(\\langle\\)\\(B_{bc-mslp}\\)\\(\\rangle\\) NA Initial Condition 2D == \\(\\langle\\)\\(FPath_{ic2d}\\)\\(\\rangle\\) NA Initial Condition 3D == \\(\\langle\\)\\(FPath_{ic3d}\\)\\(\\rangle\\) NA Initial Condition Quiescent NA Initial Conditon OGCM NA Initial Salinity  == \\(\\langle\\)\\(K_{icsal}\\)\\(\\rangle\\) NA Initial Scalar Profile == \\(\\langle\\)\\(FPath_{icscalarprof}\\)\\(\\rangle\\) NA Initial Sediment Concentration  == \\(\\langle\\)\\(K_{icsed}\\)\\(\\rangle\\) NA Initial Temperature == \\(\\langle\\)\\(V_{ictemp}\\)\\(\\rangle\\) NA Initial Tracer Concentration == \\(\\langle\\)\\(K_{ictrace}\\)\\(\\rangle\\) NA Initial Water Level  == \\(\\langle\\)\\(V_{icwl}\\)\\(\\rangle\\) NA Initial Water Quality Concentration  == \\(\\langle\\)\\(K_{icwq}\\)\\(\\rangle\\) NA Kinematic Viscosity  == \\(\\langle\\)\\(\\nu\\)\\(\\rangle\\) NA Latent Heat Model  == \\(\\langle\\)\\(M_{lheat}\\)\\(\\rangle\\) NA Latitude == \\(\\langle\\)\\(\\phi\\)\\(\\rangle\\) Sets the latitude for Coriolis calculations when a Cartesian coordinate system is used. Required if Spherical == 0. Required related command/s: Spherical . 2D HD simulation construction section 5.3. Layer Face File == \\(\\langle\\)\\(FPath_{zface}\\)\\(\\rangle\\) NA Log Dir  == \\(\\langle\\)\\(DPath_{log}\\)\\(\\rangle\\) NA Longwave Radiation Albedo == \\(\\langle\\)\\(f{\\alpha\\text{lw}}\\)\\(\\rangle\\) NA Longwave Radiation Model == \\(\\langle\\)\\(M_{lwrad}\\)\\(\\rangle\\) NA Material  == \\(\\langle\\)\\(V_{mat-id}\\)\\(\\rangle\\) NA Max_conc == \\(\\langle\\)\\(K_{struct-maxc}\\)\\(\\rangle\\) NA Min_conc == \\(\\langle\\)\\(K_{struct-minc}\\)\\(\\rangle\\) NA MI Projection  == \\(\\langle\\)\\(FPath_{MIProj}\\)\\(\\rangle\\) Defines a Mapinfo Interchange Format (MIF) projection string or .mif file that sets the geographical coordinate system for all input and output Mapinfo .mif GIS layers. Required if reading Mapinfo .mif file layers or if GIS Format == MIF. Required related command/s: GIS Format. 2D HD simulation construction section 5.3. Min Bottom Layer Thickness == \\(\\langle\\)\\(V_{minbotthick}\\)\\(\\rangle\\) NA Mode Split == \\(\\langle\\)\\(B_{modesplit}\\)\\(\\rangle\\) NA Model Events == \\(\\langle\\)\\(S_{event}\\)\\(\\rangle\\) NA Model Scenarios == \\(\\langle\\)\\(S_{scenario}\\)\\(\\rangle\\) NA Momentum Mixing Model == \\(\\langle\\)\\(M_{momentum}\\)\\(\\rangle\\) Sets the horizontal eddy viscosity model \\(M_{Momentum}\\) to: • {None}: Horizontal viscous mixing is not modelled • Constant: A global user-specified constant value of eddy viscosity • Smagorinsky: The Smagorinsky model • Wu: The Wu model Required Related commands are required as a function of \\(M_{Momentum}\\) • {None}: No supporting commands are required • Constant: A spatially constant value is specified using the Global Horizontal Eddy Viscosity command • Smagorinsky: The global Smagorinsky coefficient is specified using the Global Horizontal Eddy Viscosity command and the upper and lower limits of calculated eddy viscosity are set via the Global Horizontal Eddy Viscosity Limits command • Wu: The global Wu coefficient is specified using the Global Horizontal Eddy Viscosity command and the upper and lower limits of calculated eddy viscosity are set via the Global Horizontal Eddy Viscosity Limits command 2D HD simulation construction section 5.10. Name == \\(\\langle\\)\\(S_{struct-name}\\)\\(\\rangle\\) NA Nodestring Polyline File == \\(\\langle\\)\\(FPath_{ns}\\)\\(\\rangle\\) NA Ntracer == \\(\\langle\\)\\(V_{ntracer}\\)\\(\\rangle\\) NA Output == \\(\\langle\\)\\(M_{output}\\)\\(\\rangle\\) NA Output Compression  == \\(\\langle\\)\\(B_{output-compress}\\)\\(\\rangle\\) NA Output Dir == \\(\\langle\\)\\(DPath_{output}\\)\\(\\rangle\\) NA Output Interval  == \\(\\langle\\)\\(dt_{output}\\)\\(\\rangle\\) NA Output Parameters  == \\(\\langle\\)\\(S_{output-params}\\)\\(\\rangle\\) NA Output Points File  == \\(\\langle\\)\\(FPath_{output-pts}\\)\\(\\rangle\\) NA Output Statistics == \\(\\langle\\)\\(S_{output-stat1}\\);\\(S_{output-stat2}\\)\\(\\rangle\\) NA Output Statistics dt == \\(\\langle\\)\\(dt_{output-stat}\\)\\(\\rangle\\) NA Particle Tracking Control File == \\(\\langle\\)\\(FPath_{fvptm}\\)\\(\\rangle\\) NA Pause == \\(\\langle\\)\\(S_{msg}\\)\\(\\rangle\\) NA Polygon File == \\(\\langle\\)\\(FPath_{struct-polygon}\\)\\(\\rangle\\) NA Properties  == \\(\\langle\\)\\(H_{weircrest}\\);\\(C_{weir}\\),\\(P_{weir}\\),\\(C_{weirsuba}\\),\\(C_{weirsubb}\\),\\(X_{weircfmin}\\),\\(w_{ud-width}\\)\\(\\rangle\\) Sets the hydraulic properties for the weir structure. Conditional - Required if Flux Function == Weir. Required related command/s: Flux Function. 2D HD simulation construction section 5.16.6. Properties  == \\(\\langle\\)\\(H_{weircrestdz}\\);\\(C_{weir}\\),\\(P_{weir}\\),\\(C_{weirsuba}\\),\\(C_{weirsubb}\\),\\(X_{weircfmin}\\),\\(w_{weir-width}\\)\\(\\rangle\\) Sets the hydraulic properties for the weir structure. Conditional - Required if Flux Function == Weir_dz. Required related command/s: Flux Function. 2D HD simulation construction section 5.16.6. Properties  == \\(\\langle\\)\\(K_{hcon}\\);\\(d_{flowpath}\\),\\(w_{ud-width}\\)\\(\\rangle\\) Sets the hydraulic properties for the porous structure. Conditional - Required if Flux Function == Porous. Required related command/s: Flux Function. 2D HD simulation construction section 5.16.9. Read File == \\(\\langle\\)\\(FPath_{include}\\)\\(\\rangle\\) NA Read GIS Mat == \\(\\langle\\)\\(FPath_{gismat}\\)\\(\\rangle\\) NA Read GIS Nodestring == \\(\\langle\\)\\(FPath_{gisns}\\)\\(\\rangle\\) NA Read GIS Z Line == \\(\\langle\\)\\(FPath_{giszline}\\)\\(\\rangle\\) Reads GIS files containing polylines and points that are treated as breaklines in the model’s bathymetry. Optional Reads a 2d_zln GIS layer (e.g. .shp or .mif) containing lines that are treated as breaklines in the model’s bathymetry. The breakline can vary in height along its length (i.e. a 3D breakline). The modified cell centre elevations are output to the 2d_zln_zpt_check layer if Write Check Files has been set. The approach uses the polylines in the layer to set the elevations of cells intersected by the polyline. A variable height polyline is created in the GIS by snapping the polyline to points in the same layer. The first attribute column must be a number (real or integer) representing the elevation of the points. If the polyline is not snapped with a point at its beginning and end, the polyline is assumed to be horizontal (the height is taken from the polyline’s attribute). Otherwise, the polyline’s grade is determined by the height of the points snapped to the polyline nodes. It is not necessary to snap a point at every polyline node – the minimum requirement is a point snapped to each polyline end. Intermediate elevations are set via linear interpolation. Optional related command/s: Cell Elevation File, Read GRID Zpts and Read TIN Zpts, and Set Zpts. 2D HD simulation construction section ??. Read GIS Zone == \\(\\langle\\)\\(FPath_{giszone}\\)\\(\\rangle\\) NA Read GRID Zpts  == \\(\\langle\\)\\(FPath_{dem}\\)\\(\\rangle\\) Updates cell centre elevations via a Digital Elevation Model (DEM) file. Optional Supports ESRI ArcGrid (.asc) or binary float (.flt) formats.Optional related command/s: Cell Elevation File, Read GIS Z Line and Read TIN Zpts, and Set Zpts. 2D HD simulation construction section ??. Read TIN Zpts == \\(\\langle\\)\\(FPath_{tin}\\)\\(\\rangle\\) Updates selected cell centre elevations via a Triangulated Irregular Network (TIN) file. Optional Supports Aquaveo SMS TIN (.tin) format.Optional related command/s: Cell Elevation File, Read GIS Z Line and Read GRID Zpts, and Set Zpts. 2D HD simulation construction section ??. Reference Density  == \\(\\langle\\)\\(V_{ref\\rho\\text{w}}\\)\\(\\rangle\\) NA Reference MSLP == \\(\\langle\\)\\(V_{refmslp}\\)\\(\\rangle\\) NA Reference Salinity  == \\(\\langle\\)\\(K_{refsal}\\)\\(\\rangle\\) NA Reference Temperature  == \\(\\langle\\)\\(V_{reftemp}\\)\\(\\rangle\\) NA Reference Time == \\(\\langle\\)\\(T_{ref}\\)\\(\\rangle\\) NA Restart File == \\(\\langle\\)\\(FPath_{restarthd}\\)\\(\\rangle\\) NA Restart Overwrite  == \\(\\langle\\)\\(B_{restartow}\\)\\(\\rangle\\) NA Scal_fact == \\(\\langle\\)\\(V_{struct-scalf}\\)\\(\\rangle\\) NA Scalar Function == \\(\\langle\\)\\(M_{scalarfunction}\\)\\(\\rangle\\) NA Scalar Mixing Model  == \\(\\langle\\)\\(M_{scalarmixing}\\)\\(\\rangle\\) NA Sed Default == \\(\\langle\\)\\(K_{bc-seddefault}\\)\\(\\rangle\\) NA Sed Header == \\(\\langle\\)\\(S_{bc-sedheader}\\)\\(\\rangle\\) NA Sed Offset == \\(\\langle\\)\\(K_{bc-sedoffset}\\)\\(\\rangle\\) NA Sed Scale == \\(\\langle\\)\\(V_{bc-sedscale}\\)\\(\\rangle\\) NA Sediment Control File  == \\(\\langle\\)\\(FPath_{fvsed}\\)\\(\\rangle\\) NA Set Mat == \\(\\langle\\)\\(V_{setmat}\\)\\(\\rangle\\) NA Set Variable == \\(\\langle\\)\\(S_{setvar}\\)\\(\\rangle\\) NA Set Zpts == \\(\\langle\\)\\(V_{setz}\\)\\(\\rangle\\) Sets all elevations in the domain to a user specified value. Optional Optional related command/s: Cell Elevation File, Read GIS Z Line and Read GRID Zpts, and Read TIN Zpts. 2D HD simulation construction section ??. Settling Velocity  == \\(\\langle\\)\\(v_{trace-settling}\\)\\(\\rangle\\) NA Shortwave Radiation Albedo == \\(\\langle\\)\\(f{\\alpha\\text{sw}}\\)\\(\\rangle\\) NA Shortwave Radiation Bed Adsorption == \\(\\langle\\)\\(f_{swbedadsorb}\\);\\(f_{swbotadsorb}\\)\\(\\rangle\\) NA Shortwave Radiation Extintion Coefficients == \\(\\langle\\)\\(C_{\\eta\\text{NIR}}\\);\\(C_{\\eta\\text{PAR}}\\),\\(C_{\\eta\\text{UVA}}\\),\\(C_{\\eta\\text{UVB}}\\)\\(\\rangle\\) NA Shortwave Radiation Fractions == \\(\\langle\\)\\(f_{NIR}\\);\\(f_{PAR}\\),\\(f_{UVA}\\),\\(f_{UVB}\\)\\(\\rangle\\) NA Shortwave Radiation Model == \\(\\langle\\)\\(M_{swrad}\\)\\(\\rangle\\) NA Shortwave Radiation Sediment Extinction Coefficients  == \\(\\langle\\)\\(C_{\\eta\\text{NIRsed}}\\);\\(C_{\\eta\\text{PARsed}}\\),\\(C_{\\eta\\text{UVAsed}}\\),\\(C_{\\eta\\text{UVBsed}}\\)\\(\\rangle\\) NA SHP Projection  == \\(\\langle\\)\\(FPath_{shpproj}\\)\\(\\rangle\\) Defines an ESRI shapefile projection string or .shp file that sets the geographical coordinate system for all input and output ESRI .shp GIS layers. Required if reading ESRI shape file layers or if GIS Format == SHP. Required related command/s: GIS Format. 2D HD simulation construction section 5.3. Snap Tolerance  == \\(\\langle\\)\\(d_{gissnap}\\)\\(\\rangle\\) NA Spatial Order  == \\(\\langle\\)\\(M_{hspatial}\\);\\(M_{vspatial}\\)\\(\\rangle\\) Sets the spatial reconstruction to first or second order. Optional The second argument \\(M_{VertOrder}\\) is used by the 3D HD simulation class and is ignored for the 2D HD simulation class. Optional related command/s: Horizontal Gradient Limiter, Horizontal AlphaR and Vertical Gradient Limiter, and Vertical AlphaR, and Spatial Reconstruction. 2D HD simulation construction section 5.4. 3D HD simulation construction section 6.2. Spatial Reconstruction == \\(\\langle\\)\\(B_{mat-sprecon}\\)\\(\\rangle\\) NA Specific Heat Air  == \\(\\langle\\)\\(V_{cair}\\)\\(\\rangle\\) NA Specific Heat Water  == \\(\\langle\\)\\(V_{cwater}\\)\\(\\rangle\\) NA Spherical  == \\(\\langle\\)\\(B_{spherical}\\)\\(\\rangle\\) Defines the computational coordinate system used by TUFLOW FV’s solver to: • {0}: Cartesian (Eastings and Northings) coordinates • 1: Spherical (Longitude and Latitude) coordinates Optional For Cartesian models (Spherical == 0) a representative latitude should be set using the Latitude command. If Coriolis forcing is likely to be important than Spherical coordinates are recommended. Required related command/s: Latitude.Optional related command/s: Units. 2D HD simulation construction section 5.3. Stability Limits  == \\(\\langle\\)\\(V_{wlstab}\\);\\(v_{vstab}\\)\\(\\rangle\\) NA Start Control State == \\(\\langle\\)\\(f_{struct-ctrl-ini}\\)\\(\\rangle\\) NA Start Output  == \\(\\langle\\)\\(T_{output-start}\\)\\(\\rangle\\) NA Start Time == \\(\\langle\\)\\(T_{start}\\)\\(\\rangle\\) Specifies the start time for the simulation in the selected Time Format. Required Optional related command/s: Time Format and Restart File. 2D HD simulation construction section 5.6. Stokes Transport Factor  == \\(\\langle\\)\\(s_{stokes-scale}\\)\\(\\rangle\\) NA Structure Logging == \\(\\langle\\)\\(B_{logstruct}\\)\\(\\rangle\\) NA Stucture  == \\(\\langle\\)\\(M_{struct}\\)\\(\\rangle\\) NA Sub-type == \\(\\langle\\)\\(M_{bc-subtype}\\)\\(\\rangle\\) NA Suffix  == \\(\\langle\\)\\(S_{output-suff}\\)\\(\\rangle\\) NA Surface Sigma Layers == \\(\\langle\\)\\(V_{ssl}\\)\\(\\rangle\\) NA Surfzone Undertow Factor  == \\(\\langle\\)\\(s_{surfzone}\\)\\(\\rangle\\) NA Target File == \\(\\langle\\)\\(FPath_{struct-ctrl-targ}\\)\\(\\rangle\\) NA Temporal Extrapolation Check == \\(\\langle\\)\\(M_{techeck}\\)\\(\\rangle\\) NA Time Format  == \\(\\langle\\)\\(M_{tform}\\)\\(\\rangle\\) Specifies the simulation time format: • {HOURS}: Time in decimal hours • ISODATE: Date and time specification in the form dd/mm/yyyy HH:MM:SS Optional Subsequent simulation time commands and simulation inputs must be in the specified time format. Simulation outputs will be in the specified time format.Required related command/s: Start Time and End Time. 2D HD simulation construction section 5.6. Timestep Limits  == \\(\\langle\\)\\(dt_{min}\\);\\(dt_{max}\\)\\(\\rangle\\) Sets the limiting values for the lower and upper computational timestep. Required Optional related command/s: CFL. 2D HD simulation construction section ??. Trace Default == \\(\\langle\\)\\(K_{bc-tracedefault}\\)\\(\\rangle\\) NA Trace Header == \\(\\langle\\)\\(S_{bc-traceheader}\\)\\(\\rangle\\) NA Trace Offset == \\(\\langle\\)\\(K_{bc-traceoffset}\\)\\(\\rangle\\) NA Trace Scale == \\(\\langle\\)\\(V_{bc-tracescale}\\)\\(\\rangle\\) NA Tracer == \\(\\langle\\)\\(M_{trace}\\)\\(\\rangle\\) NA Transport Mode Depth  == \\(\\langle\\)\\(d_{trans}\\)\\(\\rangle\\) NA Trigger Value == \\(\\langle\\)\\(V_{struct-ctrl-trig}\\)\\(\\rangle\\) NA Turbulence Update dt  == \\(\\langle\\)\\(dt_{turbz}\\)\\(\\rangle\\) NA Tutorial Model  == \\(\\langle\\)\\(B_{tute}\\)\\(\\rangle\\) NA Units  == \\(\\langle\\)\\(M_{units}\\)\\(\\rangle\\) Sets all simulation inputs, model parameters and outputs units to: • {Metric}: SI Units • US Customary: US Customary Units • Imperial : Alias for US Customary Units • English : Alias for US Customary Units US Customary, Imperial, and English are equivilant. Optional US Customary units are available for use with 2D HD Simulation Class Cartesian models only. If the model is likely to be extended to a more advanced simulation class (any of 3D HD, AD, ST, WQ or PT) it is recommended to use Metric units during initial model setup. Optional related command/s: Spherical . 2D HD simulation construction section 5.3. Use Restart File Time == \\(\\langle\\)\\(B_{rstime}\\)\\(\\rangle\\) NA Vapour Pressure Salinity Params == \\(\\langle\\)\\(K_{vapa}\\);\\(K_{vapab}\\),\\(K_{vapc}\\)\\(\\rangle\\) NA Vertical Alpha R == \\(\\langle\\)\\(f_{v\\alpha\\text{v}}\\);\\(f_{v\\alpha\\text{s}}\\)\\(\\rangle\\) NA Vertical Averaging == \\(\\langle\\)\\(M_{output-vave}\\)\\(\\rangle\\) NA Vertical Coordinate Type == \\(\\langle\\)\\(M_{bc-vcoord}\\)\\(\\rangle\\) NA Vertical Coordinate Type == \\(\\langle\\)\\(M_{struct-vcoord}\\)\\(\\rangle\\) NA Vertical Distribution File  == \\(\\langle\\)\\(FPath_{bc-vcoord}\\)\\(\\rangle\\) NA Vertical Distribution File  == \\(\\langle\\)\\(FPath_{struct-vcoord}\\)\\(\\rangle\\) NA Vertical Eddy Viscosity Limits == \\(\\langle\\)\\(V_{mat-\\nu\\text{vmin}}\\);\\(V_{mat-\\nu\\text{vmax}}\\)\\(\\rangle\\) NA Vertical Gradient Limiiter == \\(\\langle\\)\\(M_{vgl}\\)\\(\\rangle\\) NA Vertical Mesh Type == \\(\\langle\\)\\(M_{meshz}\\)\\(\\rangle\\) NA Vertical Mixing Model == \\(\\langle\\)\\(M_{vmixing}\\)\\(\\rangle\\) NA Vertical Mixing Parameters == \\(\\langle\\)\\(V_{\\nu\\text{vglob}}\\)\\(\\rangle\\) NA Vertical Mixing Parameters == \\(\\langle\\)\\(C_{paraa}\\);\\(C_{paraab}\\)\\(\\rangle\\) NA Vertical Mixing Parameters == \\(\\langle\\)\\(s_{ext\\nu}\\);\\(s_{ext\\alpha}\\)\\(\\rangle\\) NA Vertical Mixing Parameters == \\(\\langle\\)\\(C_{k-e-1\\varepsilon}\\);\\(C_{k-e-2\\varepsilon}\\),\\(C_{k-e-\\mu}\\),\\(C_{k-e-\\sigmak}\\),\\(C_{k-e-\\sigma\\varepsilon}\\),\\(C_{k-e-3\\varepsilon}^{+}\\),\\(C_{k-e-3\\varepsilon}^{-}\\)\\(\\rangle\\) NA Vertical Mixing Parameters == \\(\\langle\\)\\(K_{k-o-\\alpha}\\);\\(C_{k-o-\\beta}\\),\\(C_{k-o-\\mu}\\),\\(C_{k-o-\\sigmak}\\),\\(C_{k-o-\\sigma\\omega}\\),\\(C_{k-o-3\\omega}^{+}\\),\\(C_{k-o-3\\omega}^{-}\\)\\(\\rangle\\) NA Vertical Scalar Diffusivity Limits == \\(\\langle\\)\\(V_{mat-\\alpha\\text{vmin}}\\);\\(V_{mat-\\alpha\\text{vmax}}\\)\\(\\rangle\\) NA Water Age == \\(\\langle\\)\\(B_{trace-age}\\)\\(\\rangle\\) NA Water Emissivity == \\(\\langle\\)\\(X_{\\varepsilon\\text{w}}\\)\\(\\rangle\\) NA Water Quality Control File == \\(\\langle\\)\\(FPath_{fvwq}\\)\\(\\rangle\\) NA Water Quality Model  == \\(\\langle\\)\\(M_{wq}\\)\\(\\rangle\\) NA Water Quality Model Directory  == \\(\\langle\\)\\(DPath_{wq}\\)\\(\\rangle\\) NA Wave Depth Correction  == \\(\\langle\\)\\(B_{wavedepthcorr}\\)\\(\\rangle\\) NA Wave Parameters  == \\(\\langle\\)\\(X_{wave\\gamma}\\);\\(d_{wavelimit}\\)\\(\\rangle\\) NA Width File == \\(\\langle\\)\\(Fpath_{struct-width}\\)\\(\\rangle\\) NA Wind Stress Model == \\(\\langle\\)\\(M_{windstress}\\)\\(\\rangle\\) NA Wind Stress Parameters == \\(\\langle\\)\\(v_{winda}\\);\\(K_{winda}\\),\\(v_{windb}\\),\\(K_{windb}\\)\\(\\rangle\\) NA Wind Stress Parameters == \\(\\langle\\)\\(s_{windkondo}\\)\\(\\rangle\\) NA WQ Default == \\(\\langle\\)\\(K_{bc-wqdefault}\\)\\(\\rangle\\) NA WQ Header == \\(\\langle\\)\\(S_{bc-wqheader}\\)\\(\\rangle\\) NA WQ Offset == \\(\\langle\\)\\(K_{bc-wqoffset}\\)\\(\\rangle\\) NA WQ Scale == \\(\\langle\\)\\(V_{bc-wqscale}\\)\\(\\rangle\\) NA Write Check Files == \\(\\langle\\)\\(Dpath_{check}\\)\\(\\rangle\\) NA Write Empty GIS Files == \\(\\langle\\)\\(FPath_{emtpy}\\)\\(\\rangle\\) Creates empty GIS files in either mid/.mif or .shp format. Each layer is produced with the required attribute definitions pre-defined, but containing no geographic objects. Empty GIS layers are prefixed and are given a suffix of “_empty”. GIS files are saved to the folder \\(FPath_{emtpy}\\), which must already exist. After writing the files, TUFLOW stops executing. Required - only needs to be run once during model initialisation. After the empty files are written, this command can be commented out in subsequent runs. Required related command/s: GIS Format.Optional related command/s: SHP Projection and MI Projection. 2D HD simulation construction section 5.3. Write Restart dt  == \\(\\langle\\)\\(dt_{restart}\\)\\(\\rangle\\) NA Legacy Include Paths == \\(\\langle\\)\\(B_{legincl}\\)\\(\\rangle\\) NA Read GIS SA == \\(\\langle\\)\\(FPath_{gissa}\\)\\(\\rangle\\) NA Output CFL Stats == \\(\\langle\\)\\(B_{clfstats}\\)\\(\\rangle\\) NA Screen/Log Display Interval  == \\(\\langle\\)\\(dt_{disp}\\)\\(\\rangle\\) NA Vertical Mixing Length Scale Limiter == \\(\\langle\\)\\(C_{gabl}\\)\\(\\rangle\\) NA Global Vertical TKE Limit == \\(\\langle\\)\\(V_{tkelim}\\)\\(\\rangle\\) NA Global Vertical EPS Limit == \\(\\langle\\)\\(V_{epslim}\\)\\(\\rangle\\) NA Internal Wave Mixing Model Parameters == \\(\\langle\\)\\(V_{klim,iw}\\);\\(V_{rich,cr}\\),\\(V_{\\nut,shear}\\),\\(V_{\\nut,r}\\),\\(V_{\\nuh,r}\\)\\(\\rangle\\) NA Second Order Vertical Mixing Model  == \\(\\langle\\)\\(M_{vmmso}\\)\\(\\rangle\\) NA Second Order Vertical Mixing Model Parameter Group == \\(\\langle\\)\\(S_{vmmso-paramsgroup}\\)\\(\\rangle\\) NA Internal Wave Mixing Model == \\(\\langle\\)\\(M_{internalwave}\\)\\(\\rangle\\) NA Update Dt == \\(\\langle\\)\\(dt_{struct}\\)\\(\\rangle\\) NA NLSWE Limit == \\(\\langle\\)\\(B_{nlswelim}\\)\\(\\rangle\\) NA Max Open Width == \\(\\langle\\)\\(d_{struct-mow}\\)\\(\\rangle\\) NA Zone Inlet/Outlet Orientation == \\(\\langle\\)\\(V_{struct-\\theta\\text{in}}\\);\\(V_{struct-\\theta\\text{out}}\\)\\(\\rangle\\) NA Bathy Database == \\(\\langle\\)\\(FPath_{bathbdase}\\)\\(\\rangle\\) NA Read GIS PO == \\(\\langle\\)\\(FPath_{struct-gispo}\\)\\(\\rangle\\) NA External Loop Update == \\(\\langle\\)\\(B_{struct-tsloop}\\)\\(\\rangle\\) NA Autoweir == \\(\\langle\\)\\(M_{autoweir}\\)\\(\\rangle\\) NA NA NA "],["AppParams.html", "Appendix B Parameters", " Appendix B Parameters .book .book-body .page-wrapper .page-inner { max-width: 95%; } Following are parameters that can be specified within TUFLOW CATCH via user commands. Tips for use: Use the search box to dynamically filter the table Sort the filtered (or unfiltered) table by clicking the arrows at the top of each column Use “s” on your keyboard to toggle the contents pane on and off to provide more screen width if needed UD = user defined N/A = not applicable For each parameter, use the links in the final column to navigate to either: A description of the corresponding control file command that includes the parameter (these links are all suffixed with ‘==’) The section containing the relevant descriptions (these links are all called ‘science’) Table B.1: TUFLOW CATCH parameters Parameter Notation Units Range Default Description Links Atmospheric Stability Model \\(M_{asm}\\) [-] [-] [-] 0 Atmospheric Stability Model == Atmospheric Update dt \\(dt_{atm}\\) [-] [-] [-] 0 Atmospheric Update dt  == Boundary Condition Model \\(M_{bc}\\) [-] [-] [-] 0 BC == Boundary Condition Default Value(s) \\(V_{bc-default}\\) [-] [-] [-] 0 BC Default == Global Boundary Condition Update Interval \\(dt_{bc-default}\\) [-] [-] [-] 0 BC Default Update dt  == Boundary Condition Event Wildcard \\(S_{bc-wildcard}\\) [-] [-] [-] 0 BC Event Source == Boundary Condition Data Header(s) \\(S_{bc-header}\\) [-] [-] [-] 0 BC Header == Boundary Condition Nodestrings \\(S_{bc-nodestrings}\\) [-] [-] [-] 0 BC Nodestrings  == Boundary Condition Offset Value(s) \\(V_{bc-offset}\\) [-] [-] [-] 0 BC Offset == Boundary Condition Reference Time \\(T_{bc-ref}\\) [-] [-] [-] 0 BC Reference Time == Boundary Condition Scale Value(s) \\(s_{bc-scale}\\) [-] [-] [-] 0 BC Scale == Boundary Condition Time Units \\(T_{bc-units}\\) [-] [-] [-] 0 BC Time Units == Boundary Condition Update Interval \\(dt_{bc}\\) [-] [-] [-] 0 BC Update dt  == Bed Adjustment Model \\(M_{bedadjust}\\) [-] [-] [-] 0 Bed Adjust == Minimum Bed Elevation Limit \\(V_{mat-zbmin}\\) [-] [-] [-] 0 Bed Elevation Limits == Bed Load Transport Switch \\(B_{bedload}\\) [-] [-] [-] 0 Bed Load Transport  == Blockage File Path \\(FPath_{blockage}\\) [-] [-] [-] 0 Blockage File == Bottom Drag Model \\(M_{bottomdrag}\\) [-] [-] [-] 0 Bottom Drag Model == Manning’s ‘n’ Coefficient \\(C_{n}\\) [-] [-] [-] 0 Bottom Roughness  == Nikuradse Roughness Length \\(d_{ks}\\) [-] [-] [-] 0 Bottom Roughness  == Bulk Latent Heat Coefficient \\(C_{cln}\\) [-] [-] [-] 0 Bulk Latent Heat Coefficient  == Bulk Momentum Transfer Coefficient \\(C_{cdn}\\) [-] [-] [-] 0 Bulk Momentum Transfer Coefficient  == Bulk Sensible Heat Coefficient \\(C_{csn}\\) [-] [-] [-] 0 Bulk Sensible Heat Coefficient == Cell 3D Depth \\(d_{cell3d}\\) m or decimal degrees ft [-] [-] 0 Cell 3D Depth  == Cell Elevation File Path \\(FPath_{cellz}\\) m or decimal degrees ft [-] [-] 0 Cell Elevation File == Cell Elevation Polygon File Path \\(FPath_{polygon}\\) m or decimal degrees ft [-] [-] 0 Cell Elevation Polygon File == Cell Elevation Polyline Filepath \\(FPath_{polyline}\\) m or decimal degrees ft [-] [-] 0 Cell Elevation Polyline File == Cell Size in X Direction \\(d_{cellx}\\) degrees [-] [-] 0 Cell Size == Cell Water Quality Depth \\(d_{cellwq}\\) m or decimal degrees ft [-] [-] 0 Cell Water Quality Depth == Drying Depth \\(d_{dry}\\) m or decimal degrees ft [-] [-] 0 Cell Wet/Dry Depths == CFL Number \\(f_{cfl}\\) [-] (, 1) 1 The Courant–Friedrichs–Lewy (CFL) condition used for the calculation of both the internal (advective) and external (free-surface) terms. The default value is 1.0, which is the theoretical stability limit. In practise this value is commonly lowered to provide additional stability for models that exhibit large gradients in flow, density or constituent concentrations such as the assessment of Tsunami, dam break or lakes with strong vertical stratification. CFL == Science CFL External Number \\(f_{cflext}\\) [-] (, 1) 1 The Courant–Friedrichs–Lewy (CFL) condition for the calculation of external (free-surface) terms only. CFL External == Science CFL Internal Number \\(f_{cflint}\\) [-] (, 1) 1 The Courant–Friedrichs–Lewy (CFL) condition for the calculation of internal (advective) terms only. CFL Internal == Science Constant Timestep \\(dt_{cons}\\) m ft [-] [-] 0 Constant Timestep == Structure Control Model \\(M_{struct-ctrl}\\) [-] [-] [-] 0 Control  == Structure Control File Path \\(FPath_{struct-ctrl}\\) [-] [-] [-] 0 Control File == Structure Control Parameter \\(S_{struct-ctrlparam}\\) [-] [-] [-] 0 Control Parameter  == Control Structure Update Interval \\(dt_{struct-ctrl}\\) [-] [-] [-] 0 Control Update dt  == Culvert File Path \\(FPath_{struct-culv}\\) [-] [-] [-] 0 Culvert File == Culvert Invert Check Behaviour \\(M_{struct-culv-invc}\\) [-] [-] [-] 0 Culvert Invert Check == Culvert Critical Headwater Multplier MJS TODO CHECK \\(V_{struct-culv-crhd}\\) [-] [-] [-] 0 Culvert Parameters  == Tracer Linear Decay Rate \\(R_{trace-decay}\\) [-] [-] [-] 0 Decay Rate == Event Name Definition \\(S_{event}\\) [-] [-] [-] 0 Define Event == Demonstration Model Switch \\(B_{demo}\\) [-] [-] [-] 0 Demo Model  == Default Air Density \\(\\rho_{air}\\) [-] [-] [-] 0 Density Air  == Destratification Model \\(M_{struct-destrat}\\) [-] [-] [-] 0 Destratification Unit == Device ID \\(V_{gpu-id}\\) [-] [-] 0 The GPU PCI bus ID, shown as the ‘device ID’ when running NVIDIA’s System Management Interface (nvidia-smi). Will typically be a zero indexed integer number. For example, a compute machine with four GPU devices will allow seletion of Device 0, 1, 2 or 3. This may be overwritten at runtime via command line argument switches: -cpu, -gpu, and -pu. Device ID == Science Diffusivity Limiter Update Interval \\(dt_{diff-lim}\\) [-] [-] [-] 0 Diffusivity Limiter dt  == Disable Hydrodynamics Switch \\(B_{disable-hd}\\) [-] [-] [-] 0 Disable Hydros == Disable Water Quality Switch \\(B_{disable-wq}\\) [-] [-] [-] 0 Disable Water Quality Model  == Display Depth \\(d_{disp}\\) [-] [-] [-] 0 Display Depth == Log Update Interval \\(dt_{disp}\\) [-] [-] [-] 0 Display dt == Echo Geometry Switch \\(B_{geo}\\) [-] [-] [-] 0 Echo Geometry == Echo Geometry CSV Switch \\(B_{geocsv}\\) [-] [-] [-] 0 Echo Geometry CSV == Echo Geometry NetCDF Switch \\(B_{geonc}\\) [-] [-] [-] 0 Echo Geometry NetCDF == Event Name \\(S_{event}\\) [-] [-] [-] 0 Else If Event == Scenario Name \\(S_{scenario}\\) [-] [-] [-] 0 Else If Scenario == Simulation End Time \\(T_{end}\\) [-] [-] [-] 0 End Time == Energy Loss File Path \\(FPath_{struct-energyloss}\\) [-] [-] [-] 0 Energy Loss File == Energy Loss Model \\(M_{struct-energyloss}\\) [-] [-] [-] 0 Energy Loss Function  == Equation Of State Model \\(M_{equationofstate}\\) [-] [-] [-] 0 Equation Of State == Tracer Evapo-concentration Switch \\(B_{trace-evap}\\) [-] [-] [-] 0 Evapo-Concentrate  == Event File Path \\(FPath_{event}\\) [-] [-] [-] 0 Event File == External Turbulence Model Directory Path \\(DPath_{turbzext}\\) [-] [-] [-] 0 External Turbulence Model Directory == Final Output Time \\(T_{output-final}\\) [-] [-] [-] 0 Final Output  == Flux File Path \\(FPath_{struct-flux}\\) [-] [-] [-] 0 Flux File  == Flux Function Model \\(M_{structure}\\) [-] [-] [-] 0 Flux Function == Form Loss Coefficient \\(C_{struct-flc}\\) [-] [-] [-] 0 Form Loss Coefficient  == Gravitational Acceleration Constant \\(g\\) [-] [-] [-] 0 g == Unstructured Mesh File Path \\(FPath_{geo2d}\\) [-] [-] [-] 0 Geometry 2D == GIS Format Model \\(M_{gisformat}\\) [-] [-] MIF The GIS format used for all output GIS files. • MIF: Mapinfo Interchange Format • SHP: ESRI Shape File GIS Format == Science GIS Projection Check Behaviour \\(M_{gisprojcheck}\\) [-] [-] ERROR The error behaviour when input GIS layer projection information does not match that set by the SHP Projection command. • ERROR: Will stop the simulation and report ERROR 0305 - Projection of .shp file is different to that specified by the SHP Projection == command. • WARNING: Will report a message to the GIS messeges check file, but not stop simulation. GIS Projection Check == Science Global Minimum Bed Elevation Limit \\(V_{globzbmin}\\) [-] [-] [-] 0 Global Bed Elevation Limits == Global Manning’s ‘n’ Coefficient \\(C_{n}\\) [-] [-] [-] 0 Global Bottom Roughness  == Global Nikuradse Roughness Length \\(d_{ks}\\) [-] [-] [-] 0 Global Bottom Roughness  == N/A None [-] [-] [-] 0 Global Horizontal Eddy Viscosity == Global Constant Eddy Viscosity Value \\(V_{\\nu\\text{hglob}}\\) m\\(^2\\)/s ft\\(^2\\)/s (ft\\(^2\\)/s, The eddy viscosity value to simulate sub-grid scale turbulent mixing.) (ft\\(^2\\)/s, 0) 99999 The eddy viscosity value to simulate sub-grid scale turbulent mixing. 0 == Global Smagorinksy Eddy Viscosity Model Coefficient \\(C_{shglob}\\) [-] (, 0.7) 0 The Smagorinsky eddy viscosity model coefficient. Global Horizontal Eddy Viscosity == Science Global Wu Eddy Viscosity Model Coefficient \\(C_{whglob}\\) [-] (, 7) 0 The Wu eddy viscosity model coefficent. Global Horizontal Eddy Viscosity == Science Global Horizontal Eddy Viscosity Minimum Value \\(V_{\\nu\\text{hglobmin}}\\) [-] [-] [-] 0 Global Horizontal Eddy Viscosity Limits == N/A None [-] [-] [-] 0 Global Horizontal Scalar Diffusivity == Global Constant Scalar Diffusivity Value \\(V_{\\nu\\text{hglob}}\\) [-] [-] [-] 0 Global Horizontal Scalar Diffusivity == Global Smagorinksy Scalar Diffusivity Model Coefficient \\(C_{shglob}\\) [-] [-] [-] 0 Global Horizontal Scalar Diffusivity == Global Longitudinal Elder Scalar Diffusivity Model Coefficient \\(C_{\\alpha\\text{longhglob}}\\) [-] [-] [-] 0 Global Horizontal Scalar Diffusivity == N/A Warmup [-] [-] [-] 0 Global Horizontal Scalar Diffusivity == Global Horizontal Scalar Diffusivity Minimum Value \\(V_{\\alpha\\text{hglobmin}}\\) [-] [-] [-] 0 Global Horizontal Scalar Diffusivity Limits == Global Boundary Extrapolation Check Behaviour \\(M_{globtecheck}\\) [-] [-] [-] 0 Global Temporal Extrapolation Check == Global Vertical Eddy Viscosity Minimum Value \\(V_{\\nu\\text{vglobmin}}\\) [-] [-] [-] 0 Global Vertical Eddy Viscosity Limits == Global Vertical Scalar Diffusivity Minimum Value \\(V_{\\alpha\\text{vglobmin}}\\) [-] [-] [-] 0 Global Vertical Scalar Diffusivity Limits == Grid Definition File Path \\(FPath_{griddef}\\) [-] [-] [-] 0 Grid Definition File  == X Coordinate Variable \\(S_{xcoordvar}\\) [-] [-] [-] 0 Grid Definition Variables  == Grid Origin X Coordinate \\(V_{x0}\\) [-] [-] [-] 0 Grid Origin == Grid Rotation \\(V_{grid\\theta}\\) [-] [-] [-] 0 Grid Rotation == Grid Extent in X Direction \\(d_{xmax}\\) [-] [-] [-] 0 Grid Size == Hardware Model \\(M_{hardware}\\) [-] [-] CPU Default hardware type to run TUFLOW FV’s computations. • CPU: Central Processing Unit • GPU: Graphical Processing Unit. This may be overwritten at runtime via command line argument switches: -cpu, -gpu, and -pu. Hardware == Science Surface Heat Relaxation Interval \\(dt_{heatrelax}\\) [-] [-] [-] 0 Heat Relax dt == Horizontal Spatial Order Reduction Factor (Depth) \\(f_{h\\alpha\\text{h}}\\) [-] [-] 1 The horizontal spatial order model. • 1: First Order • 2: Second Order Horizontal AlphaR == Science Constant Horizontal Eddy Viscosity Value \\(V_{mat-h\\nu}\\) [-] [-] [-] 0 Horizontal Eddy Viscosity  == Smagorinksy Eddy Viscosity Model Coefficient \\(C_{mat-sh}\\) [-] [-] [-] 0 Horizontal Eddy Viscosity  == Wu Eddy Viscosity Model Coefficient \\(C_{mat-wh}\\) [-] [-] [-] 0 Horizontal Eddy Viscosity  == Horizontal Eddy Viscosity Minimum Value \\(V_{mat-\\nu\\text{hmin}}\\) [-] [-] [-] 0 Horizontal Eddy Viscosity Limits == Horizontal Gradient Limiter Model \\(M_{hgl}\\) [-] [-] LCD The Total Variation Diminishing (TVD) limiting model. • LCD: Limited Central Difference • MLG: Maximum Limited Gradient Horizontal Gradient Limiter == Science Constant Scalar Diffusivity Value \\(V_{mat-\\nuh}\\) [-] [-] [-] 0 Horizontal Scalar Diffusivity  == Smagorinksy Scalar Diffusivity Model Coefficient \\(C_{mat-sh}\\) [-] [-] [-] 0 Horizontal Scalar Diffusivity  == Longitudinal Elder Scalar Diffusivity Model Coefficient \\(C_{mat-\\alpha\\text{longh}}\\) [-] [-] [-] 0 Horizontal Scalar Diffusivity  == N/A Warmup [-] [-] [-] 0 Horizontal Scalar Diffusivity  == Horizontal Scalar Diffusivity Minimum Value \\(V_{mat-\\alpha\\text{hmin}}\\) [-] [-] [-] 0 Horizontal Scalar Diffusivity Limits == Event Name/s \\(S_{event}\\) [-] [-] [-] 0 If Event == Scenario Name/s \\(S_{scenario}\\) [-] [-] [-] 0 If Scenario == Inactive Material Switch \\(B_{mat-inactive}\\) [-] [-] [-] 0 Inactive == Include File Path \\(FPath_{include}\\) [-] [-] [-] 0 Include == Bed Friction Switch \\(B_{bedfriction}\\) [-] [-] [-] 0 Include Bed Friction == Coriolis Switch \\(B_{coriolis}\\) [-] [-] [-] 0 Include Coriolis == Heat Model \\(M_{heat}\\) [-] [-] [-] 0 Include Heat  == Salinity Model Switch \\(M_{sal}\\) [-] [-] [-] 0 Include Salinity  == Sediment Model Switch \\(M_{sed}\\) [-] [-] [-] 0 Include Sediment  == Stokes Drift Switch \\(B_{stokes}\\) [-] [-] [-] 0 Include Stokes Drift  == Temperature Model Switch \\(M_{temp}\\) [-] [-] [-] 0 Include Temperature  == Wind Drag Switch \\(B_{wind}\\) [-] [-] [-] 0 Include Wind == Boundary Condition Inverse Barometer Correction Switch \\(B_{bc-mslp}\\) [-] [-] [-] 0 Includes MSLP == Initial Condition 2D File Path \\(FPath_{ic2d}\\) [-] [-] [-] 0 Initial Condition 2D == Initial Condition 3D File Path \\(FPath_{ic3d}\\) [-] [-] [-] 0 Initial Condition 3D == Spatially Constant Initial Salinity Concentration \\(K_{icsal}\\) [-] [-] [-] 0 Initial Salinity  == Initial Scalar Profile File Path \\(FPath_{icscalarprof}\\) [-] [-] [-] 0 Initial Scalar Profile == Spatially Constant Initial Sediment Fraction Concentration(s) \\(K_{icsed}\\) [-] [-] [-] 0 Initial Sediment Concentration  == Spatially Constant Initial Temperature \\(V_{ictemp}\\) [-] [-] [-] 0 Initial Temperature == Spatially Constant Initial Tracer Concentration(s) \\(K_{ictrace}\\) [-] [-] [-] 0 Initial Tracer Concentration == Spatially Constant Initial Water Level \\(V_{icwl}\\) [-] [-] [-] 0 Initial Water Level  == Spatially Constant Initial Water Quality Consitutent Concentration(s) \\(K_{icwq}\\) [-] [-] [-] 0 Initial Water Quality Concentration  == Kinematic Viscosity \\(\\nu\\) [-] [-] [-] 0 Kinematic Viscosity  == Latent Heat Model \\(M_{lheat}\\) [-] [-] [-] 0 Latent Heat Model  == Representative Model Latitude \\(\\phi\\) Decimal Degrees (, 90) 0 Latitude (positive for northern hemisphere, negative for southern hemisphere). Latitude == Science Layer Face File Path \\(FPath_{zface}\\) [-] [-] [-] 0 Layer Face File == Log Directory Path \\(DPath_{log}\\) [-] [-] [-] 0 Log Dir  == Longwave Raditional Albedo Value \\(f{\\alpha\\text{lw}}\\) [-] [-] [-] 0 Longwave Radiation Albedo == Longwave Radiation Model \\(M_{lwrad}\\) [-] [-] [-] 0 Longwave Radiation Model == Material ID \\(V_{mat-id}\\) [-] [-] [-] 0 Material  == Structure Scalar Function Maximum Concentration \\(K_{struct-maxc}\\) [-] [-] [-] 0 Max_conc == Structure Scalar Function Minimum Concentration \\(K_{struct-minc}\\) [-] [-] [-] 0 Min_conc == Mapinfo MIF Projection String \\(FPath_{MIProj}\\) [-] [-] [-] 0 MI Projection  == Minimum Allowable Thickness Of Bottom 3D Layer \\(V_{minbotthick}\\) [-] [-] [-] 0 Min Bottom Layer Thickness == Mode Split Switch \\(B_{modesplit}\\) [-] [-] [-] 0 Mode Split == Event Name(s) \\(S_{event}\\) [-] [-] [-] 0 Model Events == Scenario Name(s) \\(S_{scenario}\\) [-] [-] [-] 0 Model Scenarios == Momentum Mixing Model \\(M_{momentum}\\) [-] [-] None Sets the horizontal eddy viscosity model \\(M_{Momentum}\\) to: • {None}: Horizontal viscous mixing is not modelled • Constant: A global user-specified constant value of eddy viscosity • Smagorinsky: The Smagorinsky model • Wu: The Wu model Momentum Mixing Model == Science Structure Name \\(S_{struct-name}\\) [-] [-] [-] 0 Name == Nodestring Polyline File Path \\(FPath_{ns}\\) [-] [-] [-] 0 Nodestring Polyline File == Number of Tracers Value \\(V_{ntracer}\\) [-] [-] [-] 0 Ntracer == Output Model \\(M_{output}\\) [-] [-] [-] 0 Output == Output Compression Switch \\(B_{output-compress}\\) [-] [-] [-] 0 Output Compression  == Output Directory Path \\(DPath_{output}\\) [-] [-] [-] 0 Output Dir == Output Interval \\(dt_{output}\\) [-] [-] [-] 0 Output Interval  == Output Paramater(s) \\(S_{output-params}\\) [-] [-] [-] 0 Output Parameters  == Output Points CSV File Path \\(FPath_{output-pts}\\) [-] [-] [-] 0 Output Points File  == Output Statistics Type1 \\(S_{output-stat1}\\) [-] [-] [-] 0 Output Statistics == Output Statistics Update Interval \\(dt_{output-stat}\\) [-] [-] [-] 0 Output Statistics dt == Particle Tracking Control File Path \\(FPath_{fvptm}\\) [-] [-] [-] 0 Particle Tracking Control File == Scenario Pause Message \\(S_{msg}\\) [-] [-] [-] 0 Pause == Structure Polygon File Path \\(FPath_{struct-polygon}\\) [-] [-] [-] 0 Polygon File == NA NA [-] [-] [-] 0 NA Include File Path \\(FPath_{include}\\) [-] [-] [-] 0 Read File == GIS Materials File Path \\(FPath_{gismat}\\) [-] [-] [-] 0 Read GIS Mat == GIS Nodestring Layer File Path \\(FPath_{gisns}\\) [-] [-] [-] 0 Read GIS Nodestring == GIS Z Line Breakline Layer(s) File Path \\(FPath_{giszline}\\) [-] [-] [-] 0 Read GIS Z Line == GIS Zone Layer File Path \\(FPath_{giszone}\\) [-] [-] [-] 0 Read GIS Zone == Digital Elevation Model File Path \\(FPath_{dem}\\) [-] [-] [-] 0 Read GRID Zpts  == Triangular Irregular Network (TIN) File Path \\(FPath_{tin}\\) [-] [-] [-] 0 Read TIN Zpts == Reference Water Density Value \\(V_{ref\\rho\\text{w}}\\) [-] [-] [-] 0 Reference Density  == Reference Mean Sea Level Pressure Value \\(V_{refmslp}\\) [-] [-] [-] 0 Reference MSLP == Reference Salinity Concentration \\(K_{refsal}\\) [-] [-] [-] 0 Reference Salinity  == Reference Temperature Value \\(V_{reftemp}\\) [-] [-] [-] 0 Reference Temperature  == Global Reference Time \\(T_{ref}\\) [-] [-] [-] 0 Reference Time == Restart File Path \\(FPath_{restarthd}\\) [-] [-] [-] 0 Restart File == Restart File Overwrite Switch \\(B_{restartow}\\) [-] [-] [-] 0 Restart Overwrite  == Structure Scalar Function Scale Factor Value \\(V_{struct-scalf}\\) [-] [-] [-] 0 Scal_fact == Structure Scalar Function Model \\(M_{scalarfunction}\\) [-] [-] [-] 0 Scalar Function == Scalar Mixing Model \\(M_{scalarmixing}\\) [-] [-] [-] 0 Scalar Mixing Model  == Boundary Condition Sediment Concentration Default(s) \\(K_{bc-seddefault}\\) [-] [-] [-] 0 Sed Default == Boundary Condition Sediment Data Header(s) \\(S_{bc-sedheader}\\) [-] [-] [-] 0 Sed Header == Boundary Condition Sediment Concentration Offset Value(s) \\(K_{bc-sedoffset}\\) [-] [-] [-] 0 Sed Offset == Boundary Condition Sediment Concentration Scale Value(s) \\(V_{bc-sedscale}\\) [-] [-] [-] 0 Sed Scale == Sediment Control File Path \\(FPath_{fvsed}\\) [-] [-] [-] 0 Sediment Control File  == Constant Material Value \\(V_{setmat}\\) [-] [-] [-] 0 Set Mat == Variable Name \\(S_{setvar}\\) [-] [-] [-] 0 Set Variable == Constant Bathymetry Value \\(V_{setz}\\) [-] [-] [-] 0 Set Zpts == Tracer Settling Velocity \\(v_{trace-settling}\\) [-] [-] [-] 0 Settling Velocity  == Shortwave Raditional Albedo Value \\(f{\\alpha\\text{sw}}\\) [-] [-] [-] 0 Shortwave Radiation Albedo == Shortwave Radiation Bed Absorbtion Fraction \\(f_{swbedadsorb}\\) [-] [-] [-] 0 Shortwave Radiation Bed Adsorption == Shortwave Near-Infrared Extinction Coefficient \\(C_{\\eta\\text{NIR}}\\) [-] [-] [-] 0 Shortwave Radiation Extintion Coefficients == Shortwave Near-Infrared Fraction \\(f_{NIR}\\) [-] [-] [-] 0 Shortwave Radiation Fractions == Shortwave Radiation Model \\(M_{swrad}\\) [-] [-] [-] 0 Shortwave Radiation Model == Shortwave Near-Infrared Sediment Extinction Coefficient \\(C_{\\eta\\text{NIRsed}}\\) [-] [-] [-] 0 Shortwave Radiation Sediment Extinction Coefficients  == Shapefile Projection String \\(FPath_{shpproj}\\) [-] [-] [-] A .prj file, one of the supporting files for ESRI shape file format (.shp file). The .prj file contains a projection string for checking whether input layers are in the same projection, and for setting the projection of all output layers (e.g. check layers). SHP Projection  == Science GIS Point Snap Tolerance \\(d_{gissnap}\\) [-] [-] [-] 0 Snap Tolerance  == Horizontal Spatial Order Model \\(M_{hspatial}\\) [-] (, 1) 1 A factor to scale the solution of water depth between first and second order. A value of 0.0 solves in first order, a value of 1.0 in second order. Spatial Order  == Science Material Spatial Reconstruction Switch \\(B_{mat-sprecon}\\) [-] [-] [-] 0 Spatial Reconstruction == Specific Heat Of Air Value \\(V_{cair}\\) [-] [-] [-] 0 Specific Heat Air  == Specific Heat Of Water Value \\(V_{cwater}\\) [-] [-] [-] 0 Specific Heat Water  == Spherical Coordinate Switch \\(B_{spherical}\\) [-] (, 1) 0 Flag to specify that the model is in cartesian or spherical coordinates. • 0: Cartesian where geometry inputs and computational coordinates are in metres / feet (Eastings and Northings) • 1: Spherical where geometry inputs and computational coordinates are in degrees (Longitude and Latitude) Spherical  == Science Water Level Stability Limit \\(V_{wlstab}\\) [-] [-] [-] 0 Stability Limits  == Structure Initial Fraction Open \\(f_{struct-ctrl-ini}\\) [-] [-] [-] 0 Start Control State == Start Output Time \\(T_{output-start}\\) [-] [-] [-] 0 Start Output  == Simulation Start Time \\(T_{start}\\) [-] [-] [-] 0 Start Time == Stokes Transport Scale Factor(s) \\(s_{stokes-scale}\\) [-] [-] [-] 0 Stokes Transport Factor  == Control Structure Logging Switch \\(B_{logstruct}\\) [-] [-] [-] 0 Structure Logging == Structure Model \\(M_{struct}\\) [-] [-] [-] 0 Stucture  == Boundary Condition Subtype Model \\(M_{bc-subtype}\\) [-] [-] [-] 0 Sub-type == Output File Name Suffix \\(S_{output-suff}\\) [-] [-] [-] 0 Suffix  == Number of Surface Sigma Layers \\(V_{ssl}\\) [-] [-] [-] 0 Surface Sigma Layers == Surfzone Undertow Scale Factor \\(s_{surfzone}\\) [-] [-] [-] 0 Surfzone Undertow Factor  == Structure Control Target File Path \\(FPath_{struct-ctrl-targ}\\) [-] [-] [-] 0 Target File == Boundary Condition Extrapolation Check Behaviour \\(M_{techeck}\\) [-] [-] [-] 0 Temporal Extrapolation Check == Time Format Model \\(M_{tform}\\) [-] [-] [-] 0 Time Format  == Minimum Allowable Computational Timestep \\(dt_{min}\\) [-] [-] [-] 0 Timestep Limits  == Boundary Condition Tracer Concentration Default(s) \\(K_{bc-tracedefault}\\) [-] [-] [-] 0 Trace Default == Boundary Condition Tracer Data Header(s) \\(S_{bc-traceheader}\\) [-] [-] [-] 0 Trace Header == Boundary Condition Tracer Concentration Offset Value(s) \\(K_{bc-traceoffset}\\) [-] [-] [-] 0 Trace Offset == Boundary Condition Tracer Concentration Scale Value(s) \\(V_{bc-tracescale}\\) [-] [-] [-] 0 Trace Scale == Tracer Model \\(M_{trace}\\) [-] [-] [-] 0 Tracer == Transport Mode Depth \\(d_{trans}\\) [-] [-] [-] 0 Transport Mode Depth  == Structure Control Trigger Value \\(V_{struct-ctrl-trig}\\) [-] [-] [-] 0 Trigger Value == Vertical Turbulence Model Update Time Interval \\(dt_{turbz}\\) [-] [-] [-] 0 Turbulence Update dt  == Tutorial Model Switch \\(B_{tute}\\) [-] [-] [-] 0 Tutorial Model  == Units Model \\(M_{units}\\) [-] [-] Metric The unit system used for all model inputs and outputs. • Metric: SI Units • US Customary: US Customary Units • Imperial: Alias for US Customary Units • English: Alias for US Customary UnitsUS Customary, Imperial, and English are equivilant. Units  == Science Use Restart File Time Switch \\(B_{rstime}\\) [-] [-] [-] 0 Use Restart File Time == Vapour Pressure Salinity Params A \\(K_{vapa}\\) [-] [-] [-] 0 Vapour Pressure Salinity Params == Vertical Spatial Order Reduction Factor (Velocity) \\(f_{v\\alpha\\text{v}}\\) [-] [-] [-] 0 Vertical Alpha R == Output Vertical Averaging Model \\(M_{output-vave}\\) [-] [-] [-] 0 Vertical Averaging == Boundary Condition Vertical Coordinate Model \\(M_{bc-vcoord}\\) [-] [-] [-] 0 Vertical Coordinate Type == Structure Vertical Coordinate Model \\(M_{struct-vcoord}\\) [-] [-] [-] 0 Vertical Coordinate Type == Boundary Condition Vertical Coordinate File Path \\(FPath_{bc-vcoord}\\) [-] [-] [-] 0 Vertical Distribution File  == Structure Vertical Coordinate File Path \\(FPath_{struct-vcoord}\\) [-] [-] [-] 0 Vertical Distribution File  == Vertical Eddy Viscosity Minimum Value \\(V_{mat-\\nu\\text{vmin}}\\) [-] [-] [-] 0 Vertical Eddy Viscosity Limits == Vertical Gradient Limiter Model \\(M_{vgl}\\) [-] [-] [-] 0 Vertical Gradient Limiiter == Vertical Mesh Model \\(M_{meshz}\\) [-] [-] [-] 0 Vertical Mesh Type == Vertical Mixing Model \\(M_{vmixing}\\) [-] [-] [-] 0 Vertical Mixing Model == Constant Vertical Eddy Viscosity/Scalar Diffusivity Value \\(V_{\\nu\\text{vglob}}\\) [-] [-] [-] 0 Vertical Mixing Parameters == Parametric Vertical Eddy Viscosity Model Coefficient A \\(C_{paraa}\\) [-] [-] [-] 0 Vertical Mixing Parameters == External Vertical Mixing Model Eddy Viscosity Scale Factor \\(s_{ext\\nu}\\) [-] [-] [-] 0 Vertical Mixing Parameters == K-Epsilon Model Production To Dissapation Coefficient \\(C_{k-e-1\\varepsilon}\\) [-] [-] [-] 0 Vertical Mixing Parameters == Production Term Coefficient \\(K_{k-o-\\alpha}\\) [-] [-] [-] 0 Vertical Mixing Parameters == Vertical Scalar Diffusivity Minimum Value \\(V_{mat-\\alpha\\text{vmin}}\\) [-] [-] [-] 0 Vertical Scalar Diffusivity Limits == Tracer Water Age Switch \\(B_{trace-age}\\) [-] [-] [-] 0 Water Age == Water Emissivity Ratio \\(X_{\\varepsilon\\text{w}}\\) [-] [-] [-] 0 Water Emissivity == Water Quality Control File Path \\(FPath_{fvwq}\\) [-] [-] [-] 0 Water Quality Control File == Water Quality Model \\(M_{wq}\\) [-] [-] [-] 0 Water Quality Model  == Water Quality Model Directory Path \\(DPath_{wq}\\) [-] [-] [-] 0 Water Quality Model Directory  == Wave Depth Correction Switch \\(B_{wavedepthcorr}\\) [-] [-] [-] 0 Wave Depth Correction  == Wave Gamma \\(X_{wave\\gamma}\\) [-] [-] [-] 0 Wave Parameters  == Structure Width File Path \\(Fpath_{struct-width}\\) [-] [-] [-] 0 Width File == Wind Stress Model \\(M_{windstress}\\) [-] [-] [-] 0 Wind Stress Model == Wu Lower Wind Speed Threshold \\(v_{winda}\\) [-] [-] [-] 0 Wind Stress Parameters == Kondo Wind Stress Scale Factor \\(s_{windkondo}\\) [-] [-] [-] 0 Wind Stress Parameters == Boundary Condition Water Quality Concentration Default(s) \\(K_{bc-wqdefault}\\) [-] [-] [-] 0 WQ Default == Boundary Condition Water Quality Data Header(s) \\(S_{bc-wqheader}\\) [-] [-] [-] 0 WQ Header == Boundary Condition Water Quality Concentration Offset Value(s) \\(K_{bc-wqoffset}\\) [-] [-] [-] 0 WQ Offset == Boundary Condition Water Quality Concentration Scale Value(s) \\(V_{bc-wqscale}\\) [-] [-] [-] 0 WQ Scale == Check Files Output Directory Path \\(Dpath_{check}\\) [-] [-] [-] 0 Write Check Files == Empty GIS Files Directory \\(FPath_{emtpy}\\) [-] [-] [-] 0 Write Empty GIS Files == Write Restart File Update Interval \\(dt_{restart}\\) [-] [-] [-] 0 Write Restart dt  == Legacy Include File Path Type Switch \\(B_{legincl}\\) [-] [-] [-] 0 Legacy Include Paths == GIS SA Layer File Path \\(FPath_{gissa}\\) [-] [-] [-] 0 Read GIS SA == Output CLF Diagnostic File Switch \\(B_{clfstats}\\) [-] [-] [-] 0 Output CFL Stats == Log Update Interval \\(dt_{disp}\\) [-] [-] [-] 0 Screen/Log Display Interval  == Vertical Mixing Length Scale Limiter Galperin Coefficient \\(C_{gabl}\\) [-] [-] [-] 0 Vertical Mixing Length Scale Limiter == Global Vertical TKE Minimum \\(V_{tkelim}\\) [-] [-] [-] 0 Global Vertical TKE Limit == Global Vertical EPS Minimum \\(V_{epslim}\\) [-] [-] [-] 0 Global Vertical EPS Limit == Internal Wave Model Turbulence Extinction Limit \\(V_{klim,iw}\\) [-] [-] [-] 0 Internal Wave Mixing Model Parameters == Second Order Vertical Mixing Model \\(M_{vmmso}\\) [-] [-] [-] 0 Second Order Vertical Mixing Model  == Second Order Vertical Mixing Model Parameter Group \\(S_{vmmso-paramsgroup}\\) [-] [-] [-] 0 Second Order Vertical Mixing Model Parameter Group == Internal Wave Mixing Model \\(M_{internalwave}\\) [-] [-] [-] 0 Internal Wave Mixing Model == Structure Update Interval \\(dt_{struct}\\) [-] [-] [-] 0 Update Dt == Structure Non-Linear Shallow Water Equation Flux Limiter \\(B_{nlswelim}\\) [-] [-] [-] 0 NLSWE Limit == Zone Structure Maximum Open Flow Width \\(d_{struct-mow}\\) [-] [-] [-] 0 Max Open Width == Zone Structure Inlet Orientation \\(V_{struct-\\theta\\text{in}}\\) [-] [-] [-] 0 Zone Inlet/Outlet Orientation == Bathymetry Database File Path \\(FPath_{bathbdase}\\) [-] [-] [-] 0 Bathy Database == GIS Plot Output Layer File Path \\(FPath_{struct-gispo}\\) [-] [-] [-] 0 Read GIS PO == Structure External Timestep Switch \\(B_{struct-tsloop}\\) [-] [-] [-] 0 External Loop Update == Autoweir Model \\(M_{autoweir}\\) [-] [-] [-] 0 Autoweir == Boundary Condition Event Source \\(S_{bc-eventsource}\\) [-] [-] [-] 0 BC Event Source == Maximum Bed Elevation Limit \\(V_{mat- zbmax}\\) [-] [-] [-] 0 Bed Elevation Limits == Cell Elevation File Format \\(M_{xytype}\\) [-] [-] [-] 0 Cell Elevation File == Polygon Elevation \\(V_{zbpoly}\\) [-] [-] [-] 0 Cell Elevation Polygon File == Polyline ID \\(V_{polylineid}\\) [-] [-] [-] 0 Cell Elevation Polyline File == Cell Size in Y Direction \\(d_{celly}\\) [-] [-] [-] 0 Cell Size == Wetting Depth \\(d_{wet}\\) [-] [-] [-] 0 Cell Wet/Dry Depths == Reserved Reserved [-] [-] [-] 0 Culvert Parameters  == Global Maximum Bed Elevation Limit \\(V_{globzbmax}\\) [-] [-] [-] 0 Global Bed Elevation Limits == Global Horizontal Eddy Viscosity Maximum Value \\(V_{\\nu\\text{hglobmax}}\\) [-] [-] [-] 0 Global Horizontal Eddy Viscosity Limits == Global Transverse Elder Scalar Diffusivity Model Coefficient \\(C_{\\alpha\\text{transhglob}}\\) [-] [-] [-] 0 Global Horizontal Scalar Diffusivity == Global Horizontal Scalar Diffusivity Maximum Value \\(V_{\\alpha\\text{hglobmax}}\\) [-] [-] [-] 0 Global Horizontal Scalar Diffusivity Limits == Global Vertical Eddy Viscosity Maximum Value \\(V_{\\nu\\text{vglobmax}}\\) [-] [-] [-] 0 Global Vertical Eddy Viscosity Limits == Global Vertical Scalar Diffusivity Maximum Value \\(V_{\\alpha\\text{vglobmax}}\\) [-] [-] [-] 0 Global Vertical Scalar Diffusivity Limits == Y Coordinate Variable \\(S_{ycoordvar}\\) [-] [-] [-] 0 Grid Definition Variables  == Grid Origin Y Coordinate \\(V_{y0}\\) [-] [-] [-] 0 Grid Origin == Grid Extent in Y Direction \\(d_{ymax}\\) [-] [-] [-] 0 Grid Size == Horizontal Spatial Order Reduction Factor (Velocity) \\(f_{h\\alpha\\text{v}}\\) [-] (, 1) 1 A factor to scale the solution of horizontal flow velocity between first and second order. A value of 0.0 solves in first order, a value of 1.0 in second order. Horizontal AlphaR == Science Horizontal Eddy Viscosity Maximum Value \\(V_{mat-\\nu\\text{hmax}}\\) [-] [-] [-] 0 Horizontal Eddy Viscosity Limits == Transverse Elder Scalar Diffusivity Model Coefficient \\(C_{mat-\\alpha\\text{transh}}\\) [-] [-] [-] 0 Horizontal Scalar Diffusivity  == Horizontal Scalar Diffusivity Maximum Value \\(V_{mat-\\alpha\\text{hmax}}\\) [-] [-] [-] 0 Horizontal Scalar Diffusivity Limits == Salinity Density Model \\(M_{sal\\rho}\\) [-] [-] [-] 0 Include Salinity  == Sediment Density Model \\(M_{sed\\rho}\\) [-] [-] [-] 0 Include Sediment  == Temperature Density Model \\(M_{temp\\rho}\\) [-] [-] [-] 0 Include Temperature  == Output Statistics Type2 \\(S_{output-stat2}\\) [-] [-] [-] 0 Output Statistics == Shortwave Radiation Bottom Layer Absorbtion Fraction \\(f_{swbotadsorb}\\) [-] [-] [-] 0 Shortwave Radiation Bed Adsorption == Shortwave Photosynthetically Active Radiation Extinction Coefficient \\(C_{\\eta\\text{PAR}}\\) [-] [-] [-] 0 Shortwave Radiation Extintion Coefficients == Shortwave Photosynthetically Active Radiation Fraction \\(f_{PAR}\\) [-] [-] [-] 0 Shortwave Radiation Fractions == Shortwave Photosynthetically Active Radiation Sediment Extinction Coefficient \\(C_{\\eta\\text{PARsed}}\\) [-] [-] [-] 0 Shortwave Radiation Sediment Extinction Coefficients  == Vertical Spatial Order Model \\(M_{vspatial}\\) [-] [-] 1 The vertical spatial order model. • 1: First Order • 2: Second Order Spatial Order  == Science Velocity Stability Limit \\(v_{vstab}\\) [-] [-] [-] 0 Stability Limits  == Maximum Allowable Computational Timestep \\(dt_{max}\\) [-] [-] [-] 0 Timestep Limits  == Vapour Pressure Salinity Params B \\(K_{vapab}\\) [-] [-] [-] 0 Vapour Pressure Salinity Params == Vertical Spatial Order Reduction Factor (Scalars) \\(f_{v\\alpha\\text{s}}\\) [-] [-] [-] 0 Vertical Alpha R == Vertical Eddy Viscosity Maximum Value \\(V_{mat-\\nu\\text{vmax}}\\) [-] [-] [-] 0 Vertical Eddy Viscosity Limits == Parametric Vertical Eddy Viscosity Model Coefficient B \\(C_{paraab}\\) [-] [-] [-] 0 Vertical Mixing Parameters == External Vertical Mixing Model Scalar Diffusivity Scale Factor \\(s_{ext\\alpha}\\) [-] [-] [-] 0 Vertical Mixing Parameters == K-Epsilon Model Dissipation Rate Coefficient \\(C_{k-e-2\\varepsilon}\\) [-] [-] [-] 0 Vertical Mixing Parameters == Dissipation Term Coefficient \\(C_{k-o-\\beta}\\) [-] [-] [-] 0 Vertical Mixing Parameters == Vertical Scalar Diffusivity Maximum Value \\(V_{mat-\\alpha\\text{vmax}}\\) [-] [-] [-] 0 Vertical Scalar Diffusivity Limits == Wave Depth Limit \\(d_{wavelimit}\\) [-] [-] [-] 0 Wave Parameters  == Wu Lower Wind Speed Drag Coefficient \\(K_{winda}\\) [-] [-] [-] 0 Wind Stress Parameters == Internal Wave Model Critical Richardson Number \\(V_{rich,cr}\\) [-] [-] [-] 0 Internal Wave Mixing Model Parameters == Zone Structure Outlet Orientation \\(V_{struct-\\theta\\text{out}}\\) [-] [-] [-] 0 Zone Inlet/Outlet Orientation == Polygon ID \\(V_{polygonid}\\) [-] [-] [-] 0 Cell Elevation Polygon File == Reserved Reserved [-] [-] [-] 0 Culvert Parameters  == Z Coordinate Variable \\(S_{zcoordvar}\\) [-] [-] [-] 0 Grid Definition Variables  == Horizontal Spatial Order Reduction Factor (Scalars) \\(f_{h\\alpha\\text{s}}\\) [-] (, 1) 1 A factor to scale the solution of horizontal scalar fluxes between first and second order. A value of 0.0 solves in first order, a value of 1.0 in second order. Horizontal AlphaR == Science Shortwave Ultraviolet A Extinction Coefficient \\(C_{\\eta\\text{UVA}}\\) [-] [-] [-] 0 Shortwave Radiation Extintion Coefficients == Shortwave Ultraviolet A Fraction \\(f_{UVA}\\) [-] [-] [-] 0 Shortwave Radiation Fractions == Shortwave Ultraviolet A Sediment Extinction Coefficient \\(C_{\\eta\\text{UVAsed}}\\) [-] [-] [-] 0 Shortwave Radiation Sediment Extinction Coefficients  == Vapour Pressure Salinity Params C \\(K_{vapc}\\) [-] [-] [-] 0 Vapour Pressure Salinity Params == K-Epsilon Model Empirical Eddy Viscosity Coefficient \\(C_{k-e-\\mu}\\) [-] [-] [-] 0 Vertical Mixing Parameters == K-Omega Model Empirical Eddy Viscosity Coefficient \\(C_{k-o-\\mu}\\) [-] [-] [-] 0 Vertical Mixing Parameters == Wu Upper Wind Speed Threshold \\(v_{windb}\\) [-] [-] [-] 0 Wind Stress Parameters == Internal Wave Model Shear Instability Viscosity \\(V_{\\nut,shear}\\) [-] [-] [-] 0 Internal Wave Mixing Model Parameters == Culvert Energy Loss Adjustment Switch \\(B_{struct-culv-adjust}\\) [-] [-] [-] 0 Culvert Parameters  == Shortwave Ultraviolet B Extinction Coefficient \\(C_{\\eta\\text{UVB}}\\) [-] [-] [-] 0 Shortwave Radiation Extintion Coefficients == Shortwave Ultraviolet B Fraction \\(f_{UVB}\\) [-] [-] [-] 0 Shortwave Radiation Fractions == Shortwave Ultraviolet B Sediment Extinction Coefficient \\(C_{\\eta\\text{UVBsed}}\\) [-] [-] [-] 0 Shortwave Radiation Sediment Extinction Coefficients  == K-Epsilon Model Turbulent Prandtl Number For \\(k\\) \\(C_{k-e-\\sigmak}\\) [-] [-] [-] 0 Vertical Mixing Parameters == K-Omega Model Turbulent Prandtl Number For \\(k\\) \\(C_{k-o-\\sigmak}\\) [-] [-] [-] 0 Vertical Mixing Parameters == Wu Upper Wind Speed Drag Coefficient \\(K_{windb}\\) [-] [-] [-] 0 Wind Stress Parameters == Internal Wave Model Viscosity \\(V_{\\nut,r}\\) [-] [-] [-] 0 Internal Wave Mixing Model Parameters == Culvert Total Energy Head Switch \\(B_{struct-culv-th}\\) [-] [-] [-] 0 Culvert Parameters  == K-Epsilon Model Turbulent Prandtl Number For \\(\\varepsilon\\) \\(C_{k-e-\\sigma\\varepsilon}\\) [-] [-] [-] 0 Vertical Mixing Parameters == K-Omega Model Turbulent Prandtl Number For \\(\\omega\\) \\(C_{k-o-\\sigma\\omega}\\) [-] [-] [-] 0 Vertical Mixing Parameters == Internal Wave Model Diffusivity \\(V_{\\nuh,r}\\) [-] [-] [-] 0 Internal Wave Mixing Model Parameters == K-Epsilon Model Buoyancy Production Term - Stable Stratification \\(C_{k-e-3\\varepsilon}^{+}\\) [-] [-] [-] 0 Vertical Mixing Parameters == K-Omega Model Buoyancy Production Term - Stable Stratification \\(C_{k-o-3\\omega}^{+}\\) [-] [-] [-] 0 Vertical Mixing Parameters == K-Epsilon Model Buoyancy Production Term - Unstable Stratification \\(C_{k-e-3\\varepsilon}^{-}\\) [-] [-] [-] 0 Vertical Mixing Parameters == K-Omega Model Buoyancy Production Term - Unstable Stratification \\(C_{k-o-3\\omega}^{-}\\) [-] [-] [-] 0 Vertical Mixing Parameters == "],["AppFiles.html", "Appendix C Files and Data Fields C.1 Surface water concentrations C.2 Groundwater concentrations C.3 Dry mass C.4 Net mass C.5 Other outputs", " Appendix C Files and Data Fields .book .book-body .page-wrapper .page-inner { max-width: 95%; } Depending on the supported configuration selected, TUFLOW CATCH outputs one or more files, each with their own data fields. If the recommended output protocols described in Section ?? are followed, then these are: TUFLOW HPC One *.xmdf with all catchment based results TUFLOW FV One *.nc for hydrodynamics and sediments One *.nc for water quality Possibly others (e.g. particle tracking) Each of these files has any number of data fields, depending on the TUFLOW CATCH configuration, selected pollutants and water quality module settings. Notwithstanding this, the following will hold under the above output protocols: All TUFLOW CATCH map data fields will be contained within the TUFLOW HPC results file (*.xmdf) Receiving waterway hydrodynamic map data fields are those of standard TUFLOW FV outputs (*.nc) Receiving waterway water quality map data fields are those of standard TUFLOW FV WQ outputs (*.nc) The outputs and data fields of the second two points above are not dealt with here because they are described in the TUFLOW FV Manuals and TUFLOW FV WQ Manual Appendices. The first point above (TUFLOW CATCH data fields) is dealt with in this Appendix. Rather than attempt to list every potential data field that might be included in this output file, the attributes of the available data field types are presented. The names of these data fields will vary depending on pollutant names and other parameters, but each type follows a set naming convention. These data field types are: Surface water concentration Groundwater Layer concentration Dry mass Net mass These are described in the following sections. C.1 Surface water concentrations Surface water concentration data fields have the following properties: Content: Reports the temporally and spatially varying concentration of a dissolved or particulate pollutant in surface water Name: “Conc &lt;pollutant_name&gt;”, e.g. “Conc WQ_NITRATE_MG_L” Units: mg/L when Washoff1 model accumulation rates are specified in kg/ha/yr mg/L when Shear1 erosion rates are specified in g/m\\(^2\\)/s These fields are reported at all wet TUFLOW HPC cells for all simulated constituents that are listed within pollutant export material blocks. Constant and timeseries pollutants are not reported because they are assigned only during boundary condition writing, rather than being numerically simulated in the catchment domain. C.2 Groundwater concentrations Groundwater concentration data fields have the following properties: Content: Reports the temporally and spatially varying concentration of a dissolved or particulate pollutant in groundwater associated with soil layer N (N = 1, 2, …) Name: “GW Layer &lt;Layer number&gt; Conc &lt;pollutant_name&gt;”, e.g. “GW Layer 1 Conc PFAS” Units: mg/L when Washoff1 model accumulation rates are specified in kg/ha/yr mg/L when Shear1 erosion rates are specified in g/m\\(^2\\)/s These fields are reported at all TUFLOW HPC cells for all simulated constituents that are listed within pollutant export material blocks. Constant and timeseries pollutants are not reported because they are assigned only during boundary condition writing, rather than being simulated in the catchment domain. These GW Layer data fields will be zero at all times and locations for a given pollutant &lt;name&gt; if its infiltration has been set to off via Infiltration &lt;name&gt; == off C.3 Dry mass Dry mass data fields are created and reported only for pollutants that are set to use the Washoff1 pollutant export model. They have the following properties: Content: Reports the temporally and spatially varying dry mass of accumulated pollutant. It is initialised to zero at simulation commencement Name: “Dry Mass &lt;pollutant_name&gt;”, e.g. “Dry Mass WQ_POC_MG_L” Units: kg/ha when Washoff1 model accumulation rates are specified in kg/ha/yr These fields are reported at all TUFLOW HPC cells for all simulated constituents that are listed within pollutant export material blocks and use the Washoff1 pollutant export model. Constant and timeseries pollutants are not reported because they are assigned only during boundary condition writing, rather than being simulated in the catchment domain. Multiplying each pollutant’s Dry Mass outputs by the TUFLOW HPC cell area (in hectares) and summing across the domain will compute the total dry store mass of each pollutant (in kilograms) as a function of time. C.4 Net mass Net mass data fields are created and reported only for pollutants that are set to use the Shear1 pollutant export model. They have the following properties: Content: Reports the temporally and spatially varying net mass of a pollutant. It is initialised to zero at simulation commencement. A negative/positive number at a given location reflects net erosion/deposition, respectively Name: “Net Mass &lt;pollutant_name&gt;”, e.g. “Net Mass WQ_SED_FINES” Units: kg/ha when Shear1 model accumulation rates are specified in g/m\\(^2\\)/s These fields are reported at all TUFLOW HPC cells for all simulated constituents that are listed within pollutant export material blocks and use the Shear1 pollutant export model. Constant and timeseries pollutants are not reported because they are assigned only during boundary condition writing, rather than being simulated in the catchment domain. Dividing each pollutant’s Net Mass outputs by a user defined bulk density, and then again dividing by 10000 (i.e. m\\(^2\\)/ha) will compute the erosion or deposition depth of each pollutant as a function of space and time. C.5 Other outputs TUFLOW CATCH produces a small suite of supporting outputs that are simple text files. These are listed below. If the TUFLOW CATCH BC output folder is set to ..\\bc_dase as recommended: Catch BC Output Folder == ..\\bc_dbase then all files below are written to the TUFLOWCatch\\bc_dbase\\ folder. C.5.1 Mass balance A series of three mass balance files are written as follows (assuming a *.tcc file name of Model_001.tcc). C.5.1.1 Surface water mass balance One file per simulation is produced as follows: Content: Timeseries of spatially summed cumulative surface water flow and associated pollutant masses leaving the TUFLOW HPC model (either to a polygon (Pollutant export TUFLOW CATCH configuration) or TUFLOW FV model domain (Hydrology and Integrated TUFLOW CATCH configurations)) Name: Model_001_catchment_hydraulic_mass_balance_surface.csv Units: Time: ISODATE format Volume: m\\(^3\\) (cumulative) All pollutants: g (cumulative) (not reported for Hydrology configuration as pollutants are not simulated) Uses Can be directly imported into common plotting packages to show total surface cumulative flow and pollutant mass export at the outlet of the TUFLOW HPC model domain (or, equally, entry to the TUFLOW FV domain if used) Provides an accessible means of high level scenario comparisons, for example where cumulative surface catchment flows and pollutants loads are to be compared between different catchment land use options, management interventions or rainfall sequences C.5.1.2 Groundwater mass balance One file per simulation is produced as follows: Content: Timeseries of spatially summed cumulative groundwater flow and associated pollutant masses leaving the TUFLOW HPC model (either to a polygon (Pollutant export TUFLOW CATCH configuration) or TUFLOW FV model domain (Hydrology and Integrated TUFLOW CATCH configurations)) Name: Model_001_catchment_hydraulic_mass_balance_groundwater.csv Units: Time: ISODATE format Volume: m\\(^3\\) (cumulative) All pollutants: g (cumulative) (not reported for Hydrology configuration as pollutants are not simulated) Uses Can be directly imported into common plotting packages to show total groundwater cumulative flow and pollutant mass export at the outlet of the TUFLOW HPC model domain (or, equally, entry to the TUFLOW FV domain if used) Provides an accessible means of high level scenario comparisons, for example where cumulative groundwater catchment flows and pollutants loads are to be compared between different catchment land use options, management interventions or rainfall sequences C.5.1.3 Total mass balance One file per simulation is produced as follows. Its content is the summation of the data reported in the respective surface and groundwater mass balance outputs described in Sections C.5.1.1 and C.5.1.2: Content: Timeseries of spatially summed cumulative surface and groundwater flow and associated pollutant masses combined leaving the TUFLOW HPC model (either to a polygon (Pollutant export TUFLOW CATCH configuration) or TUFLOW FV model domain (Hydrology and Integrated TUFLOW CATCH configurations)) Name: Model_001_catchment_hydraulic_mass_balance.csv Units: Time: ISODATE format Volume: m\\(^3\\) (cumulative) All pollutants: g (cumulative) (not reported for Hydrology configuration as pollutants are not simulated) Uses Can be directly imported into common plotting packages to show cumulative total flow and pollutant mass export at the outlet of the TUFLOW HPC model domain (or, equally, entry to the TUFLOW FV domain if used) Provides an accessible means of high level scenario comparisons, for example where cumulative total catchment flows and pollutants loads are to be compared between different catchment land use options, management interventions or rainfall sequences C.5.2 Receiving polygon If TUFLOW CATCH has been executed in the Pollutant export configuration, then a timeseries output file is produced that reports incoming flow and concentrations to that user defined polygon. This is broadly a concentration based equivalent to the output described in Section C.5.1.3, with some extra fields reported. Assuming a *.tcc file name of Model_001.tcc has been executed, the file is as follows: Content: Timeseries of spatially summed instantaneous surface and groundwater flow and associated pollutant concentrations combined leaving the TUFLOW HPC model to a polygon (Pollutant export TUFLOW CATCH configuration) Name: Model_001_catchment_hydraulic_receiving.csv Units: Time: ISODATE format Flow: m\\(^3\\)/s Salinity: g/L if used Temperature: \\(^{\\circ}\\)C if used All pollutants: mg/L or \\(\\mu\\)g/L as appropriate for each sediment fraction or water quality pollutant Uses Can be directly imported into common plotting packages to show instantaneous total flow and pollutant concentrations at the outlet of the TUFLOW HPC model domain Provides an accessible means of high level scenario comparisons, for example where total catchment flows and pollutants concentrations are to be compared between different catchment land use options, management interventions or rainfall sequences C.5.3 TUFLOW FV boundaries A series of TUFLOW FV boundary related files are written as follows. C.5.3.1 BC blocks A single file that contains all required TUFLOW FV nodestring (Q) and cell (QC) inflow boundary BC blocks is written by TUFLOW CATCH. This file is called automatically by TUFLOW FV under TUFLOW CATCH when required. It is at the heart of the automated linking offered by TUFLOW CATCH. Users should not edit this file in any way. Content: TUFLOW FV BC blocks that direct TUFLOW FV to boundary condition data files prepared by TUFLOW HPC under TUFLOW CATCH. Only produced in the Hydrology and Integrated TUFLOW CATCH configurations. Two example blocks are shown below !----------------------------------------------------------------------------------------- ! Nodestring boundaries BC == Q, NW_Inflow, NW_Inflow.csv Sub-Type == 2 BC Header == Time,Flow,Salinity,Temperature,SED_FINES End BC !----------------------------------------------------------------------------------------- ! Lateral boundaries BC == QC, 1178572.028, 4996161.397, cell1.csv BC Header == Time,Flow,Salinity,Temperature,SED_FINES End BC Name: Model_001_catchment_hydraulic.fvcatchbc Units: NA Uses Used internally by TUFLOW CATCH to link TUFLOW HPC and TUFLOW FV simulations. Users should not edit this file in any way This file calls underlying nodestring and/or lateral boundary condition data files produced by TUFLOW HPC, and these are described below. C.5.3.2 Nodestring boundary data If TUFLOW CATCH has been executed in the Hydrology or Integrated configuration and TUFLOW FV nodestrings have been specified as catchment inflows via Catchment BC Nodestring == &lt;path to GIS nodestring file&gt; then individual data files are produced for each nodestring boundary: Content: Timeseries of flow and associated pollutant concentrations crossing the nodestring Name: “&lt;GIS name&gt;.csv”, e.g. “SW_Inflow.csv”, where “SW_Inflow” is the user defined name given to the nodestring in GIS Units: Time: ISODATE format Flow: m\\(^3\\)/s Salinity: g/L if used Temperature: \\(^{\\circ}\\)C if used All pollutants: mg/L or \\(\\mu\\)g/L as appropriate for each sediment fraction or water quality pollutant Uses Called by Model_001_catchment_hydraulic.fvcatchbc to link TUFLOW HPC and TUFLOW FV under TUFLOW CATCH. Users should not edit this file in any way, including opening and saving it in Excel, which can cause the time format to change and become unreadable. C.5.3.3 Lateral boundary data If TUFLOW CATCH has been executed in the Hydrology or Integrated configuration then individual lateral data files are produced for each transfer cell boundary: Content: Timeseries of flow and associated pollutant concentrations entering a cell Name: “cell_&lt;TUFLOW mesh cell ID&gt;.csv”, e.g. “cell37.csv”, where 37 is the 2D cell ID in the TUFLOW FV mesh Units: Time: ISODATE format Flow: m\\(^3\\)/s Salinity: g/L if used Temperature: \\(^{\\circ}\\)C if used All pollutants: mg/L or \\(\\mu\\)g/L as appropriate for each sediment fraction or water quality pollutant Uses Called by Model_001_catchment_hydraulic.fvcatchbc to link TUFLOW HPC and TUFLOW FV under TUFLOW CATCH. Users should not edit this file in any way, including opening and saving it in Excel, which can cause the time format to change and become unreadable. "],["AppProc-GE-2.html", "Appendix D Processes: Governing Equations And Numerical Scheme D.1 Context D.2 Governing Equations D.3 Scalar Conservation Equations D.4 Units D.5 Cell Topology D.6 Numerical Scheme D.7 Atmospheric Heat Exchange D.8 References", " Appendix D Processes: Governing Equations And Numerical Scheme MJS to be developed further. To be restructured to have structure of solver science organised by simulation class. Initial conversion only. D.1 Context MJS Will contain the general content within Chapters 2, 3 and 4 of the existing science manual, however we’ll break down the equations etc. more clearly into 2D, 3D, AD etc. D.2 Governing Equations TUFLOW FV solves the Non-Linear Shallow Water Equations (NLSWE), including viscous flux terms and various source terms on a flexible mesh comprised of triangular and quadrilateral elements. The NLSWE describes the conservation of mass and momentum in an incompressible fluid under hydrostatic pressure and the Boussinesq approximation. The equations relate the time-derivative of the conserved variables to flux-gradient and source terms: \\[\\begin{equation} \\frac{\\partial \\mathbf{U}}{\\partial t} + \\nabla \\cdot \\mathbf{F}(\\mathbf{U}) = \\mathbf{S}(\\mathbf{U}) \\tag{D.1} \\end{equation}\\] The finite-volume schemes are derived from the conservative integral form of the NLSWE, obtained by integrating the conservation equations over a control volume \\(\\Omega\\): \\[\\begin{equation} \\int_{\\Omega} \\frac{\\partial \\mathbf{U}}{\\partial t} d\\Omega + \\int_{\\Omega} \\nabla \\cdot \\mathbf{F}(\\mathbf{U}) d\\Omega = \\int_{\\Omega} \\mathbf{S}(\\mathbf{U}) d\\Omega \\tag{D.2} \\end{equation}\\] Applying Gauss’ theorem, the flux-gradient volume integral is rewritten as a boundary integral: \\[\\begin{equation} \\frac{\\partial}{\\partial t} \\int_{\\Omega} \\mathbf{U} d\\Omega + \\oint_{\\partial \\Omega} (\\mathbf{F} \\cdot \\mathbf{n}) ds = \\int_{\\Omega} \\mathbf{S}(\\mathbf{U}) d\\Omega \\tag{D.3} \\end{equation}\\] where \\(\\int_{\\Omega} d\\) represents volume integrals, \\(\\oint_{\\partial \\Omega} ds\\) represents a boundary integral, and \\(\\mathbf{n}\\) is the unit-normal vector. The NLSWE conserved variables are volume (depth), x-momentum, and y-momentum: \\[\\begin{equation} \\mathbf{U} = \\begin{bmatrix} h \\\\ hu \\\\ hv \\end{bmatrix} \\tag{D.4} \\end{equation}\\] where: - \\(h\\) is depth - \\(u\\) is x-velocity - \\(v\\) is y-velocity The x, y, and z components of the inviscid flux \\(\\mathbf{F}^I\\) and viscous flux \\(\\mathbf{F}^V\\) terms in the NLSWE are given via Equation (??) \\[\\begin{equation} \\mathbf{F}_x^I = \\begin{bmatrix} hu \\\\ hu^2 + \\frac{1}{2} gh^2 \\\\ huv \\end{bmatrix}, \\quad \\mathbf{F}_x^V \\approx \\begin{bmatrix} 0 \\\\ -h \\nu_{t,h} \\frac{\\partial u}{\\partial x} \\\\ -h \\nu_{t,h} \\frac{\\partial v}{\\partial x} \\end{bmatrix} \\end{equation}\\] \\[\\begin{equation} \\mathbf{F}_y^I = \\begin{bmatrix} hv \\\\ huv \\\\ hv^2 + \\frac{1}{2} gh^2 \\end{bmatrix}, \\quad \\mathbf{F}_y^V \\approx \\begin{bmatrix} 0 \\\\ -h \\nu_{t,h} \\frac{\\partial u}{\\partial y} \\\\ -h \\nu_{t,h} \\frac{\\partial v}{\\partial y} \\end{bmatrix} \\tag{D.5} \\end{equation}\\] \\[\\begin{equation} \\mathbf{F}_z^I = \\begin{bmatrix} hw \\\\ hwu \\\\ hwv \\end{bmatrix}, \\quad \\mathbf{F}_z^V \\approx \\begin{bmatrix} 0 \\\\ -\\nu_{t,v} \\frac{\\partial u}{\\partial z} \\\\ -\\nu_{t,v} \\frac{\\partial v}{\\partial z} \\end{bmatrix} \\end{equation}\\] The source terms \\(\\mathbf{S}(\\mathbf{U})\\) include bed slope effects, Coriolis forces, atmospheric pressure gradients, and other external forces. \\[\\begin{equation} \\mathbf{S} = \\begin{bmatrix} 0 \\\\ gh \\frac{\\partial z_b}{\\partial x} + fv h - \\frac{h}{\\rho_0} \\frac{\\partial p_a}{\\partial x} - \\frac{hg}{\\rho_0} \\int_{z}^{\\eta} \\frac{\\partial \\rho}{\\partial x} dz - \\frac{1}{\\rho_0} \\left( \\frac{\\partial s_{xx}}{\\partial x} + \\frac{\\partial s_{xy}}{\\partial y} \\right) + \\frac{\\tau_{sx}}{\\rho_0} - \\frac{\\tau_{bx}}{\\rho_0} \\\\ gh \\frac{\\partial z_b}{\\partial y} - fu h - \\frac{h}{\\rho_0} \\frac{\\partial p_a}{\\partial y} - \\frac{hg}{\\rho_0} \\int_{z}^{\\eta} \\frac{\\partial \\rho}{\\partial y} dz - \\frac{1}{\\rho_0} \\left( \\frac{\\partial s_{yx}}{\\partial x} + \\frac{\\partial s_{yy}}{\\partial y} \\right) + \\frac{\\tau_{sy}}{\\rho_0} - \\frac{\\tau_{by}}{\\rho_0} \\end{bmatrix} \\tag{D.6} \\end{equation}\\] where: \\(\\frac{\\partial z_b}{\\partial x}, \\frac{\\partial z_b}{\\partial y}\\) are the x- and y-components of bed slope, \\(f\\) is the Coriolis coefficient, \\(\\rho\\) is the local fluid density, \\(\\rho_0\\) is the reference density, and \\(p_a\\) is the mean sea level pressure, \\(s_{ij}\\) is the short-wave radiation stress tensor, and \\(\\tau_s\\) and \\(\\tau_b\\) are, respectively, the surface and bottom shear stress terms (where applicable). Other source terms not included above include inflow and outflow to and from the water column. D.3 Scalar Conservation Equations Analogous conservation equations are solved for the transport of scalar constituents in the water column. The conserved scalar variable is: \\[\\begin{equation} \\mathbf{U} = \\begin{bmatrix} hC \\end{bmatrix} \\tag{D.7} \\end{equation}\\] where: - \\(C\\) is the constituent concentration The flux components of the scalar conservation equation are: \\[\\begin{equation} \\mathbf{F}_x^I = \\begin{bmatrix} huC \\end{bmatrix}, \\quad \\mathbf{F}_x^V \\approx \\begin{bmatrix} -h(D_{xx} \\frac{\\partial C}{\\partial x} + D_{xy} \\frac{\\partial C}{\\partial y}) \\end{bmatrix} \\end{equation}\\] \\[\\begin{equation} \\mathbf{F}_y^I = \\begin{bmatrix} hvC \\end{bmatrix}, \\quad \\mathbf{F}_y^V \\approx \\begin{bmatrix} -h(D_{yx} \\frac{\\partial C}{\\partial x} + D_{yy} \\frac{\\partial C}{\\partial y}) \\end{bmatrix} \\tag{D.8} \\end{equation}\\] \\[\\begin{equation} \\mathbf{F}_z^I = \\begin{bmatrix} hwC \\end{bmatrix}, \\quad \\mathbf{F}_z^V \\approx \\begin{bmatrix} -h\\nu_t&#39; \\frac{\\partial C}{\\partial z} \\end{bmatrix} \\end{equation}\\] The source components may include scalar decay and settling: \\[\\begin{equation} \\mathbf{S} = \\begin{bmatrix} - K_d hC - w_s C \\end{bmatrix} \\tag{D.9} \\end{equation}\\] where: - \\(K_d\\) is a scalar decay-rate coefficient - \\(w_s\\) is a scalar settling velocity D.4 Units MJS notes on units for conserved quantaties in 2D… –Cell centres– depth [m] momentum [m2 s-1] (d (m) x u (m s-1)) = q (specific discharge x depth) [repeat for y component] ds, dT, dC, etc.: depth-integrated scalar quantities such as salinity, temperature, and concentrations [m.PSU, m·C, m·UNIT/m³, etc.] If density carried with it: depth [m] momentum m x m/s x kg/m3 = [kg m-1 s-1] (momentum per unit area) ds, dT, dC, etc.: depth-integrated scalar quantities such as salinity, temperature, and concentrations [m.PSU, m·C, m·UNIT/m³, etc.] [kg m-2] –Face flux densities – mass m² s⁻¹ momentum m³ s⁻² salinity m² s⁻¹ (× PSU) temp m² s⁻¹×°C sed, wq kg m⁻¹ s⁻¹ tracer If density carried with it: mass kg m⁻¹ s⁻¹ momentum N m⁻¹ After face length integration mass m³ s⁻¹ or kg s⁻¹ momentum m⁴ s⁻² or N ALL OF THE BELOW NEEDS TO BE CHECKED , ALSO NEED TO CHECK HOW 3D IS DONE… D.4.1 Master Variables Table — Cell-centre State Variables (2D) Variable type Symbol Stored variable Units Depth-integrated amount per area Units Water depth \\(h\\) Water depth m \\(h\\) m x-momentum \\(q_x\\) \\(h\\,u\\) m² s⁻¹ — — y-momentum \\(q_y\\) \\(h\\,v\\) m² s⁻¹ — — Salinity \\(S\\) PSU (≈ g/kg, dimensionless) PSU \\(S\\,h\\) m × PSU Temperature \\(T\\) °C or K °C / K \\(T\\,h\\) m × °C / m × K Sediment / WQ conc. \\(C_\\mathrm{wq}\\) mg/L (= g m⁻³) or kg m⁻³ g m⁻³ / kg m⁻³ \\(C_\\mathrm{wq}\\,h\\) g m⁻² / kg m⁻² Generic volumetric tracer \\(C_\\mathrm{tracer}\\) unit/m³ unit/m³ \\(C_\\mathrm{tracer}\\,h\\) unit/m² D.4.2 Face Flux Densities — Per Unit Face Length (2D) Flux component Expression Units Notes Mass (continuity) \\(h\\,u_n\\) m² s⁻¹ Volume flux per unit width x-momentum (inviscid, advective) \\(h\\,u\\,u_n\\) m³ s⁻² Advection of \\(u\\) x-momentum (inviscid, pressure) \\(\\frac{1}{2} g\\,h^2\\,n_x\\) m³ s⁻² Hydrostatic pressure force x-momentum (viscous) \\(-\\,h\\,K_v\\,\\frac{\\partial u}{\\partial x}\\) m³ s⁻² Horizontal diffusion of \\(u\\) y-momentum (inviscid, advective) \\(h\\,v\\,u_n\\) m³ s⁻² Advection of \\(v\\) y-momentum (inviscid, pressure) \\(\\frac{1}{2} g\\,h^2\\,n_y\\) m³ s⁻² Hydrostatic pressure force y-momentum (viscous) \\(-\\,h\\,K_v\\,\\frac{\\partial v}{\\partial x}\\) m³ s⁻² Horizontal diffusion of \\(v\\) Salinity \\(S\\,h\\,u_n\\) m² s⁻¹ × PSU Salinity × volume flux Temperature \\(T\\,h\\,u_n\\) m² s⁻¹ × °C/K Temperature × volume flux Sediment / WQ conc. \\(C_{\\mathrm{wq}}\\,h\\,u_n\\) g m⁻¹ s⁻¹ or kg m⁻¹ s⁻¹ Mass-per-volume tracer flux Generic volumetric tracer \\(C_{\\mathrm{tracer}}\\,h\\,u_n\\) unit m⁻¹ s⁻¹ Unit-per-volume tracer flux D.4.3 Cell-centre Sources — Per Unit Area (x-equation) (2D) Term Source expression (per area) Units Notes Bed slope (gravity) \\(g\\,h\\,\\partial_x z_b\\) m² s⁻² Downslope pressure-gradient from bathymetry Coriolis \\(f\\,v\\,h\\) m² s⁻² Acts normal to velocity; sign per convention Atmospheric pressure gradient \\(-\\dfrac{h}{\\rho_0}\\,\\partial_x p_a\\) m² s⁻² Surface pressure forcing Baroclinic pressure gradient \\(-\\dfrac{g\\,h}{\\rho_0}\\,\\int \\partial_x \\rho\\,dz\\) m² s⁻² Internal pressure from density gradients Radiation stress gradient \\(-\\dfrac{1}{\\rho_0}\\,(\\partial_x s_{xx}+\\partial_y s_{xy})\\) m² s⁻² Wave–current interaction Surface shear stress \\(\\dfrac{\\tau_{sx}}{\\rho_0}\\) m² s⁻² Wind stress (if applied) Bottom shear stress \\(-\\dfrac{\\tau_{bx}}{\\rho_0}\\) m² s⁻² Bed friction Viscous diffusion (horizontal) \\(\\partial_x(-\\,h\\,K_v\\,\\partial_x u)\\;+\\;\\partial_y(-\\,h\\,K_v\\,\\partial_y u)\\) m² s⁻² Divergence of viscous fluxes; \\(K_v\\) in m² s⁻¹ y-equation: replace \\(u\\to v\\), \\(\\partial_x z_b\\to \\partial_y z_b\\), \\(f v h\\to -f u h\\), and use \\(\\partial_x(-hK_v\\partial_x v)+\\partial_y(-hK_v\\partial_y v)\\). D.4.4 4. How it all links in FV updates In the finite-volume method, each cell stores its conserved quantities at the cell centre, while exchanges of those quantities occur through the cell faces. The update is based on conservation over the plan area \\(A\\) of a cell: \\[ \\frac{d}{dt}\\left( q_x A \\right) + \\sum_{\\text{faces}} F_{qx} L \\;=\\; S_{qx} \\] where: - \\(q_x\\) = x-momentum per unit area (cell-centred variable) - \\(A\\) = plan area of the cell - \\(F_{qx}\\) = flux of \\(q_x\\) across a face per unit length (face-centred variable) - \\(L\\) = length of the face - \\(S_{qx}\\) = source term applied within the cell (e.g. bed shear, wind, Coriolis) D.4.4.1 Cell centres vs. faces Cell centres: store the integrated momentum \\(q_x A\\). This is the “bookkeeping” location for conserved quantities. Faces: provide fluxes \\(F_{qx} L\\), which represent transfers of momentum between neighbouring cells. The time derivative updates the cell-centred storage, while the face flux terms represent exchanges with adjacent cells. Source terms act directly on the cell-centred momentum. D.4.4.2 Units consistency Checking units ensures the conservation equation balances: \\[ q_x A \\;\\;\\rightarrow\\;\\; \\left(\\tfrac{m^2}{s}\\right) \\times m^2 \\;=\\; \\tfrac{m^4}{s} \\] (density-free form), or: \\[ q_x A \\;\\;\\rightarrow\\;\\; \\left(\\tfrac{kg}{m \\, s}\\right) \\times m^2 \\;=\\; \\tfrac{kg \\, m}{s} \\] (if density is included). \\[ F_{qx} L \\;\\;\\rightarrow\\;\\; \\text{same units as } q_x A \\] \\[ S_{qx} \\;\\;\\rightarrow\\;\\; \\text{same units (momentum source term)} \\] In summary, cell-centred momentum is updated by the balance of face fluxes and source terms, which is the core of the finite-volume approach used in TUFLOW FV. D.5 Cell Topology Need a section that describes cell topolgy i.e. cell face, centre, vertices and what role they play D.6 Numerical Scheme The system of equations described above is solved using a Finite-Volume numerical scheme, as described below. Further details about Finite Volume methods for hyperbolic systems can be found in Leveque (2002). D.6.1 Discrete System The spatial domain is discretised using contiguous, non-overlapping triangular and quadrilateral cells (or elements). A cell-centred spatial discretisation is adopted for all NLSWE conserved variables. The discrete form of the equations for cell \\(i\\), with \\(k=1,N_k\\) cell-faces is: \\[ \\frac{\\partial \\mathbf{U}_i}{\\partial t} = -\\frac{1}{A_i} \\sum_{k=1}^{N_k} (\\mathbf{F}_k \\cdot \\mathbf{n}_k) L_k + \\mathbf{S}_i \\] (Equation 10) \\[\\begin{equation} \\frac{\\partial \\mathbf{U}_i}{\\partial t} = -\\frac{1}{A_i} \\sum_{k=1}^{N_k} (\\mathbf{F}_k \\cdot \\mathbf{n}_k) L_k + \\mathbf{S}_i \\tag{D.10} \\end{equation}\\] In this discrete equation: \\(\\mathbf{U}_i\\) represents the volume-average of the conserved variables in cell \\(i\\) \\(A_i\\) is the cross-sectional (plan) area of the cell \\(\\mathbf{S}_i\\) is the volume-average source term\\s A first-order midpoint quadrature is used to evaluate the cell boundary flux integral, where: \\(\\mathbf{n}_k\\) is the boundary/face unit normal vector for face \\(k\\) \\(L_k\\) is the corresponding face length The discrete conserved variable field is assumed to be continuous within a cell but discontinuous at the cell faces. The finite-volume form of the conservation equation has delivered an Ordinary Differential Equation (ODE) from the original Partial Differential Equation (PDE) form of the conservation equation (Equation 1). This allows the solution of the conservation system of equations to be separated into a two-stage algorithm: The spatial integration of the discrete flux and source components (RHS of Equation 10) The time integration of the discrete system of conservation equations D.6.2 Mode Splitting Efficient integration of the NLSWE is achieved through a mode-splitting scheme, where different components of the governing equations are updated using an appropriate timestep that considers both physical and numerical stability constraints (e.g., Shchepetkin &amp; McWilliams, 2005). A reduced set of equations comprising all terms other than the barotropic (or free-surface) pressure-gradients is initially partially solved. As part of this solution, an appropriate “internal mode” timestep is calculated that obeys both: Courant-Friedrichs-Levy (CFL) limits due to advective current speeds Péclet number (Pe) constraints imposed by diffusion terms Prior to updating (or time-integrating) the solution, an external mode loop is entered, in which a 2D depth-averaged reduction of the 3D NLSWE is solved multiple times, using a timestep that obeys the barotropic Courant-Friedrich-Levy (CFL) constraint imposed by the shallow water wave speed: \\[ \\bar{u} \\pm \\sqrt{gh} \\] where \\(\\bar{u}\\) is the depth-averaged current speed. The external mode loop is repeated until the cumulative timestep is approximately equal to the internal mode timestep. The depth-averaged inviscid fluxes from the external mode solution are then used to correct the internal mode inviscid fluxes, ensuring that they represent the total inviscid flux for the 3D solution. The corrected fluxes are then used to update the full 3D solution. A stability constraint imposed by the baroclinic internal wave speed is not explicitly calculated and may not always be met by the mode splitting scheme. If oscillations in the pycnocline cause numerical instabilities, this can be addressed by reducing the upper-limiting timestep. Viscous fluxes and both inviscid and viscous scalar transport fluxes are calculated only for the internal mode (outer) loop. Mode splitting can be disabled for 2D simulations, and this configuration can be more computationally efficient for fast, shallow flow scenarios where the internal mode and external mode timesteps are similarly restrictive. Currently, 3D simulations are only supported with mode splitting enabled. D.6.3 Flux Terms A key step in the Finite-Volume numerical scheme is the calculation of numerical fluxes across cell boundaries: Inviscid fluxes \\((\\mathbf{F}_x^I, \\mathbf{F}_y^I, \\mathbf{F}_z^I)\\) represent the directly resolved flux of mass and momentum between adjacent cells Viscous fluxes \\((\\mathbf{F}_x^V, \\mathbf{F}_y^V, \\mathbf{F}_z^V)\\) represent the mixing of mass and momentum that is not directly resolved as advection within the numerical model D.6.3.1 Viscous Fluxes Viscous flux terms are calculated using the traditional gradient-diffusion model, with a variety of options available for the calculation of eddy-viscosity and scalar diffusivity. D.6.3.1.1 Horizontal Viscous Fluxes The horizontal viscous fluxes \\((\\mathbf{F}_x^V, \\mathbf{F}_y^V)\\) are calculated according to Equations 5 and 8. The horizontal eddy-viscosity can be specified directly using a temporally-constant value or calculated using the Smagorinsky or Wu formulation ( Appendix E.10). MJS Moved equation 11 to 2D HD section. Equation numbers will requrie rework. The horizontal scalar-diffusivity tensor can also be specified directly (as an isotropic constant value), calculated using the Smagorinsky formulation (Equation 11), or computed using the Elder formulation (Falconer et al., 2005). The Elder model calculates a non-isotropic diffusivity tensor that accounts for velocity dispersion processes not resolved in 2D depth-averaged models: \\[ D_{xx} = \\frac{(D_l u^2 + D_t v^2) h}{u_*}, \\quad D_{yy} = \\frac{(D_l v^2 + D_t u^2) h}{u_*} \\] \\[ D_{xy} = D_{yx} = \\frac{(D_l - D_t) uvh}{u_*} \\] (Equation 12) where: - \\(D_l\\) and \\(D_t\\) are the Elder coefficients in the directions lateral to and transverse to the local currents, respectively, - \\(u_* = \\sqrt{\\frac{|\\tau_b|}{\\rho}}\\) is the friction velocity. The observed range of values for \\(D_l\\) and \\(D_t\\) derived from measurements is discussed in Fisher et al. (1979). In 3D model simulations, the Smagorinsky formulation is generally more applicable. D.6.3.1.2 Vertical Viscous Fluxes The vertical viscous fluxes \\(\\mathbf{F}_z^V\\) are calculated according to Equations 5 and 8. An unconditionally stable semi-implicit scheme is adopted in the discretization of \\(\\mathbf{F}_z^V\\) to prevent timestep restrictions. The vertical eddy viscosity \\(\\nu_t\\) can be directly specified, calculated using an external turbulence scheme (e.g., GOTM), or computed using a parametric model such as the Munk &amp; Anderson (1948) stability function: \\[ \\nu_{t0} = \\kappa u_* z (c_1 - c_2 z/h) \\] (Equation 13) \\[ \\nu_t = \\sqrt{1 + 10 \\, Ri} \\, \\nu_{t0} \\] (Equation 14) where the gradient Richardson number is defined as: \\[ Ri = \\frac{N^2}{\\left(\\frac{\\partial u}{\\partial z}\\right)^2} \\] (Equation 15) and the Brunt-Väisälä frequency (buoyancy frequency) is: \\[ N = \\sqrt{-\\frac{g}{\\rho} \\frac{\\partial \\rho}{\\partial z}} \\] (Equation 16) The scalar diffusivities \\(\\nu_t&#39;\\) can be directly specified or computed based on the type of scalar transport: Passive tracers: \\(\\nu_t&#39; = \\nu_t\\) Temperature and salinity: \\[ \\nu_t&#39; = \\begin{cases} \\frac{1}{\\sigma} \\nu_t (1 + 3.33 Ri)^{-1.5}, &amp; Ri &gt; 0 \\\\ \\frac{1}{\\sigma} \\nu_t, &amp; Ri \\leq 0 \\end{cases} \\] (Equation 17) Sediment fractions: \\(\\nu_t&#39; = \\beta \\nu_t\\) where \\(\\sigma\\) is the neutral turbulent Prandtl number, and \\(\\beta\\) is the sediment mixing coefficient. D.6.3.2 Inviscid Fluxes The inviscid fluxes \\(\\mathbf{F}_x^I, \\mathbf{F}_y^I, \\mathbf{F}_z^I\\) represent the directly resolved flux of mass and momentum between adjacent cells. Inviscid fluxes are computed at each cell face based on the conserved variable state immediately on either side of the face. For a first-order spatial scheme, these values are equivalent to the adjacent-cell averages. In higher-order schemes, the conserved variable state at the cell faces is reconstructed from the cell-averaged values. D.6.3.2.1 Internal Mode The internal mode inviscid flux calculations solve the full 3D NLSWE, excluding terms related to the free-surface pressure gradient. A centered scheme is used for the internal mode mass flux, while an upwind scheme is used for momentum flux terms. Flux-like source terms originating from bed slope and baroclinic pressure gradients are included in the cell-face flux calculation, rather than being part of the volume-integrated source term in Equation 10. The internal mode timestep is determined by a combination of internal advection CFL constraints and viscous flux Péclet constraints. A stable internal model timestep is selected before entering the external mode. D.6.3.2.2 External Mode The external mode inviscid flux calculations solve the 2D depth-averaged NLSWE. In 3D simulations, the external mode is initiated by computing depth-averages of the 3D conserved variable fields. Viscous fluxes and baroclinic pressure gradients are also depth-integrated at the start of the external mode loop. The 2D depth-averaged NLSWE are solved using Roe’s approximate Riemann solver (Roe, 1981). Flux-like source terms, such as bed slope and depth-averaged baroclinic pressure gradients, are included in the cell-face flux calculation rather than being incorporated in the volume-integrated source term (see Section 4.7). The external mode timestep is dictated by the surface gravity wave CFL constraint and depth-averaged viscous flux Péclet constraints (Murillo et al., 2005). A stable timestep is selected for each external mode sub-timestep. Within the external mode loop, multiple sub-timesteps are executed before returning to the outer internal mode loop. D.6.3.2.3 Flux Correction The internal mode inviscid fluxes are corrected using the depth-averaged external mode fluxes, which have been integrated in time through the external mode loop. When mode splitting is disabled, the full NLSWE (including free-surface pressure gradients) is solved directly using the same flux scheme as the External Mode calculation. This option is currently only available for 2D simulations and can be more computationally efficient than mode splitting for fast shallow flow conditions, for example urban floodplain flows. D.6.3.2.4 Scalar Inviscid Fluxes Scalar inviscid fluxes are calculated using the product of the corrected mass flux and the upwind cell-face concentration. Given the corrected horizontal inviscid fluxes, the vertical inviscid fluxes are obtained using the continuity equation. D.6.3.3 Total Flux The total flux vector is the sum of the corrected inviscid and viscous flux components. D.6.3.4 Flux Spatial Integration The first term on the right-hand side (RHS) of Equation 10 requires calculating the boundary-integral of the total flux vector normal component, which is approximated using a midpoint quadrature rule. For momentum flux terms, values are converted to momentum flux differences before integration. In spherical coordinates, the momentum and flux vectors are adjusted from face-centered to cell-centered using a parallel transport transformation. This accounts for rotational effects in the spherical coordinate system (Rossmanith, 2004). D.6.4 Time Integration Both internal mode and external mode temporal integration is performed using an explicit Euler scheme. To maintain numerical stability, the time step must satisfy the Courant-Friedrich-Levy (CFL) criterion for wave propagation and advection, and the Péclet criterion for diffusion (Murillo et al., 2005). The external mode CFL criterion is: \\[ \\left| u \\cdot n \\pm \\sqrt{gh} \\right| \\frac{\\Delta t}{L^*} \\leq 1 \\] (Equation 18) where: - \\(\\Delta t\\) is the integration timestep, - \\(L^*\\) is a cell-size dependent length scale. The internal mode CFL criterion is: \\[ \\max (|u \\cdot n|, c_{\\text{baro}} ) \\frac{\\Delta t}{L^*} \\leq 1 \\] (Equation 19) where: - \\(c_{\\text{baro}}\\) is the baroclinic (internal) wave speed. The Péclet criterion for diffusive terms is: \\[ \\frac{|D \\cdot n| \\Delta t}{(L^*)^2} \\leq 1 \\] (Equation 20) The cell-size dependent length scale \\(L^*\\) is computed for each cell-face as: \\[ L^* = \\frac{\\min(A_i, A_j)}{L_k} \\] (Equation 21) where: - \\(A_i, A_j\\) are the areas of the adjacent cells, - \\(L_k\\) is the face length. A variable time step scheme is implemented to ensure that the CFL and Peclet criterion are satisfied at all points in the model with the largest possible time step. Outputs providing information relating to performance of the model with respect to the CFL criterion are provided to enable informed refinement of the model mesh in accordance with the constraints of computational time (refer TUFLOW FV user manual for details). In stratified flows the baroclinic wave speed may impose a constraint on the stable internal mode timestep. However, the internal mode timestep is not automatically adjusted to satisfy the baroclinic wave speed limit. Additionally, the mode splitting scheme stability may benefit from limiting the ratio between the internal and external mode timestep to around 10 or less. Maximum and minimum timestep limits are specified by the user. The maximum limit should be used to limit the upper internal mode timestep. The minimum limit should be used to restrict the external mode timestep in the event of a model instability, as it is preferable to have the model violate the prescribed stability bounds than have the timestep decrease towards zero. D.6.5 Wetting and Drying In shallow regions (~&lt;0.05 m depth), the momentum terms are dropped to maintain stability as the Non-Linear Shallow Water Equations (NLSWE) approach the zero-depth singularity. Mass conservation is maintained both locally and globally to the limit of numerical precision across the entire numerical domain, including wetting and drying fronts. A conservative mass redistribution scheme ensures that negative depths are avoided at numerically challenging wetting and drying fronts, without requiring timestep adjustments (Brufau et al., 2004; Murillo, 2006). Regions of the model domain that become effectively dry are automatically excluded from computations to improve numerical efficiency. D.6.6 Source Terms D.6.6.1 Bed Slope Bed slope integral source terms are calculated using a face-centred upwind flux correction within the internal and external mode numerical flux solvers. \\[ \\int_{\\Omega} -gh \\nabla z_b \\, d\\Omega \\approx \\sum_{k=1}^{N_k} \\beta^* (\\Delta z_b )_k L_k \\] (Equation 22) That is, the cell-face bed elevation jump \\(\\Delta z_b\\) becomes a correction term \\(\\beta^* (\\Delta z_b )\\) to the cell-face numerical flux terms. This numerical approach provides consistent upwinding between flux and bed-slope source terms. This is essential to obtaining the required numerical balance between these terms, at for instance the quiescent state equilibrium. Further details are provided in the following references: Hubbard &amp; Garcia-Navarro (2000); Murillo (2006). D.6.6.2 Coriolis Coriolis forces due to Earth’s rotation are calculated as cell-averaged source terms in the momentum equation. The Coriolis coefficient \\(f_c\\) is calculated from: \\[ f_c = 2\\Omega_r \\sin\\phi \\] (Equation 23) where \\(\\Omega_r\\) is the angular frequency of Earth’s rotation (rad/s) and \\(\\phi\\) is the geographic latitude (radians). For Cartesian coordinate system models, the latitude is specified as a domain constant value. In spherical coordinate models, the latitude is obtained locally at each cell from the y-coordinate value. D.6.6.3 Wind Stress The cell-averaged surface stress vector due to wind is calculated from: \\[ \\tau_{sw} = \\rho_a c_{dw} u_w |u_w| \\] (Equation 24) where the wind drag coefficient is calculated using the empirical formula of Wu (1980; 1982): \\[ c_{dw} = \\begin{cases} c_a, &amp; w_{10} &lt; w_a \\\\ c_a + \\frac{(c_b - c_a)}{(w_b - w_a)} (w_{10} - w_a), &amp; w_a \\leq w_{10} &lt; w_b \\\\ c_b, &amp; w_{10} \\geq w_b \\end{cases} \\] (Equation 25) with default parameters \\((w_a, c_a, w_b, c_b) = (0.0 m/s, 0.8 \\times 10^{-3}, 50.0 m/s, 4.05 \\times 10^{-3})\\). D.6.6.4 Bed Friction Bed friction momentum sink terms are calculated using a quadratic drag law: \\[ \\tau_{bf} = \\rho c_{db} u |u| \\] (Equation 26) where the bottom drag coefficient can be calculated using a roughness-length relationship: \\[ c_{db} = \\left( \\frac{\\kappa}{\\ln \\left( \\frac{30 z&#39;}{k_s} \\right)} \\right)^2 \\] (Equation 27) The above relationship assumes a rough-turbulent logarithmic velocity profile in the lowest model layer, where \\(\\kappa\\) is von Karman’s constant, \\(k_s\\) is the effective bed roughness length (equivalent Nikuradse roughness), and \\(z&#39;\\) is the height of the bottom cell centroid above the seabed. Instead of specifying \\(k_s\\), Manning’s \\(n\\) roughness can be specified and is internally converted into an equivalent roughness length: \\[\\begin{equation} k_s = 11 h \\exp \\left( -\\frac{\\kappa h^{1/6}}{\\sqrt{g} n} \\right) \\tag{D.11} \\end{equation}\\] Bed roughness values (\\(k_s\\) or Manning’s \\(n\\)) may be specified globally or be spatially varying. The above bed friction formulations are applicable in both 2D (depth-averaged) and 3D configurations. In 2D situations, the Manning’s \\(n\\) formulation is equivalent to the following equation for the friction slope (Chow, 1959): \\[ S_f = \\frac{\\tau_{bf}}{\\rho gh} = \\frac{n^2 \\bar{u} |\\bar{u}|}{h^{4/3}} \\] (Equation 29) When comparing 2D and 3D simulations using the same bed roughness parameters, calculated bed friction energy losses are typically not exactly equivalent except in the simplest fully-developed, uniform flow scenarios. This is because 2D models assume a logarithmic velocity profile extending over full depth, whereas 3D simulations resolve the vertical velocity profile, which may be non-logarithmic in more complex flow situations. Integrated bed friction source terms are calculated using a semi-implicit discretisation in order to maintain unconditional numerical stability of these terms in high-velocity or shallow flows (Brufau et al., 2004). Coupling of the internal and external modes is achieved by applying the internal mode (3D) bed friction as an explicit momentum sink/source term during external mode (2D) loop calculations. D.6.6.5 Surface Friction (MJS I’ve not seen this done….check…) Surface friction (e.g. from ice or pontoon structures) can be applied using a quadratic drag law. Only a roughness length input (ks) is supported for surface friction specification. It should be noted that the surface friction terms are calculated explicitly and therefore do not exhibit the same unconditional stability property as the bed friction terms. In some circumstances these terms may generate numerical instabilities in high-velocity or shallow flows, which can be treated with a timestep reduction. Surface roughness values may be specified globally or for “material” types as defined in the mesh geometry file. D.6.6.6 Mean Sea Level and Baroclinic Pressure Gradients Mean Sea Level Pressure and Baroclinic pressure gradient source terms are calculated as face-centred flux correction terms within the internal and external mode numerical flux solvers. That is, the pressure gradient terms are treated in a similar manner to the bed slope source terms as described in Section 4.7.1, i.e., \\[ \\int_{\\Omega} -(\\nabla P) \\, d\\Omega \\cong \\sum_{k=1}^{N_k} \\eta^* (\\Delta P)_k L_k \\] (Equation 30) where \\(\\nabla P\\) is the gradient of the combined atmospheric and baroclinic pressure fields and \\(\\eta^*\\) is a face-centred flux correction due to the cell-face pressure jump \\(\\Delta P\\). This is analogous to converting the cell-volume source term integral into a cell-boundary source term integral using Gauss’ theorem. D.6.6.7 Wave Radiation Stress Wave fields are applied as spatially and temporally varying datasets on a 2D rectilinear/curvilinear grid. Wave radiation stress gradients are calculated as cell-centred source terms: \\[ \\int_{\\Omega} \\left( \\frac{\\partial s_{xx}}{\\partial x} + \\frac{\\partial s_{xy}}{\\partial y} \\right) d\\Omega \\] (Equation 31) or as face-centred momentum flux source terms. The wave radiation stress gradients are distributed uniformly throughout the water column. D.6.6.8 Scalar Decay Tracer constituents can be specified with a linear scalar decay property (Equation 9), where \\(K_d\\) is the constant linear decay coefficient. Scalar decay is discretised explicitly as a cell-centred integral source term. Numerical stability of this term is not guaranteed for large \\(K_d\\) or for large model timesteps. D.6.6.9 Scalar Settling Tracer and sediment constituents can be specified with jkla settling velocity \\(w_s\\) (Equation 9). Within the water column, the settling velocity contributes an additional (vertically downward) inviscid flux component. At the seabed, the settling velocity contributes a sink from the water column and a source into the bed. In the case of sediment fractions, the mass transferred to the bed is subsequently tracked within the TUFLOW FV Sediment Transport Module. The passive tracer constituent mass exiting the water column is no longer tracked. D.6.6.10 Other Sources/Sinks (MJS Add links in this section) Inflows and outflows into and from the model domain can be specified as boundary conditions to the model. These boundaries typically require specification of the volumetric flow rate (\\(\\text{inflow} = \\text{positive}, \\text{outflow} = \\text{negative}\\)) and associated scalar concentrations. In the case of an outflow specification, either the internal domain concentration (at the extraction location) can be applied (this is the default), or alternatively, the outflow concentration can be directly specified. The latter approach might be used to simulate evaporation from the water column, where there is no scalar mass loss corresponding to the volumetric loss, i.e., the outflow concentration for the scalar constituents is zero. Another option, where there is no volumetric source, is to directly specify the scalar mass fluxes. The spatial definition of source/sink boundary conditions includes the following options, as described in the user manual: - Global (spatially constant and variable) source/sinks - Point source/sinks - Moving point source/sinks The vertical distribution of the source/sink terms can be specified as part of the boundary condition definition. A detailed description of the available source/sink boundary condition options is provided in the TUFLOW FV user manual. The TUFLOW FV Sediment Transport Module calculates the sediment settling/mixing parameters and bed-pickup sink/source terms required as inputs and boundary conditions to the suspended sediment advection/dispersion calculations. Additionally, this module can calculate bed load transport and bed-elevation updates in response to sediment transport gradients. The TUFLOW FV atmospheric module calculates the transfer of mass, heat, and momentum between the water column and the atmosphere. D.7 Atmospheric Heat Exchange To be added… D.8 References Batten, P. et al. (1996) ‘Positively conservative high-resolution convection schemes for unstructured elements’, International journal for numerical methods in engineering, 39, 1821-1838. Brufau, P. et al. (2004) ‘Zero mass error using unsteady wetting–drying conditions in shallow flows over dry irregular topography’, International journal for numerical methods in fluids, 45, 1047-1082. Chapra, S.C. (2008) Surface water quality modelling. Waveland Press Chow, V.T. (1959) Open channel hydraulics New York: MacGraw-Hill Book Company Incorporation Falconer, R.A. et al. (2005) ‘Modelling water quality processes in estuaries’, in Bates P.D, Lane S.N, Ferguson R.I. (ed.) Computational fluid dynamics: applications in environmental hydraulics. John Wiley &amp; Sons. Fisher, H.B.(1979) Mixing in inland and coastal waterways Academic Press. Fringer, O.B. et al. (2005) ‘Reducing numerical diffusion in interfacial gravity wave simulations’ International journal for numerical methods in fluids, 49, 301-329. Hubbard, M.E. (1999) ‘Multidimensional slope limiters for MUSCL-type finite volume schemes on unstructured grids’, Journal of computational physics, 155, 54–74. Hubbard, M.E. et al. (2000) ‘Flux difference splitting and the balancing of source terms and flux gradients’ Journal of computational physics, 165, 89–125. Jacquet, J. (1983) Simulation of the thermal regime of rivers in Orlob, G.T (ed.) Mathematical modeling of water quality: Streams lakes, and reservoirs Wiley-Interscience, 150-176. Leveque, R.J. (2002) Finite volume methods for hyperbolic problems Cambridge University Press. Lowe, P.R. (1977) ‘An approximating polynomial for the computation of saturation vapor pressure’, Journal of applied meteorology and climatology, 16(1), 100-103. Munk, W.H. et al. (1948) ‘Notes on the theory of the thermocline’, Journal of marine research, 3, 276-295. Murillo, J. et al. (2005) ‘Coupling between shallow water and solute flow equations: analysis and management of source terms in 2D’ International journal for numerical methods in fluids, 49, 267-299. Murillo, J. et al. (2006) ‘A conservative 2D model of inundation flow with solute transport over dry bed’, International journal for numerical methods in fluids, 52, 1059–1092. Reed, R.K. (1997) ‘On estimating insolation over the ocean’, Journal of physical oceanography, 7(3), 482-485. Roe, P.L. (1981) ‘Approximate Riemann solvers, parameter vectors and difference schemes’, Journal of computational physics, 43, 357-372. Rossmanith, J.A. et al. (2004) ‘A wave propagation algorithm for hyperbolic systems on curved manifolds’ Journal of computational physics, 199, 631-662. Salhotra, A.M. et al. (1985) ‘Effect of salinity and ionic composition on evaporation: analysis of Dead Sea evaporation pans’, Water Resources Research, 21, 1336–1344. Shchepetkin, A.F. et al. (2005) ‘The regional oceanic modeling system (ROMS): a split-explicit, free-surface, topography-following-coordinate oceanic model’, Ocean Modelling, 9 (4), 347-404. Tennessee Valley Authority (TVA), (1972). Heat and mass transfer between a water surface and the atmosphere. Water Resources Research, Laboratory Report No. 14. Engineering Laboratory, Division of Water Control Planning, Tennessee Valley Authority, Norris Tennessee. Wu, J. (1980) ‘Wind-stress coefficients over sea surface and near neutral conditions – A revisit’, Journal of Physical Oceanography, 10, 727-740. Wu, J. (1982) ‘Wind-stress coefficients over sea surface from breeze to hurricane’, Journal of Geophysical Research, 87(C12), 9704-9706. Zillman, J.W. (1972) ‘A study of some aspects of the radiation and heat budgets of the southern hemisphere oceans’, Australian Government Publishing Service. Meteorological Study, 26, 562 "],["App2DHD-1.html", "Appendix E Processes: 2D HD Simulation Class E.1 Context E.2 Model Initialisation E.3 Coordinate Reference Frame E.4 Spatial Order E.5 Hardware E.6 Simulation Time Settings E.7 Computational Timestep E.8 Wetting And Drying E.9 Bottom Drag Model E.10 Momentum Mixing Model E.11 Computational Mesh E.12 Bathymetry E.13 Materials E.14 Initial Conditions E.15 Boundary Conditions E.16 Hydraulic Structures E.17 Model Outputs", " Appendix E Processes: 2D HD Simulation Class MJS TODO: THIS APPENDIX IS A WORK IN PROGRESS E.1 Context Describe what this chapter is about Paragraph about how the appendix works Paragraph about the science - link the model class with the governing equations. Provide information on the physics and implementation. Provides the detail behind the model construction chapter. Paragraph about guidance - Advice on how to use the model class. Links to wiki, example models etc. where relevant. Should this be moved back into the user manual? E.2 Model Initialisation Place holder if required. Probably not needed here unless using it to link to wiki resources, Elearning, however this is already in the manual. E.3 Coordinate Reference Frame E.3.1 Science Reference spherical version of governing equations in equations appendix Reference calculation of coriolis source term Discuss how unit conversion is handled (converted on to metric on the way in and back to imperial on the way out)? More information on generation of empty files and MI vs SHP files E.3.2 General Usage Guidance Vector layers should be generated using the Write Empty GIS Layers command. This ensures that the attributes, geometry and coordinate system is correct for model development. This should be run once at the start of each project. If upgrading to a new version of TUFLOW FV, it may be required to regenerate the empty template files if new layers, or changes of format have occurred. Discuss that only vector layers have the projection check, onus is on the user to ensure .2dm, raster layers, tins etc. are in the same reference frame. Combination of .mif and .shp can be used for model development, however this is generally not recommended. Pick the format best suited to the working environment, i.e. .mif for Mapinfo, and .shp for others. If using a Cartesian projection, a representative latitude for the study are should be assigned. If Coriolis is important to capture, for example modelling a large coastal domain, Spherical should be used. Units - Non-metric units are supported for 2D HD simulations only that use a cartesian coordinate system, for example a floodplain investigation in the USA. If wanting to expand model to other simulation classes go with Metric. E.4 Spatial Order E.4.1 Science Spatial order defines how model variables (e.g., depth, velocity, scalars) are assigned at cell faces during the solution of TUFLOW FV’s governing equations. The Spatial Order command is used to set the spatial discretisation scheme to first-order or second-order in the horizontal and vertical directions. Heavily refer back to governing equations and numerical scheme chapter Need to describe with pics how first and second order spatial differ Lower timestep and cfl likely required… E.4.2 General Usage Guidance In general, initial model development is performed using first-order spatial accuracy. This provides stability and robustness, particularly when calibrating or debugging the model. Once the model is stable, second-order schemes can be trialled to assess improvements in accuracy and solution quality. Second-order spatial accuracy significantly reduces numerical diffusion, which is particularly beneficial in simulations involving strong gradients in velocity, water levels, salinity, temperature, or other scalar quantities. While finer meshes can also reduce numerical diffusion, adopting second-order schemes often achieves comparable improvements with lower computational cost.However, the benefits of second-order accuracy only become apparent when spatial gradients are large relative to the mesh size. If model results are similar between first- and second-order runs, it is generally appropriate to retain the first-order scheme. If differences are significant, the first-order scheme may be introducing excessive numerical diffusion, and the second-order solution is likely to be more representative of physical processes. Spurious oscillations can occur in second-order schemes, especially in the presence of strong gradients. TUFLOW FV includes gradient limiters and the Horizontal AlphaR command, which allows selective blending of second-order and first-order approximations for depth, velocity, and scalar variables. When using horizontal second-order schemes in models with rapidly varying flows, such as tsunamis, dam breaks, or steep channel gradients, the Courant-Friedrichs-Lewy (CFL) condition may require adjustment. Specifically, the CFL limit may need to be reduced from the default to 0.6 to maintain numerical stability. Second-order spatial accuracy is generally recommended for: High-gradient flows (e.g. dam breaks, tsunamis, flash flooding) Stratified flows requiring vertical resolution of density, salinity, or temperature Scalar transport simulations with sharp concentration fronts E.5 Hardware E.5.1 Science MJS one liner about how the GPU code is implemented, no need to go into too much detail here, don’t want to give too much away… Mention which parts of TUFLOW FV are no GPU enabled… Refer to GPU benchmarking pages (TUFLOW FV insights article and TUFLOW runtimes) E.5.1.1 CPU vs GPU Results TUFLOW FV CPU and TUFLOW FV GPU simulations may produce slightly different results due to subtle differences in the hardware implementation of complex math operations such as sqrt() and log(). We do however expect results between the CPU and GPU versions to be very similar based on the results of extensive testing. The areas more likely to exhibit differences are in regions of wetting and drying, however these differences tend to be highly localised. TUFLOW FV GPU has been extensively tested and benchmarked including the 2012 UK Environment Agency 2D Benchmark Tests, where along with TUFLOW and TUFLOW FV, were top performers in terms of consistent results and run times. The scheme has also been benchmarked against theoretical solutions and through comparisons with TUFLOW and TUFLOW FV for both 2D and 3D (TUFLOW FV only) simulations. MJS refer benchmarking section…. E.5.1.2 Compatiable Graphics Cards TUFLOW FV’s GPU hardware module requires an NVIDIA CUDA enabled GPU of Compute Capability 5.0 or higher. A list of CUDA enabled GPUs can be found on the following website: http://developer.nvidia.com/cuda-gpus To check if your computer has an NVIDIA GPU and if it is CUDA enabled: Right click on the Windows desktop. If you see “NVIDIA Control Panel” or “NVIDIA Display” in the pop-up dialogue, the computer has an NVIDIA GPU. Click on “NVIDIA Control Panel” or “NVIDIA Display” in the pop-up dialogue. The GPU model should be displayed in the graphics card information. Check to see if the graphics card is listed on the following website: https://developer.nvidia.com/cuda-gpus. The following screen images show the steps outlined above, this may vary slightly between NVIDIA GPU card models. Figure E.1: Accessing NVIDIA Control Panel from the Desktop Figure E.2: NVIDIA GPU Model Figure E.3: Check the Website for your NVIDIA Card More information on the card can be found in the “System Information” section, which is accessed from the NVIDIA Control Panel. The system information contains more details on the following: The number of CUDA cores. Frequency of the graphics, processors and memory. Available memory including dedicated graphics and shared memory. Figure E.4: NVIDIA System Information Extensive GPU hardware benchmarking has been undertaken to assist users who are upgrading hardware for TUFLOW modelling, with numerous hardware options tested for their speed performance. The results are provided on the TUFLOW Wiki. E.5.1.3 Updating NVIDIA Drivers It is likely that the NVIDIA drivers will need to be updated periodically to the latest version as the drivers shipped with Windows Operating Systems are not always up-to-date. To update, open the NVIDIA Control Panel (by right clicking on the desktop and selecting NVIDIA Control Panel or NVIDIA Display). Once the control panel has loaded, select Help &gt;&gt; Updates from the menu items. For further guidance see the Updating NVIDIA Drivers Wiki Page. If new drivers are available, please download and install these by following the prompts. NOTE: Even if not prompted by the system, a restart is recommended to ensure the new drivers are correctly detected prior to running any simulations. Figure E.5: Accessing Driver Updates from the NVIDIA Control Panel E.5.1.4 Troubleshooting If you receive the following error when trying to run the TUFLOW FV GPU model: TUFLOW GPU: Interrogating CUDA enabled GPUs … TUFLOW GPU: Error: Non-CUDA Success Code returned Check the compatibility of your GPU card and whether the latest drivers are installed (see instructions in Section E.5.1.2). Test with a user account that has administrator privileges as these may be required for running computations on the GPU. If multiple monitors are running from the video card, try running with only a single monitor. If the above steps fail to get the simulation to run, email the NVIDIA system information (see Section E.4) and TUFLOW FV log file (.log) to support@tuflow.com. E.5.2 General Usage Guidance Move this stuff below to the running simulations section. Doesn’t need to be repeated here. Perhaps guidance here on when you’re likely to see the most benefit of CPU vs GPU and point people at hardware wikis etc. Perhaps it’s time to create the TUFLOW FV Hardware Benchmark. Compute executed on CPU will by default run in parallel thread mode. Using parallel thread mode, tasks are split up and run in parallel over multiple logical CPU processors using the Open MP shared memory model. The maximum number of threads for a given simulation is limited to the smaller of the logical processors available on the modelling computer, or the number of available TUFLOW FV license threads. For direct control over the number of threads utilised for a simulation, the OMP_NUM_THREADS environment variable can be added to the simulation batch (Windows) or shell script (Linux). For example: Windows Batch File with OMP_NUM_THREADS Environment Variable set exe=C:\\TUFLOWFV\\TUFLOWFV.exe set OMP_NUM_THREADS=8 rem Run models using 8 logical processors in parallel %exe% Surge_Model_001.fvc Windows Bash Script with OMP_NUM_THREADS Environment Variable #!/bin/bash export OMP_NUM_THREADS=8 tuflowfv Surge_Model_001.fvc If running on GPU, a TUFLOW FV simulation can utilise a single GPU device at a time and a single simulation cannot be split over multiple GPU devices. If multiple GPU devices are present, it can be explicitly selected using the Device ID command. The Hardware and Device ID commands are typically used in the .fvc file to set the default hardware configuration. In practice, the recommended approach is to override these defaults as needed using runtime command line arguments. For example both the Hardware and Device ID command can be overridden in the simulation batch (Windows) or shell script (Linux) using the -puX switch, where ‘pu’ indicates that GPU hardware should be used, and ‘X’ is the Device ID to set. Windows Batch File With Hardware Switches set exe=C:\\TUFLOWFV\\TUFLOWFV.exe set OMP_NUM_THREADS=8 rem Run on GPU hardware device ID 1 using the -pu1 switch rem Run models using 8 logical processors in parallel for non-GPU components %exe% -pu1 Surge_Model_001.fvc Linux Bash Script With Hardware Switches #!/bin/bash export OMP_NUM_THREADS=8 # Run on GPU hardware device ID 1 using the -pu1 switch # Run models using 8 logical processors in parallel for non-GPU components tuflowfv -pu1 Surge_Model_001.fvc More examples on the setup and execution of batch and shell script files is provided in Section 12.5.2. E.6 Simulation Time Settings E.6.1 Science TUFLOW FV uses an internal time system based on seconds relative to the simulation Reference Time. All .fvc control file input times are converted from the specified Time Format into this internal system during model startup, and all outputs are converted back when writing time information to logs, diagnostics, and results. Time conversion is described as follows. If HOURS, times are user specified in decimal hours and converted directly to seconds If ISODATE, the Reference Time is converted to a Julian decimal day, and then to seconds. All input times are similarly converted to a Julian seconds, and then stored relative to the reference time The ISODATE input string format is dd/mm/yyyy HH:MM:SS (e.g. 05/07/2015 12:00:00), however the following truncations are accepted. dd/mm/yyyy dd/mm/yyyy HH dd/mm/yyyy HH:MM Examples of unsupported input string formats are provided below and will result in an error and exit if encountered. - d/mm/yyyy HH:MM:SS (single-digit day) - dd/mm/yy HH:MM:SS (two-digit year) - dd/mm/yyyy HH:MM:S (single-digit second) Additional boundary condition time options are available and their science is described in Section E.15.1.1. E.6.2 General Usage Guidance It is not recommended to override the default simulation Reference Time when using ISODATE Time Format unless by an experienced user who is proficient with NetCDF file handling and review. Modifying the default ISODATE Reference Time may lead to result incompatibility with external toolboxes and viewers. ISODATE Time Format is easy to align when model inputs and outputs with real-world calendar dates (e.g. observed tides, meteorological datasets, river flow gauging records). ISODate ensures traceability and compatibility with external time-stamped data HOURS Time Format is useful when working with idealised or schematic test cases, or where only the relative progression of time matters (e.g. a short-duration sensitivity test). This format simplifies inputs by avoiding calendar date handling. E.7 Computational Timestep E.7.1 Science E.7.1.1 Stability Criterion The non-linear shallow water equations (NLSWE) are solved using a variable timestep scheme. As a simuluation progresses, the solver uses the model state to compute a stable timestep by ensuring the following three stability criteria are met (Murillo et al., 2005). Wave celerity criterion — Equation (E.1) Advective CFL — Equation (E.2) Peclet criterion for turbulent mixing stability — Equation (E.3) \\[\\begin{equation} \\frac{\\left| \\mathbf{u}\\cdot\\mathbf{n} \\pm \\sqrt{g\\,h} \\right|\\, \\Delta t}{L^*} \\;\\leq\\; 1 \\tag{E.1} \\end{equation}\\] \\[\\begin{equation} \\frac{\\left| \\mathbf{u}\\cdot\\mathbf{n} \\right|\\, \\Delta t}{L^*} \\;\\leq\\; 1 \\tag{E.2} \\end{equation}\\] \\[\\begin{equation} \\frac{|\\mathbf{D} \\cdot \\mathbf{n}| \\, \\Delta t}{(L^*)^2} \\;\\leq\\; 1 \\tag{E.3} \\end{equation}\\] Where: \\(\\mathbf{u}\\) = depth-averaged velocity vector (m/s) \\(\\mathbf{n}\\) = outward unit normal vector (face normal) \\(g\\) = gravitational acceleration (m/s\\(^2\\)) \\(h\\) = water depth (m) \\(\\Delta t\\) = timestep (s) \\(L^*\\) = characteristic length scale (e.g., face length or cell size) (m) \\(\\mathbf{D}\\) = calculated eddy viscosity (m\\(^2\\)/s) The characteristic length scale is defined as: \\[\\begin{equation} L^* = \\frac{\\min(A_i, A_j)}{L_k} \\tag{E.4} \\end{equation}\\] Where: \\(A_i, A_j\\) = plan areas of the two adjacent cells (m\\(^2\\)) \\(L_k\\) = length of the face separating the two cells (m) E.7.1.2 Model Timestep The variable timestep scheme ensures that the model satisfies each criterion across all cells while maintaining the largest possible stable timestep. The maximum allowable timestep is computed by rearranging Equations (E.1), (E.2), and (E.3) with respect to timestep. \\[\\begin{equation} \\Delta t_u \\;\\leq\\; \\frac{L^*}{\\left| \\mathbf{u}\\cdot\\mathbf{n} \\right|} \\tag{E.5} \\end{equation}\\] \\[\\begin{equation} \\Delta t_d \\;\\leq\\; \\frac{(L^*)^2}{|\\mathbf{D} \\cdot \\mathbf{n}|} \\tag{E.6} \\end{equation}\\] Where: \\(\\Delta t_c\\) = timestep limited by wave celerity (s) \\(\\Delta t_u\\) = timestep limited by advective velocity (s) \\(\\Delta t_d\\) = timestep limited by turbulence diffusion (eddy viscosity) (s) By default, TUFLOW FV executes the solution using the computational mode-splitting approach described in Appendix ??. This results in two model timesteps: an external timestep, which controls the update of the free surface and governs wave celerity stability, and an internal timestep, which constrains advection and diffusion within the 2D domain. This separation allows the solver to maintain stability for both surface wave propagation and internal flow processes while maintaining computational efficiency. The maximum allowable internal mode timestep is calculated using Equation (E.7). \\[\\begin{equation} \\Delta t_{\\max\\_internal} \\;=\\; \\frac{1}{\\tfrac{1}{\\Delta t_u} + \\tfrac{1}{\\Delta t_d}} \\tag{E.7} \\end{equation}\\] The maximum allowable external mode timestep is calculated using Equation (E.8). \\[\\begin{equation} \\Delta t_{\\max\\_external} \\;=\\; \\min\\!\\left( \\frac{1}{\\tfrac{1}{\\Delta t_c} + \\tfrac{1}{\\Delta t_d}},\\; \\Delta t_u \\right) \\tag{E.8} \\end{equation}\\] By default, a single global user defined CFL scale factor is applied to both the maximum allowable internal mode and external mode timesteps, to return the model timesteps \\(\\Delta t_{internal}\\) and \\(\\Delta t_{external}\\) used by the model as calculated by Equations (E.9) and (E.10) respectively. \\[\\begin{equation} \\Delta t_{\\text{internal}} \\;=\\; \\mathrm{CFL}_{user} \\cdot \\Delta t_{\\max\\_internal} \\tag{E.9} \\end{equation}\\] \\[\\begin{equation} \\Delta t_{\\text{external}} \\;=\\; \\mathrm{CFL}_{user} \\cdot \\Delta t_{\\max\\_external} \\tag{E.10} \\end{equation}\\] Alternatively, the user may override the global CFL and specify separate scaling factors using CFL Internal and CFL External, as shown in Equations (E.11) and (E.12). \\[\\begin{equation} \\Delta t_{\\text{internal}} \\;=\\; \\mathrm{CFL}_{user\\_internal} \\cdot \\Delta t_{\\max\\_internal} \\tag{E.11} \\end{equation}\\] \\[\\begin{equation} \\Delta t_{\\text{external}} \\;=\\; \\mathrm{CFL}_{user\\_external} \\cdot \\Delta t_{\\max\\_external} \\tag{E.12} \\end{equation}\\] The resultant internal and external mode timesteps can be further constrained to user-defined minimum and maximum allowable timestep limits via the Timestep Limits command. An example of the calculated internal and external timesteps is shown in the TUFLOW FV Console Window (Figure E.6). The internal timestep is highlighted by the yellow box, the external by the red. Figure E.6: Internal And External Model Timesteps E.7.2 General Usage Guidance This section provides suggestions on selecting initial upper and lower model Timestep Limits for a new model, or existing model that is applying an updated mesh. Estimate the external mode timestep Use Equation (??) with indicative values of flow velocity \\(u\\) (m/s), water depth \\(h\\) (m), and \\(L^*\\) (m). The shallow water wave celerity will generally control the timestep. Example: \\(u = 0.5\\) m/s \\(h = 10\\) m \\(L^* = 10\\) m (from a 10 m × 10 m cell) \\(g = 10\\) m/s² Celerity: \\(c = 10\\) m/s Timestep: \\(\\Delta t_c = 0.95\\) s Estimate the upper timestep limit Take 10 × the external mode timestep. For the above example: 10 s. Set timestep limits Use the estimates from Steps 1 and 2 as the lower and upper arguments of the Timestep Limits command. Run the model Review external and internal timesteps in the TUFLOW FV log file or console. Check timestep behaviour If timesteps remain within the initial estimates, proceed to Step 7. If the external timestep is equal to the minimum estimate, reduce the lower timestep limit and repeat Steps 2–5. Review mesh performance Identify cells controlling the minimum and mean timesteps. Adjust the mesh at these locations if possible. Diagnostic CFL outputs are available at https://fvwiki.tuflow.com/A_Model_Runs_Slow. E.8 Wetting And Drying E.8.1 Science Mass and momentum switching on/off needs further discussion (talk about scalars in AD chapter) In very shallow regions (~&lt;0.05m depth), the momentum terms are dropped in order to maintain stability as the NLSWE approach the zero-depth singularity. Mass conservation is maintained both locally and globally to the limit of numerical precision across the entire numerical domain, including wetting and drying fronts. A conservative mass re-distribution scheme is used to ensure that negative depths are avoided at numerically challenging wetting and drying fronts without recourse to adjusting the time step (Brufau et al., 2004; Murillo, 2006). Regions of the model domain that are effectively dry are readily dropped from the computations. The resultant dry, transitional and wet cell computations are listed as follows and shown in Figure E.7. Dry: For cell depths \\(&lt;\\) the drying depth, the cell is dropped from flux computations. Mass at the cell is conserved — for example, a model with direct rainfall will allow depth to build in the cell; however, this mass cannot be transferred to adjacent cells Transitional: For depths between the drying and wetting depths (\\(\\geq\\) drying, \\(&lt;\\) wetting), mass and momentum fluxes are calculated, however cell centre momentum is set to zero. This prevents non-physical velocities in shallow flow depths Wet: Cells with depths \\(\\geq\\) wetting depth have mass and momentum calculations enabled with no corrections Figure E.7: Wetting And Drying Depths E.8.2 General Usage Guidance MJS raid existing manual to see if any content to put here Guidance on typical values for flooding, coastal, estuarine? E.9 Bottom Drag Model E.9.1 Science MJS TODO: This section needs review by MJS. Bed friction is represented as a momentum sink term using a quadratic drag law: \\[\\begin{equation} \\tau_{bf} = \\rho \\, c_d \\, \\mathbf{u} \\, |\\mathbf{u}| \\tag{E.13} \\end{equation}\\] Where: - \\(\\tau_{bf}\\) = bed shear stress - \\(\\rho\\) = water density - \\(c_d\\) = drag coefficient - \\(\\mathbf{u}\\) = velocity vector E.9.1.1 ks For the \\(k_s\\) bottom drag model, the drag coefficient is determined from a roughness-length relationship: \\[\\begin{equation} c_{db} = \\left(\\frac{\\kappa}{\\ln \\left(\\frac{30h}{k_s}\\right)}\\right)^2 \\tag{E.14} \\end{equation}\\] Where: - \\(\\kappa\\) = von Kármán constant - \\(h\\) = water depth - \\(k_s\\) = effective bed roughness length (Nikuradse equivalent) This assumes a rough-turbulent logarithmic velocity profile. E.9.1.2 Manning When Manning’s \\(n\\) is specified, it is internally converted to an equivalent roughness length: \\[\\begin{equation} k_s = 11\\,h \\,\\exp\\!\\left(-\\frac{\\kappa\\, h^{1/6}}{\\sqrt{g}\\, n}\\right) \\tag{E.15} \\end{equation}\\] In 2D depth-averaged mode, the Manning’s \\(n\\) formulation is equivalent to a friction slope representation (Chow, 1959): \\[\\begin{equation} S_f = \\frac{\\tau_{bf}}{\\rho g h} = \\frac{n^2 \\, \\bar{u} \\, |\\bar{u}|}{h^{4/3}} \\tag{E.16} \\end{equation}\\] Where: - \\(S_f\\) = friction slope - \\(g\\) = gravitational acceleration - \\(n\\) = Manning’s roughness coefficient (SI) - \\(\\bar{u}\\) = depth-averaged velocity E.9.2 General Usage Guidance ??? Start simple and build up? Have references to info on setting bed roughness? Guidance on using ks vs Manning? Maybe have a table here of typical values in ks and Manning? E.10 Momentum Mixing Model E.10.1 Science The following sub-sections describe the assignment of horizontal eddy viscosity as specified by the available Momentum Mixing Model options: None, Constant, Smagorinsky and Wu. Each option assigns a value to the horizontal turbulent eddy viscosity term \\(\\nu_{t,h} = 0\\) in Equation (D.8). E.10.1.1 None The horizontal turbulent eddy viscosity $_{t,h} is set to 0. This results in no turbulent fluxes being calculated by the model. E.10.1.2 Constant A user-specified value is assigned to $_{t,h}. This is applied constant throughout the model, irrespective of velocity gradients and variations. E.10.1.3 Smagorinsky The Smagorinsky model is used to estimate horizontal eddy viscosity as a function of the local strain rate in the flow field. The horizontal eddy viscosity \\(\\nu_{t,h}\\) is calculated via Equation (E.17). This formulation ensures that turbulent viscosity increases in regions with high velocity gradients, enhancing numerical stability and realism in resolved eddy behaviour. \\[\\begin{equation} \\nu_{t,h} = C_s^2 \\, l^2 \\, \\sqrt{ \\left( \\frac{\\partial u}{\\partial x} \\right)^2 + \\left( \\frac{\\partial v}{\\partial y} \\right)^2 + \\frac{1}{2} \\left( \\frac{\\partial u}{\\partial y} + \\frac{\\partial v}{\\partial x} \\right)^2 } \\tag{E.17} \\end{equation}\\] Table E.1: Smagorinsky Momentum Mixing Model Terms Symbol Description \\(\\nu_{t,h}\\) Turbulent eddy viscosity \\(C_s\\) Smagorinsky coefficient \\(l\\) Mixing length scale, distance between adjacent cell centroids \\(u\\), \\(v\\) Horizontal velocity components in the \\(x\\) and \\(y\\) directions \\(\\frac{\\partial u}{\\partial x}\\), \\(\\frac{\\partial v}{\\partial y}\\) Velocity gradients in the direction of flow (normal strain rates) \\(\\frac{\\partial u}{\\partial y}\\), \\(\\frac{\\partial v}{\\partial x}\\) Cross-direction velocity gradients (shear strain rates) E.10.1.4 Wu MJS TODO. Fix the equation formats below. Also should Lm be L* ? The Wu horizontal momentum model is based on slight modification of the work of Wu et al. (2005). The Wu model is a zero-equation model whereby the eddy viscosity coefficient is diagnostically computed from the mean depth and velocity fields. \\[ \\nu_{t,h} = C_{3D} \\cdot U^* \\cdot L_m \\] \\[ U^* = |U| \\cdot n \\cdot \\frac{\\sqrt{g}}{h^{1/6}} \\] Table E.2: Wu Momentum Mixing Model Terms Symbol Description \\(\\nu_{t,h}\\) Turbulent eddy viscosity \\(C_{3D}\\) Wu coefficient \\(U_*\\) Friction velocity \\(L_m\\) Turbulent length scale (set to water depth, \\(h\\)) \\(n\\) Manning’s roughness coefficient \\(g\\) Acceleration due to gravity \\(h\\) Water depth If the model uses the ks Bottom Drag model than the Nikaradse roughness length is internally converted to a an equivalent Manning’s ‘n’ using Equation (D.11). E.10.2 General Usage Guidance None: Should not be used Constant: Smagorinksy: Wu: The Wu momentum mixing model should not be used for 3D HD simulation class models, or simulations that rely on 3D hydrodynamic fields. Wu: Testing to date has found that \\(C_{3D} = 7\\) yields results that agree well with benchmark tests and are not significantly dissimilar from those of the previous Smagorinsky method using its default coefficients—particularly where depth is not significantly greater than cell size. As always, calibration remains essential and it is also recommended to perform sensitivity testing to assess the effect of parameter changes on model results. Based on testing and benchmarking to date, significantly different values of \\(C_{3D}\\) (provided conventional bed roughness values are used and hydraulic structures are appropriately represented) may indicate issues such as: Poor boundary values Schematisation issues Inadequate input data For the Smagorinksy and Wu models it is recommended that user specified minimum and maximum eddy viscosity limits (m2/s) are included to provide bounds to the formulation. MJS TODO Wu or Smagorinksy for 2D Wu preferred in areas where the 2D cell size is smaller or close to the water depth. Rule of thumb here? E.11 Computational Mesh E.11.1 Science MJS TODO Describe the unstructured mesh format. Describe the structured mesh State the importance of the effective length scale E.11.1.1 Unstructured Mesh File Format The .2dm file format is used to define unstructured TUFLOW FV meshes. It is an ASCII format that was developed by Aquaveo for the Surface-water Modeling System (SMS). This section provides a summary of the main .2dm components used by TUFLOW FV. A full description of the .2dm mesh file format is available via the Aquaveo XMS Wiki. The following text block is the full contents of a small example unstructured mesh .2dm file. A visual view of the mesh is shown in Figure E.8. The mesh contains: 10 elements (8 quadrilateral and two triangular) 16 nodes 2 nodestrings MESH2D MESHNAME &quot;Example Channel&quot; E4Q 1 2 1 9 10 1 E4Q 2 3 2 10 11 1 E4Q 3 4 3 11 12 1 E4Q 4 6 5 1 2 1 E4Q 5 7 6 2 3 1 E4Q 6 8 7 3 4 1 E4Q 7 14 13 5 6 1 E4Q 8 15 14 6 7 1 E3T 9 16 15 7 1 E3T 10 16 7 8 1 ND 1 2.48000000e+001 4.02800000e+001 0.00000000e+000 ND 2 3.30421270e+001 4.21236640e+001 -1.00000000e+001 ND 3 4.12871134e+001 4.39683219e+001 -1.00000000e+001 ND 4 5.20800000e+001 4.58200000e+001 0.00000000e+000 ND 5 1.76200000e+001 6.18200000e+001 0.00000000e+000 ND 6 2.57990034e+001 6.57578467e+001 -1.00000000e+001 ND 7 3.39997467e+001 6.96992724e+001 -1.00000000e+001 ND 8 4.34600000e+001 7.37100000e+001 0.00000000e+000 ND 9 2.56200000e+001 1.85400000e+001 0.00000000e+000 ND 10 3.42333333e+001 1.88833333e+001 -1.00000000e+001 ND 11 4.28466667e+001 1.92266667e+001 -1.00000000e+001 ND 12 5.53200000e+001 1.95700000e+001 0.00000000e+000 ND 13 1.21000000e+000 8.02700000e+001 0.00000000e+000 ND 14 9.62000000e+000 8.52633333e+001 -1.00000000e+001 ND 15 1.80300000e+001 9.02566667e+001 -1.00000000e+001 ND 16 2.64400000e+001 9.52500000e+001 0.00000000e+000 NS 9 10 11 -12 1 NS 16 15 14 -13 2 Figure E.8: Example .2dm Unstructured Mesh - Element numbers (blue text), node locations (red dots), node numbers (black text), nodestrings (red lines) and nodestring names (red text) The following paragraphs describe how nodes, elements and nodestrings are represented in the .2dm file. Nodes: Lines that commence with a “ND” are nodes, (also refered to as points or vertices) that define the edges of the elements. Each ND line describes the node ID and its x, y and z (i.e. bed level) coordinate. in Figure E.9 node 7 has been selected, corresponding to the following line of the .2dm file. ND 7 3.39997467e+001 6.96992724e+001 -1.00000000e+001 Figure E.9: Example Node Definition Elements: Lines that commence with an “E4Q” are quadrilateral (4 sided) elements. Each E4Q line describes the element ID, the four nodes that define its connectivity and spatial extent (in a counter-clockwise direction) and the material type (Figure E.10). For example, the below line is element 5, defined by connecting nodes 7-6-2-3. The final number on the line specifies a material ID of 1. E4Q 5 7 6 2 3 1 Figure E.10: Example Quadrilateral Element Definition Similar to E4Q, the “E3T” lines are triangular elements. Each E3T line describes the element ID, the three nodes that define its connectivity and spatial extent (in a counter-clockwise direction) and the material type (Figure E.11). For example, the below line is element 9, defined by connecting nodes 16-15-7. The final number on the line specifies a material ID of 1. E3T 9 16 15 7 1 Figure E.11: Example Triangular Element Definition Nodestrings: Lines that commence with a “NS” are nodestrings, which can used to define boundary condition, structure or plot output locations. Each NS line defines the series of nodes that form the string, the last node number is assigned as negative. The number following the negative number is the nodestring ID (Figure E.12). For example, the below line is nodestring 2, defined by connecting nodes 16-15-14-13. The nodestring has the ID 2. NS 16 15 14 -13 2 Figure E.12: Example Nodestring Definition E.11.2 General Usage Guidance Links to wikis, tutes etc. While it’s possible to assign bathy, materials and nodestrings via the .2dm, it is recommended that TUFLOW FV mesh-independent GIS commands are used. Restate the importance of the grid on runtimes, refer people to ‘a model runs slow’ and computational timestep section… E.12 Bathymetry E.12.1 Science E.12.1.1 Command Layering Describe bathy command layering here. E.12.1.2 Interpolation Methods MJS TODO. As bcs etc. also use this it probs needs to be moved somewhere else…. .2dm no interpolation, does a simple cell average of vertices. For DEMs bilinear interpolation is used. For TINs bilinear tris and quads bilinear_interp_weights_quad bilinear_interp_weights_tri E.12.2 General Usage Guidance E.12.2.1 Cell Elevation Files Suggested workflow for cell elevation file generation… E.13 Materials E.13.1 Science MJS TODO. Describe the various material options available here? If not here, where? E.13.1.1 Command Layering Describe material command layering here? Or has it already been mentioned in the main body? E.14 Initial Conditions E.14.1 Science Constant Spatially variable Restart file science - refer to MATLAB tools to ‘hack’ the restart file. Probs need some Python versions of these too… E.14.1.1 Command Layering Initial condition layering As with other commands, the .fvc file is read sequentially, from the top of the file to the bottom. Initial conditions from restart files are applied first, regardless of where they occur in .fvc file. If multiple Restart File commands exist, the last command read takes precedence. Non-restart file initial condition commands are processed sequentially from the .fvc. Each override earlier initial condition commands, or restart file initial conditions as follows. Spatially constant initial conditions (e.g. Initial Water Level) will overwrite all preceding initial condition or restart commands globally. Spatially variable initial conditions (e.g. Initial Condition 2D) will overwrite only the cells that are specified in the initial condition .csv file. Restart files For models using restart file initial conditions, it is typically recommended to remove or comment out non-restart initial condition commands to avoid components of the restart file being overridden. E.14.2 General Usage Guidance Spatially varying to apply to dams, or elevated levels from the boundary For coastal situations generally recommended to warm up the model E.15 Boundary Conditions E.15.1 Science E.15.1.1 Time Format MJS Note, this content is referenced from Section E.6. MJS TODO: Describe the time options specifically how they relate to boundary conditons. CSV Directly specify ISODATE or time in HOURS MJS TODO: Need to test what happens if you try to use DAYS, MINUTES, or SECONDS with csv timeseries inputs… NetCDF Time Units - Days, Hours/ISODate MJS TODO: Confirm how ISODATE time strings can be read… at the moment assumes it’s all in hours? Time Shifting with BC Reference Time Temporal adjustments are best made using the BC Reference Time, which allows individual boundary condition datasets to be shifted without altering the simulation-wide reference. Typical applications include: - Sensitivity testing: advancing or delaying a tidal boundary to examine timing effects. - Timezone adjustments: shifting data provided in UTC to match local time. This approach provides flexibility while keeping the core simulation reference consistent. E.15.1.2 Boundary Location Definition E.15.1.2.1 Grid File format - NetCDF Bilinear interpolation occurs at each 2d cell, mapping cell centres to the four closest input grid points. MJS check this.. MJS TODO: Section on QC_GRID weighting.. E.15.1.3 Boundary Condition Block Table E.3: Default Data Headers Boundary Type Default Header Names Description MJS Notes.. WL TIME, WL NA NA WLS TIME, WL_A, WL_B NA NA WL_CURT TIME, CHAINAGE, ZTYPE, WL NA NA Q TIME, Q NA NA OBC TIME, Q, U, V NA NA OBC_CURT TIME, CHAINAGE, ZTYPE, WL, U, V NA NA HQ H, Q NA NA QN N/A NA NA RN/RNS/ZG N/A NA NA QC/QC_POLY TIME, Q NA NA QC_GRID TIME, WEIGHT, Q NA NA FORCE/FORCE_POLY TIME, FORCEX, FORCEY NA NA QG TIME, Q/A NA NA W10/W10_GRID TIME, W10_X, W10_Y NA NA PRECIP/PRECIP_GRID TIME, PRECIP, PRECIP_TEMP NA NA MSLP_GRID TIME, MSLP NA NA OBC_GRID TIME, SSH, U, V, SALINITY, TEMPERATURE NA Why is this SALINITY AND TEMPERATURE when everything else is SAL AND TEMP QCM TIME, X, Y, Q NA NA FORCEM TIME, X, Y, FORCEX, FORCEY NA NA CYC_HOLLAND TIME, X, Y, PA, RMAX, B, KM, THETAMAX, DELTAFM, WBGX, WBGY NA NA WAVE TIME, HSIGN, TPS, DIR, UBOT, TMBOT, FORCE_X, FORCE_Y, DEPTH NA FORCE_X here when everything else is FORCEX WAVE_COUPLED N/A NA NA TRANSPORT N/A NA NA E.15.1.4 Water Level MJS TODO: Sub-types E.15.1.5 Inflow/Outflow MJS TODO Q sub-types with diagrams… E.15.1.6 Stage-Discharge MJS TODO QN friction slope calcs E.15.1.7 Atmospheric Wind and pressure source terms need to be described here Wind speed model How MSLP and the reference pressure is used MJS TODO Holland model science E.15.1.8 Spectral Wave MJS TODO Extract key info from wave chapter of user manual to further describe how to assign wave Limited science exists for this section, needs to be written… E.15.1.9 Force Describe how the force is applied to the cell. E.15.1.10 Zero Gradient And Reflective Diagrams needed here. Also… the concept of zero gradient is important for BCs with no data. E.15.2 General Usage Guidance E.16 Hydraulic Structures E.16.1 Science E.16.1.1 Structure Connection Types The structure connection type (single nodestring, linked nodestrings, or linked zones) defines how fluxes of mass and momentum are exchanged between the 2D model domain and the hydraulic structure. Structure interaction with the 2D domain occurs in five steps: Hydraulic properties are updated in the cells and/or faces defined by the structure connection type. For nodestrings (single or linked), hydraulic paramaters at each cell face in the nodestring are updated, and nodestring average values are calculated using Equation (E.18). \\[\\begin{equation} X_{\\text{avg}} = \\frac{\\sum_{i=1}^{N_f} X_i\\, L_i h_i}{\\sum_{i=1}^{N_f} L_i h_i} \\tag{E.18} \\end{equation}\\] Where: \\(X_{\\text{avg}}\\) = nodestring weighted average of the hydraulic parameter \\(X_i\\) = value of the hydraulic parameter at face \\(i\\) \\(L_i\\) = face length \\(h_i\\) = water depth at face \\(i\\) \\(N_f\\) = number of faces For linked zone connections, hydraulic properties at each cell are updated, and average values are calculated using Equation (E.19). \\[\\begin{equation} X_{\\text{avg}} = \\frac{\\sum_{i=1}^{N_c} X_i\\, A_i h_i}{\\sum_{i=1}^{N_c} A_i h_i} \\tag{E.19} \\end{equation}\\] Where: \\(X_{\\text{avg}}\\) = zone weighted average of the hydraulic parameter \\(X_i\\) = value of the hydraulic parameter in cell \\(i\\) \\(A_i\\) = plan area of cell \\(i\\) \\(h_i\\) = water depth in cell \\(i\\) \\(N_c\\) = number of cells The governing equations for the hydraulic structure are applied. These are specific to the structure type and are detailed in Sections E.16.1.2 to E.16.1.9. Mass and momentum derived from the structure equations are distributed to cells and/or faces defined by the connection type. For nodestrings, distribution is based on Equation (E.20). \\[\\begin{equation} X_{\\text{avg}} = \\frac{\\sum_{i=1}^{N_f} X_i\\, L_i h_i^{1.5}}{\\sum_{i=1}^{N_f} L_i h_i^{1.5}} \\tag{E.20} \\end{equation}\\] Where: \\(X_i\\) = value of the hydraulic parameter at face \\(i\\) \\(L_i\\) = face length \\(h_i\\) = water depth at face \\(i\\) \\(N_f\\) = number of faces For linked zones, distribution is based on Equation (E.21). \\[\\begin{equation} X_{\\text{avg}} = \\frac{\\sum_{i=1}^{N_c} X_i\\, A_i h_i^{1.5}}{\\sum_{i=1}^{N_c} A_i h_i^{1.5}} \\tag{E.21} \\end{equation}\\] Where: \\(X_i\\) = value of the hydraulic parameter in cell \\(i\\) \\(A_i\\) = plan area of cell \\(i\\) \\(h_i\\) = water depth in cell \\(i\\) \\(N_c\\) = number of cells Flux limits are applied to ensure that calculated structure fluxes remain within physically consistent ranges (see Section MJS TODO). The final structure fluxes are added to the 2D model: For nodestring connections, fluxes are added to existing face fluxes. For zone connections, fluxes are added as cell source terms. E.16.1.2 Weirs Weir flow is calculated using the general weir equation with allowance for weir submergence (Equation (E.22)). Key terms are displayed in Figure E.13. \\[\\begin{equation} Q = C_d B H_u^{3/2} \\times \\max(C_{sf}, C_{sf\\_min}) \\tag{E.22} \\end{equation}\\] where: \\(Q\\) = discharge or flow rate (m³/s) \\(C_d\\) = weir coefficient (–) \\(B\\) = weir width (m) \\(H_u\\) = Upstream depth of water approaching the weir relative to the weir crest (m or ft) \\(C_{sf}\\) = weir submergence factor (–) \\(C_{sf\\_min}\\) = minimum weir submergence factor (–) By default, the weir width \\(B\\) is set either via: The nodestring length for nodestring structure connection types The average of the upstream and downstream nodestring lengths for linked nodestrings structure connection types The Max Open Width command for linked zones structure connection types The default \\(B\\) can be overriden via the optional user-specified parameter \\(B_{user}\\) (Table E.5). Figure E.13: Weir Schematic Weir submergence factors \\(C_{sf}\\) are based on Miller (1994) and Bos (1989). The submergence charts for each weir type, which relate the weir submergence factor to the ratio of downstream to upstream water level, were reproduced from the literature. The Villemonte equation was then used to fit analytical expressions to these curves, expressed as: \\[\\begin{equation} C_{sf} = \\left( 1 - \\ \\left( \\frac{H_{d}}{H_{u}} \\right)^{a} \\right)^{b} \\tag{E.23} \\end{equation}\\] Where: \\(H_{u}\\) = Upstream depth of water relative to the weir crest (m or ft) \\(H_{d}\\) = Downstream depth of water relative to the weir crest (m or ft) \\(a, b\\) = Model coefficients The default variables a and b used to determine the submergence factor \\(C_{sf}\\) for each weir type are presented in Table E.4. Figure E.14 shows the submergence curves produced using the default values in Table E.4 to calculate \\({\\ C}_{sf}\\). The weir equation is transitioned back to the non-linear shallow water equations as the weir becomes progressively submerged. A default value of \\(C_{sf\\_min} = 0.7\\) is applied to ensure a smooth transition between the two equation sets. Table E.4: Default Attribute Values for the Weir Equation for Different Weir Flows Weir Type Cd Ex a b Default Submergence Curve Broad-crested 1.705 1.5 8.550 0.556 Broad-crested from Abou Seida &amp; Quarashi, 1976 (Miller, 1994) Crump 1.500 1.5 17.870 0.590 Crump H1/Hb=1.5 (Bos, 1989) Sharp-crested 1.830 1.5 2.205 0.483 Sharp Crest Thin Plate from Hagar, 1987a (Miller, 1994) Ogee-crested 2.210 1.5 6.992 0.648 Ogee / Nappe (Miller, 1994; USBR, 1987) Figure E.14: Weir Submergence Curves using Villemonte Equation Each weir property is summarised in Table E.5. Users can adjust the default values of \\(C_d\\) and submergence coefficients \\(a, b\\) to model a supported weir type using the values from Table E.4. Table E.5: Weir Properties Argument Description \\(Z_c\\) Weir crest height either provided as an absolute elevation relative to datum if Flux Function == Weir (mRL) or as a dz bathymetric offset if Flux Function == Weir_dz (m) \\(C_d\\) Weir coefficient \\(Ex\\) Weir Exponent \\(a\\) Villemonte weir submergence coefficient a \\(b\\) Villemonte weir submergence coefficient b \\(C_{sf\\_min}\\) Minimum weir submergence factor \\(B_{user}\\) Optional user-defined weir width override (m) Huxley (2004) contains benchmarking of unsubmerged and submerged weir flow to the literature. E.16.1.3 Culverts TUFLOW FV shares the same standard culvert equations used by TUFLOW Classic’s ESTRY 1D solver, which have been in use since the 1990s. The calculations of culvert flow and losses are carried out using techniques from “Hydraulic Charts for the Selection of Highway Culverts” and “Capacity Charts for the Hydraulic Design of Highway Culverts”, together with additional information provided in Henderson (1966). The calculations have been compared and shown to be consistent with manufacturer’s data provided by both “Rocla” and “Armco”. For benchmarking of TUFLOW’s culvert flow routines to the literature, see Huxley (2004). Nodestring average (for single and linked nodestring connection types) or zone average (for linked zones) upstream and downstream hydraulic parameters are used to drive the culvert equations using the process described in Section E.16.1.1. E.16.1.3.1 Culvert Regimes The culvert equations support the flow regimes described in Table E.6, Figure E.15, and Figure E.16. Table E.6: 1D Culvert Flow Regimes Regime Description A Unsubmerged entrance and exit. Critical flow at entrance. Upstream controlled with the flow control at the inlet. B Submerged entrance and unsubmerged exit. Orifice flow at entrance. Upstream controlled with the flow control at the inlet. C Unsubmerged entrance and exit. Critical flow at exit. Upstream controlled with the flow control at the culvert outlet. D Unsubmerged entrance and exit. Sub-critical flow at exit. Downstream controlled. E Submerged entrance and unsubmerged exit. Full pipe flow. Upstream controlled with the flow control at the culvert outlet. F Submerged entrance and exit. Full pipe flow. Downstream controlled. G No flow. Dry or flap-gate active. H Submerged entrance and unsubmerged exit. Adverse slope. Downstream controlled. J Unsubmerged entrance and exit. Adverse slope. Downstream controlled. K Unsubmerged entrance and submerged exit. Critical flow at entrance. Upstream controlled with the flow control at the inlet. Hydraulic jump along culvert. L Submerged entrance and exit. Orifice flow at entrance. Upstream controlled with the flow control at the inlet. Hydraulic jump along culvert. Figure E.15: 1D Outlet Control Culvert Flow Regimes Figure E.16: 1D Inlet Control Culvert Flow Regimes To trigger inlet controlled conditions, the following two conditions must be met. The culvert flow rate calculated based on the upstream controlled flow regime (Figure E.16) must be smaller than that of the downstream controlled flow rate \\(H_u\\) must be less than \\(H_{cd} \\cdot h_c\\) Where: \\(H_{u}\\) = Upstream depth of water relative to the culvert invert (m or ft) \\(H_c\\) is the culvert height (m or ft) \\(H_{cd}\\) is the critical depth factor See Figure E.17 MJS TODO:update when fig is provided by Mel. By default the value of \\(H_{cd}\\) is set to 99999, insuring that the upstream controlled flow regime is always applied once Condition 1.) above is met. The critical depth factor can be adjusted using the Culvert Parameters structure block command. Figure E.17: Culvert Schematic E.16.1.3.2 Automatic Entry/Exit Loss Adjustment The energy losses associated with the contraction and expansion of flow lines into and out of a structure, can be optionally automatically adjusted according to the approach and departure velocities in the upstream and downstream channels. This is particularly important where: There is no change in velocity magnitude and direction as water flows through a structure. In this situation, there is effectively no entrance (contraction) or exit (expansion) losses and the losses need to be reduced to zero. Examples are: A clear spanning bridge over a stormwater channel where there are no losses due to any obstruction to flow until the bridge deck becomes surcharged. Flow from one pipe to another where the pipe size remains unchanged and there is no significant bend or change in grade. There is a change in velocity, but the change does not warrant application of the full entrance and exit loss. This is the most common case where the application of the full entrance and exit loss coefficients (typically 0.5 and 1.0) will overestimate the energy loss through the structure. The full values are only representative of the situation where the approach and departure velocities are close to zero, for example, a culvert discharging from a lake into another lake where the velocity transitions from still water to fast flowing and to still water. Entrance and exit losses are adjusted according to Equations (E.24) to (E.26) that take into account the change in velocity caused by the structure. The first equation is empirical, while the second equation to adjust exit losses can be derived from first principles. A schematic indicating approach, structure, and departure velocities is provided in Figure E.18. Automatic entry and exit loss adjustment are turned off by default. They are enabled by setting the fourth entry of the Culvert Parameters command to 1. If energy and exit loss adjustment is specified, the fixed entry and exit loss values provided via the Culvert File command are ignored. \\[\\begin{equation} \\Delta h = (K_{\\text{entry}} + K_{\\text{exit}}) \\frac{V_{\\text{structure}}^2}{2g} \\tag{E.24} \\end{equation}\\] \\[\\begin{equation} K_{\\text{entry,adjusted}} = K_{\\text{entry}} \\left[ 1 - \\frac{V_{\\text{app}}}{V_{\\text{structure}}} \\right] \\tag{E.25} \\end{equation}\\] \\[\\begin{equation} K_{\\text{exit,adjusted}} = K_{\\text{exit}} \\left[ 1 - \\frac{V_{\\text{dep}}}{V_{\\text{structure}}} \\right]^2 \\tag{E.26} \\end{equation}\\] Figure E.18: Culvert Approach, Structure, and Departure Velocites E.16.1.3.3 Total Energy Head The total energy head is the sum of the pressure and velocity head as declared in Equation (E.27) \\[\\begin{equation} E = H_u + \\frac{V^2}{2g} \\tag{E.27} \\end{equation}\\] Where: \\(E\\) = Specific energy above the culvert invert or outlet (m) \\(H\\) = upstream headwater or downstream tailwater depth above invert (m) \\(V\\) = average velocity at inlet or outlet (m/s) \\(g\\) = acceleration due to gravity (m/s\\(^2\\)) \\(E\\) can optionally replace \\(H\\) used for culvert calculations. Doing so can improve results for culverts under high velocity / high flow conditions (for example in a main channel). The option is switched off by default and can be enabled via the fifth parameter of the Culvert Parameters command. E.16.1.3.4 Culvert File The culvert file contains a list of the culvert attributes, such as the culvert ID, culvert type, dimensions, length, upstream and downstream inverts, number of barrels, Manning’s n, entrance and exit losses. A description of the required culvert file inputs is summarised in Table E.7. Multiple culverts can be listed within a culvert file (i.e. a unique culvert file for each culvert is not required). The culvert ID within the culvert file is used to associate a specific structure with the command line input as shown in E.19. Table E.7: Culvert File Inputs Header Column Description ID Culvert identifier. Type 1 = circular, 2 = rectangular, 4 = gated circular (unidirectional), 5 = gated rectangular (unidirectional). Ignore If = 1 culvert is ignored (Default = 0). UCS Currently not used. Len_or_ANA Culvert length (m or ft). n_or_n_F Friction (Manning’s ‘n’). US_Invert Upstream invert level (relative to model datum: m or ft). DS_Invert Downstream invert level (relative to model datum: m or ft). Form_Loss Form loss coefficient; an additional dynamic head loss coefficient applied when culvert flow is not critical at the inlet. pBlockage % blockage (for 10%, enter 10). For rectangular culverts, the culvert width is reduced by the % Blockage, while for circular culverts the pipe diameter is reduced by the square root of the % Blockage. (Default = 0). Inlet_Type Currently not used. Conn_2D Currently not used. Conn_No Currently not used. Width_or_Dia Width for rectangular culverts or diameter for circular culverts (m or ft - see units). Height_or_WF Height for rectangular culverts (m or ft - see units). Number_of Number of culvert barrels. Height_Cont Height contraction coefficient for orifice flow at the inlet. Recommended values, 0.6 for square edged entrances to 0.8 for rounded edges. Not used for unsubmerged inlet flow conditions or outlet controlled flow regimes. Not used for C channels. Width_Cont The width contraction coefficient for inlet-controlled flow. Usually 0.9 for sharp edges to 1.0 for rounded edges for R culverts. Normally set to 1.0 for C culverts. If value exceeds 1.0 or is less than or equal to zero, it is set to 1.0. Not used for outlet controlled flow regimes. Entry_Loss The entry loss coefficient for outlet controlled flow (recommended value of 0.5). Exit_Loss The exit loss coefficient for outlet controlled flow (recommended value of 1.0). Figure E.19: Culvert File Example E.16.1.4 Bridges Bridge structures use the governing non-linear shallow water equations with additional terms to represent sub-grid scale effects such as piers, abutments, and bridge deck flow interference, providing a mechanism to account for energy losses around piers and similar entry or exit losses not resolved within the 2D/3D domain. E.16.1.4.1 Form Loss Coefficient The coefficient energy loss function allows the user to specify a form loss coefficient (FLC) as a function of velocity head (Equation (E.28)). \\[\\begin{equation} \\Delta H = FLC \\, \\frac{V^2}{2g} \\tag{E.28} \\end{equation}\\] Where: - \\(\\Delta H\\) = head loss (m) - \\(FLC\\) = form loss coefficient (–) - \\(V\\) = velocity (m/s) - \\(g\\) = acceleration due to gravity (m/s\\(^2\\)) Width files or blockage files can optionally be used in combination with the coefficient energy loss function. They allow the user to specify the approximate width of the structure as a function of elevation, for example to account for flow area reduction due to abutments, piers or other flow obstructions not represented by the model mesh. These files alter the effective cross-sectional area at the structure, modifying the velocity in accordance with the laws of continuity. At each timestep the upstream nodestring average bed elevation, water level and active nodestring length is used to calculate a fraction open \\(frac\\) from the width or blockage file as declared in Equations (E.29) and (E.31). For a width table \\((Z, W)\\), the fraction open is: \\[\\begin{equation} \\text{frac} = \\frac{1}{L\\,(wl - z_b)} \\int_{z_b}^{wl} W(z)\\,dz \\tag{E.29} \\end{equation}\\] Discretised using the trapezoidal rule: \\[\\begin{equation} \\text{frac} = \\frac{1}{L\\,(wl - z_b)} \\sum_{i=1}^{N-1} \\frac{W_i + W_{i+1}}{2}\\,(Z_{i+1}-Z_i) \\tag{E.30} \\end{equation}\\] For a blockage table \\((Z, f)\\), the fraction open is: \\[\\begin{equation} \\text{frac} = \\frac{1}{wl - z_b} \\int_{z_b}^{wl} f(z)\\,dz \\tag{E.31} \\end{equation}\\] Discretised using the trapezoidal rule: \\[\\begin{equation} \\text{frac} = \\frac{1}{wl - z_b} \\sum_{i=1}^{N-1} \\frac{f_i + f_{i+1}}{2}\\,(Z_{i+1}-Z_i) \\tag{E.32} \\end{equation}\\] The modified cross-sectional area is then: \\[\\begin{equation} A&#39; = A \\cdot \\text{frac} \\tag{E.33} \\end{equation}\\] Where: - \\(W_i\\) = tabulated available width at elevation \\(Z_i\\) (m) - \\(f_i\\) = tabulated fractional opening at elevation \\(Z_i\\) (–) - \\(Z_i\\) = tabulated elevations (m) - \\(z_b\\) = average upstream bed elevation (m) - \\(wl\\) = average upstream water level (m) - \\(L\\) = active structure width (m) - \\(A\\) = full structure area (m\\(^2\\)) - \\(A&#39;\\) = effective structure area (m\\(^2\\)) - frac = effective open fraction (–) - \\(N\\) = number of table points used between \\(z_b\\) and \\(wl\\) The adjusted structure velocity is defined by: \\[\\begin{equation} V&#39; = \\frac{Q}{A&#39;} \\tag{E.34} \\end{equation}\\] Where: - \\(V&#39;\\) = adjusted velocity (m/s) - \\(Q\\) = flowrate (m\\(^3\\)/s) This adjusted velocity \\(V&#39;\\) is then used to assign kinetic energy losses: \\[ \\Delta H = FLC \\, \\frac{V&#39;^2}{2g} \\tag{E.35} \\] The head loss \\(\\Delta H\\) is added as a pressure correction term in the momentum equations and distributed to the upstream nodestring faces, where upstream refers to the side from which water is flowing. The resisting force per face is: \\[\\begin{equation} \\vec{F}_i = g \\, h_i \\, \\Delta H, \\hat{u} \\tag{E.36} \\end{equation}\\] Where: - \\(\\vec{F}_i\\) = opposing force applied to face \\(i\\) (MJS TODO CONFIRM UNITS) - \\(h_i\\) = local water depth at face \\(i\\) (m) - \\(\\hat{u}\\) = unit vector normal to the nodestring face pointing upstream E.16.1.4.2 Energy Loss Table An energy table energy loss function gives users a higher level of control over the losses applied for different flow rates. The downside to this additional level of control is that the user is required to pre-calculate the expected energy losses and input via an energy file. At each timestep the energy loss \\(\\Delta H\\) is linearly interpolated from the energy loss file as a function of flowrate \\(Q\\) through the structure. The interpolated value of \\(\\Delta H\\) is added as a pressure correction in the momentum equations in the same manner as described in Equation (E.36). Width or blockage files should not be used in combination with this method. E.16.1.4.3 Energy Loss Considerations When adapting structure loss coefficients from a 1D model or from coefficients that apply across the entire waterway, for example, from Hydraulics of Bridge Waterways (FHA 1973), the following should be noted: The 2D solution automatically predicts most “macro” losses due to the expansion and contraction of water through a constriction, or round a bend, provided the resolution of the grid is sufficiently fine. It is recommended that raised bridge approaches/abutments should be represented by the model topography (i.e. not included as a contribution to the form loss coefficient). A breakline using the Read GIS Z Line command may be useful for defining these topographic features. Where the waterway width varies slightly from the cumulative width of the cells across which the structure is being applied, a width file or blockage file can be used to refine the flow area and define the structure soffit within the model . Where the 2D model is not at a fine enough resolution to simulate the “micro” losses (e.g. from bridge piers, vena contracta, losses in the vertical (3rd) dimension), additional form loss coefficients and/or modifications to the cells widths and flow height need to be added. This can be done by using a the form loss coefficient or energy file commands. The additional or “micro” losses, which may be derived from information in publications, such as Hydraulics of Bridge Waterways, should be distributed evenly across the waterway (i.e. rather than being too specific about the representation of each individual cell). The head loss across key structures should be reviewed, and if necessary, benchmarked against other methods (e.g. Hydraulics of Bridge Waterways or a secondary model). Note that a well-designed 2D model will be more accurate than a 1D model if any “micro” losses are incorporated. Ultimately, the best approach is to calibrate the structure through adjustment of the additional “micro” losses – but this, of course, requires good calibration data! E.16.1.5 Porous Flow through a porous structure follows Darcy’s law: \\[\\begin{equation} Q = -K H_p B \\frac{\\Delta H}{L} \\tag{E.37} \\end{equation}\\] where: \\(Q\\) = discharge through the structure (m³/s) \\(K\\) = hydraulic conductivity (m/s) \\(H_p\\) = average of the upstream \\(H_u\\) and downstream \\(H_d\\) water depth (m) \\(B\\) = active flow width (m) \\(\\Delta H\\) = head difference between upstream and downstream water levels (m) \\(L\\) = flow path length (m) The negative sign indicates that flow occurs in the direction of decreasing hydraulic head. Hydraulic properties are assigned using the Properties structure block command which are outlined in Table E.8. Key terms are illustrated in Figure E.20 MJS TODO: Update figure once provided by Mel. By default, the flow width \\(B\\) is set either via: The nodestring length for nodestring structure connection types The average of the upstream and downstream nodestring lengths for linked nodestrings structure connection types The Max Open Width command for linked zones structure connection types The default \\(B\\) can be overriden via the optional user-specified parameter \\(B_{user}\\) (Table E.8). Table E.8: Porous Structure Properties Argument Description \\(K\\) Hydraulic conductivity (m/s) \\(L\\) Flowpath length (m) \\(B_{user}\\) Optional user-defined flow width override (m) Figure E.20: Porous Schematic E.16.1.6 User-Defined Matrix The user-defined matrix structure type calculates structure flow based on a tabulated relationship between upstream water level \\(WL_u\\), downstream water level \\(WL_d\\), and flow \\(Q\\). During each simulation timestep, the model determines the nodestring or zone average upstream and downstream water levels. These values are then used to undertake a 2D linear interpolation of flow rate from the provided flux matrix. Values outside of the user-defined matrix are extrapolated based on the nearest available flow value. Flow (mass) and momentum are distributed to the downstream nodestring, linked nodestring or linked zones connection using the process described in Section E.16.1.1. E.16.1.7 User-Defined Timeseries The user-defined timeseries structure type assigns flow based on user provided timeseries of time and flow. During each simulation timestep, the model linearly interpolates the flow value for the current model time, where time is either in hours or ISODATE format depending on the selection of Time Format. The resultant flow (mass) and momentum are distributed to the downstream nodestring, linked nodestring or linked zones connection using the process described in Section E.16.1.1. E.16.1.8 Pumps The pump is a variant of the user-defined timeseries structure type. Structure fluxes are calcuated using the same methods outlined in Section E.16.1.7, however non-linear flux limiting checks (refer Section MJS TODO) need to be disabled to allow mechanical head to be enabled at the structure. E.16.1.9 Walls The wall structure sets the fluxes of all faces selected by the single nodestring connection to 0.0. E.16.1.10 Variable Bathymetry Zb_Adjust dZb_Adjust Bathymetry Database Response function For Timeseries or Sample Rule control types, a control parameter can be optionally scaled via the control response function: \\[\\begin{equation} Y_{\\text{new}} = Y_{\\text{old}} + \\frac{\\Delta t}{T_r} \\cdot \\frac{Y_{\\text{eq}}}{1 + \\Delta t / T_r} \\tag{E.38} \\end{equation}\\] Where: \\(Y_{\\text{old}}\\) = control parameter value from the previous control update \\(Y_{\\text{eq}}\\) = current unmodified control parameter value \\(\\Delta t\\) = current model time – model time at the last control update \\(T_r\\) = response parameter time (hours) specified using the control block command: Response Parameters == Tr_pos, Tr_neg ! hrs (+ve trend, -ve trend) The control response function is enabled by having the Response Parameters command anywhere inside the control block. The default behaviour is off. Figure E.21 shows the variation of Ynew as a function of Tr, assuming Yold = 1.0, Yeq = 1.0 for four differing values of dt, 0.25, 1.0, 2.5 and 10.0. An example of using this feature in combination with the bathy_control control parameter is provided in MJSTODO. When used in this context the response parameters are used to increase the rate of ‘erosion’ when flows are increasing (Tr_pos = 0.25 hrs), and to slow down deposition rates where flow rates are decreasing (Tr_neg = 24. hrs). MJS: THIS FIGURE IS INCORRECT AND NEEDS UPDATE. Figure E.21: Control Response Function E.16.2 Operational Structures And Variable Bathymetry E.16.2.1 Control Files A control file is required to operate the Trigger, Timeseries, Sample Rule and Target Rule control types and is referenced using the Control File control block command. The default headers required for each control type are provided in Table E.9. This default header can be overwritten using the Control Header control block command. Table E.9: Structure Control Files Control Type Xheader Yheader Trigger Time. Time is in hours following the trigger release. The control parameter, i.e. either Fraction_Open, Min_Flow, Weir_Crest, Weir_dz, Zb, dZb, or Bathy_Control. Timeseries Time. Model simulation time in hours or ISODATE depending on the selection of Time Units. The control parameter, i.e. either Fraction_Open, Min_Flow, Weir_Crest, Weir_dz, Zb, dZb, or Bathy_Control. Sample Rule Sample_Value. The value of the sample parameter at the sample point or sample nodestring. The control parameter, i.e. either Fraction_Open, Min_Flow, Weir_Crest, Weir_dz, Zb, dZb, or Bathy_Control. Target Rule Target_Deficit . Control sample value at time=t, minus the target value for time=t where the target value is set using the Target File control block command. The control parameter, i.e. either Fraction_Open, Min_Flow, Weir_Crest, Weir_dz, Zb, dZb, or Bathy_Control. Sample Not applicable, the sample parameter value is read directly from the model sample point at a given simulation time. Not applicable, the sample parameter value is read directly from the model sample point at a given simulation time. Example control files for each combination of control type and control parameter are provided below. Trigger Control Type Fraction_Open Gate_Closure_001.csv - Gate linearly closes over 5 min period Time, Fraction_Open 0,1 0.0833,0 5,0 Min_Flow Minimum_Weir_Flow.csv Time, Min_Flow 0,0.5 1,0.5 3,1.0 Weir_Crest Breach_Survey_WCR_001.csv - Scour of bund after breach Time, Weir_Crest 0,5 1,2.6 3,1.5 Weir_dz Breach_Survey_WDZ_001.csv - Scour of bund after breach (relative crest change) Time, Weir_dz 0,0 1,-2 3,-3.5 Zb Breach_Survey_SZB_001.csv - Scour of bund after breach Time, Zb 0,5 1,2.6 3,1.5 dZb Breach_Survey_DZB_001.csv - Scour of bund after breach (relative bathymetry change) Time, dZb 0,0 1,-2 3,-3.5 Bathy_Control Breach_Survey_BCT_001.csv Time,bathy_control 0,10. 1,0. 3,-2. Bathy_Database_001.csv BATHY_CONTROL,BATHY_FILE -2.0, ..\\geo\\variable_bathy\\Bathy_neg2mRL_001.asc 0.00, ..\\geo\\variable_bathy\\Bathy_0mRL_001.asc 5.00, ..\\geo\\variable_bathy\\Bathy_5mRL_001.asc 10.0, ..\\geo\\variable_bathy\\Bathy_10mRL_001.asc Timeseries Control Type Fraction_Open Gate_Operation_HRS_001.csv - Recorded gate operation Time, Fraction_Open 0,0.5 1,0.1 3,1 or ISODATE Gate_Operation_ISO_001.csv - Recorded gate operation Time, Fraction_Open 01/01/2025 00:00:00,0.5 01/01/2025 01:00:00,0.1 01/01/2025 03:00:00,1.0 Min_Flow Min_Flow_HRS_001.csv - Recorded minimum environmental flows Time, Min_Flow 0,5.5 1,5.5 3,4.2 or ISODATE Min_Flow_ISO_001.csv - Recorded minimum environmental flows Time, Min_Flow 01/01/2025 00:00:00,5.5 01/01/2025 01:00:00,5.5 01/01/2025 03:00:00,4.2 Weir_Crest Weir_Record_HRS_001.csv - Record of operational weir height Time, Weir_Crest 0,2.3 1,2.2 3,2.1 or ISODATE Weir_Record_ISO_001.csv - Record of operational weir height Time, Weir_Crest 01/01/2025 00:00:00,2.2 01/01/2025 01:00:00,2.2 01/01/2025 03:00:00,2.1 Weir_dz Weir_Record_HRS_001.csv - Record of operational weir height (Crest offset) Time, Weir_dz 0,0.4 1,0.3 3,0.2 or ISODATE Weir_Record_ISO_001.csv - Record of operational weir height (Crest offset) Time, Weir_dz 01/01/2025 00:00:00,0.4 01/01/2025 01:00:00,0.3 01/01/2025 03:00:00,0.2 Zb Breach_Survey_HRS_001.csv - Recorded scour timeseries of ICOLL mouth Time, Zb 0,2.3 10,2.3 26,-0.8 or ISODATE Breach_Survey_ISO_001.csv - Recorded scour timeseries of ICOLL mouth Time, Zb 01/01/2025 00:00:00,2.3 01/01/2025 10:00:00,2.3 02/01/2025 02:00:00,-0.8 dZb Breach_Survey_HRS_001.csv - Recorded scour timeseries of ICOLL mouth (relative bathy) Time, dZb 0,0.0 10,0.0 26,-0.8 or ISODATE Breach_Survey_ISO_001.csv - Recorded scour timeseries of ICOLL mouth (relative bathy) Time, dZb 01/01/2025 00:00:00,2.3 01/01/2025 10:00:00,2.3 02/01/2025 02:00:00,-3.1 Bathy_Control Breach_Survey_DEMs_HRS_001.csv - Recorded scour survey timeseries of river mouth Time,bathy_control 0,10. 24,0. 72,-2. or ISODATE Breach_Survey_DEMs_ISO_001.csv Time,bathy_control 01/01/2025 00:00:00,10. 02/01/2025 00:00:00,0. 04/01/2025 00:00:00,-2. Bathy_Database_001.csv BATHY_CONTROL,BATHY_FILE -2.0, ..\\geo\\variable_bathy\\Bathy_neg2mRL_001.asc 0.00, ..\\geo\\variable_bathy\\Bathy_0mRL_001.asc 5.00, ..\\geo\\variable_bathy\\Bathy_5mRL_001.asc 10.0, ..\\geo\\variable_bathy\\Bathy_10mRL_001.asc Sample_Rule Control Type Fraction_Open Storm_Tide_Gate_Closure_001.csv - Gate closes begins to close when downstream water level exceeds 2.5m Sample_Value, Fraction_Open 0,0 1.1,0 2,0 2.5,0.2 3.0,1.0 10.0,1.0 Min_Flow Minimum_Weir_Flow_Relationship.csv - Minimum flow related to water level upstream Sample_Value, Min_Flow 0,0 1.1,0 2,3.6 2.5,5.0 3.0,5.0 Weir_Crest Breach_Survey_WCR_001.csv - Weir crest is lowered as upstream water level increases. Weir crest operating range of 2.5 - 4.0 mRL. Sample_Value, Weir_Crest 2.5,2.5 3.5,3.0 4,3.3 5,4.0 6.0,4.0 Weir_dz Breach_Survey_WCR_001.csv - Weir crest is lowered (relative crest level) as upstream water level increases. Weir crest operating range of 2.5 - 4.0 mRL. Sample_Value, Weir_Crest 2.5,0.0 3.5,0.5 4,0.8 5,1.5 6.0,1.5 Zb Bed_SZB_001.csv - Average bed level in response to upstream velocity Sample_Value, Zb 0,5.2 1,5.1 2,4.9 3,4.2 5,3.5 dZb Bed_SZB_001.csv - Average bed level (relative bathy offset) in response to upstream velocity Sample_Value, Zb 0,0.0 1,-0.1 2,-0.3 3,-1.0 5,-1.7 Bathy_Control Bed_SZB_001.csv - Average bed level (relative bathy offset) in response to upstream velocity - Similar to the Zb and dZb examples above, but with more control as a series of DEMs are used to define the bathymetry within the zone polygon, and not a single value. Sample_Value, Bathy_Control 0,10.0 1,9.0 2,5.0 3,0.0 5,-2.0 Breach_Survey_BCT_001.csv Time,bathy_control 0,10. 1,0. 3,-2. Bathy_Database_001.csv BATHY_CONTROL,BATHY_FILE -2.0, ..\\geo\\variable_bathy\\Bathy_neg2mRL_001.asc 0.00, ..\\geo\\variable_bathy\\Bathy_0mRL_001.asc 5.00, ..\\geo\\variable_bathy\\Bathy_5mRL_001.asc 10.0, ..\\geo\\variable_bathy\\Bathy_10mRL_001.asc Target_Rule Control Type Fraction_Open Gate_Closure_Target_Level_Operation_001.csv Target_Deficit = Sample Value - Target Value i.e. If Target_Deficit is -ve than sample water level is too low and close gates If Target_Deficit is +ve than sample water level is too high and open gates Gate_Closure_Target_Level_Operation_001.csv Target_Deficit, Fraction_Open -0.1,0 0,0.1 0.05,0.25 0.1,1.0 Target_WL_Wetland_Operation_HRS_001.csv - Aiming to keep lake water level at 2mRL Time, Target_Value 0,2 72,2 240,2 or ISODATE Target_WL_Wetland_Operation_ISO_001.csv - Aiming to keep lake water level at 2mRL Time, Target_Value 01/01/2025 00:00:00,2 03/01/2025 00:00:00,2 10/01/2025 00:00:00,2 Min_Flow Gate_Closure_Target_Level_Operation_001.csv Target_Deficit = Sample Value - Target Value i.e. If Target_Deficit is -ve than sample water level is too low and decrease min flow If Target_Deficit is +ve than sample water level is too high and increase min flow Gate_Closure_Target_Level_Operation_001.csv Target_Deficit, Min_Flow -0.1,0 0,0 0.05,5.2 0.1,10.6 Target_WL_Wetland_Operation_HRS_001.csv - Aiming to keep lake water level at 2mRL Time, Target_Value 0,2 72,2 240,2 or ISODATE Target_WL_Wetland_Operation_ISO_001.csv - Aiming to keep lake water level at 2mRL Time, Target_Value 01/01/2025 00:00:00,2 03/01/2025 00:00:00,2 10/01/2025 00:00:00,2 Weir_Crest Gate_Closure_Target_Level_Operation_001.csv Target_Deficit = Sample Value - Target Value i.e. If Target_Deficit is -ve than sample water level is too low and increase weir crest If Target_Deficit is +ve than sample water level is too high and decrease weir crest Gate_Closure_Target_Level_Operation_001.csv Target_Deficit, Weir_Crest -0.1,2.2 0,1.95 0.05,1.9 0.1,1.85 Target_WL_Wetland_Operation_HRS_001.csv - Aiming to keep lake water level at 2mRL Time, Target_Value 0,2 72,2 240,2 or ISODATE Target_WL_Wetland_Operation_ISO_001.csv - Aiming to keep lake water level at 2mRL Time, Target_Value 01/01/2025 00:00:00,2 03/01/2025 00:00:00,2 10/01/2025 00:00:00,2 Weir_dz Gate_Closure_Target_Level_Operation_001.csv Target_Deficit = Sample Value - Target Value i.e. If Target_Deficit is -ve than sample water level is too low and increase weir crest (relative level) If Target_Deficit is +ve than sample water level is too high and decrease weir crest (relative level) Gate_Closure_Target_Level_Operation_001.csv Target_Deficit, Weir_dz -0.1,0.25 0,0 0.05,-0.05 0.1,-0.1 Target_WL_Wetland_Operation_HRS_001.csv - Aiming to keep lake water level at 2mRL Time, Target_Value 0,2 72,2 240,2 or ISODATE Target_WL_Wetland_Operation_ISO_001.csv - Aiming to keep lake water level at 2mRL Time, Target_Value 01/01/2025 00:00:00,2 03/01/2025 00:00:00,2 10/01/2025 00:00:00,2 E.16.3 General Usage Guidance MJS TODO: Move structure guidance etc. in here… E.17 Model Outputs E.17.1 TUFLOW Plot Control MJS TODO: Describe the tpc here… "],["App3DHD-1.html", "Appendix F Processes: 3D HD Simulation Class F.1 Context F.2 Spatial Order F.3 Computational Timestep F.4 Vertical Mixing Model F.5 Computational Mesh F.6 Initial Conditions F.7 Boundary Conditions F.8 Hydraulic Structures F.9 Model Outputs", " Appendix F Processes: 3D HD Simulation Class F.1 Context F.2 Spatial Order Placeholder in case we need it…. F.3 Computational Timestep F.3.1 Context Prior to reading this section it is recommended to review the 2D HD simulation class time stepping Appendix @ref(#App2DHD-CT-2). F.3.2 Science F.3.2.1 Model Timestep In 3D, the external mode timestep is determined using the same formulation as the 2D HD simulation class Equation (E.8). In evaluating the 3D external model timestep (F.1), the full water depth together with depth-averaged velocity and eddy viscosity are used to compute \\(\\Delta t_c\\), \\(\\Delta t_u\\), and \\(\\Delta t_d\\). \\[\\begin{equation} \\Delta t_{\\max\\_external} \\;=\\; \\min\\!\\left( \\frac{1}{\\tfrac{1}{\\Delta t_c(2D)} + \\tfrac{1}{\\Delta t_d(2D)}},\\; \\Delta t_u(2D) \\right) \\tag{F.1} \\end{equation}\\] Internal mode timestep calculations are completed on each 3D cell horizontal face (Equation (F.2)) and each vertical cell face (Equation (F.3)). This is completed across the model domain with the final 3D internal model timestep defined as the minimum of horizontal and vertical face timesteps (Equation (F.4)). \\[\\begin{equation} \\Delta t_{\\max\\_internal-h} \\;=\\; \\min\\left( \\frac{1}{\\tfrac{1}{\\Delta t_u(i)} + \\tfrac{1}{\\Delta t_d(i)}} \\right) \\tag{F.2} \\end{equation}\\] \\[\\begin{equation} \\Delta t_{\\max\\_internal-v} \\;=\\; \\min\\left( \\frac{\\min\\!\\big(\\Delta z^{+}_k,\\;\\Delta z^{-}_k\\big)}{|w_k|} \\right) \\tag{F.3} \\end{equation}\\] \\[\\begin{equation} \\Delta t_{\\max\\_internal} \\;=\\; \\min\\!\\left( \\Delta t_{\\max\\_internal-h},\\; \\Delta t_{\\max\\_internal-v} \\right) \\tag{F.4} \\end{equation}\\] Where: \\(\\Delta t_{\\max\\_internal-h}\\) maximum allowable horizontal internal timestep (s) \\(\\Delta t_{\\max\\_internal-v}\\) maximum allowable vertical internal timestep (s) \\(\\Delta t_u(i),\\, \\Delta t_d(i)\\) are maximum allowable timestep limits at each 3D horizontal cell face \\(i\\) (s) \\(\\Delta t_u(k)\\) is the maximum allowable advective timestep limit at each 3D vertical cell face \\(k\\) (s) \\(\\Delta z^{+}_k\\) = thickness of the cell above face \\(k\\) (m) \\(\\Delta z^{-}_k\\) = thickness of the cell below face \\(k\\) (m) \\(w_k\\) = vertical velocity at face \\(k\\) (m/s) The resulting \\(\\Delta t_{\\max\\_internal}\\) and \\(\\Delta t_{\\max\\_external}\\) are applied in Equations (E.9) and (E.10) when using the global CFL command. If the split commands CFL Internal and CFL External are used, then they are applied in Equations (E.11) and (E.12), as described in Appendix E.7.1.2. F.4 Vertical Mixing Model F.5 Computational Mesh Describe the different layering schemes F.6 Initial Conditions F.7 Boundary Conditions F.8 Hydraulic Structures F.9 Model Outputs Need to add profiles, curtains and depth averaging to this section. Need to review OUTPUTCURTAINFILE command, haven’t used this before. "],["AppAD-1.html", "Appendix G Processes: AD Simulation Class G.1 Context G.2 Salinity Model G.3 Temperature Model G.4 Tracer Model G.5 Computational Timestep G.6 Scalar Mixing Model G.7 Atmospheric Heat Exchange G.8 Initial Conditions G.9 Boundary Conditions G.10 Hydraulic Structures G.11 Model Outputs", " Appendix G Processes: AD Simulation Class G.1 Context G.2 Salinity Model G.3 Temperature Model G.4 Tracer Model G.5 Computational Timestep G.5.1 Context G.5.2 Science G.5.2.1 Model Timestep Timestep calculations for advection dispersion (in either 2D and 3D) include an addition scalar diffusivity criterion \\(\\Delta t_s\\). \\[\\begin{equation} \\Delta t_s \\;\\leq\\; \\frac{(L^*)^2}{|D_{xx} n_x| + |D_{yy} n_y|} \\tag{G.1} \\end{equation}\\] Where: - \\(D_{xx}\\) = diffusivity in the \\(x\\)-direction \\([\\text{m}^2\\!/\\text{s}]\\) - \\(D_{yy}\\) = diffusivity in the \\(y\\)-direction \\([\\text{m}^2\\!/\\text{s}]\\) - \\(n_x, n_y\\) = components of the face unit normal AD With 2D Hydrodynamics The maximum allowable internal and external timesteps for advection dispersion in 2D are presented in Equations (G.2) and (G.3) respectively. These are consistent with the 2D HD only equations presented in Appendix E.7.1.2 with the addition scalar diffusivity criterion \\(\\Delta t_s\\). \\[\\begin{equation} \\Delta t_{\\max\\_internal} \\;=\\; \\min\\!\\left( \\frac{1}{\\tfrac{1}{\\Delta t_u} + \\tfrac{1}{\\Delta t_d}},\\; \\frac{1}{\\tfrac{1}{\\Delta t_u} + \\tfrac{1}{\\Delta t_s}} \\right) \\tag{G.2} \\end{equation}\\] \\[\\begin{equation} \\Delta t_{\\max\\_external} \\;=\\; \\min\\!\\left( \\frac{1}{\\tfrac{1}{\\Delta t_c} + \\tfrac{1}{\\Delta t_d}},\\; \\frac{1}{\\tfrac{1}{\\Delta t_u} + \\tfrac{1}{\\Delta t_s}} \\right) \\tag{G.3} \\end{equation}\\] The resulting \\(\\Delta t_{\\max\\_internal}\\) and \\(\\Delta t_{\\max\\_external}\\) are applied in Equations (E.9) and (E.10) when using the global CFL command. If the split commands CFL Internal and CFL External are used, then they are applied in Equations (E.11) and (E.12), as described in Appendix E.7.1.2. AD With 2D Hydrodynamics The maximum allowable internal and external timesteps for advection dispersion in 3D are presented in Equations (G.7) and (G.4) respectively. These are consistent with the 3D HD only Equations (E.7) and (E.8) with the addition of the \\(\\Delta t_s\\) term. \\[\\begin{equation} \\Delta t_{\\max\\_external} \\;=\\; \\min\\!\\left( \\frac{1}{\\tfrac{1}{\\Delta t_c} + \\tfrac{1}{\\Delta t_d(2D)}},\\; \\frac{1}{\\tfrac{1}{\\Delta t_u(2D)} + \\tfrac{1}{\\Delta t_s(2D)}} \\right) \\tag{G.4} \\end{equation}\\] \\[\\begin{equation} \\Delta t_{\\max\\_internal-h} \\;=\\; \\min\\left( \\frac{1}{\\tfrac{1}{\\Delta t_u(i)} + \\tfrac{1}{\\Delta t_d(i)}},\\;\\frac{1}{\\tfrac{1}{\\Delta t_u(i)} + \\tfrac{1}{\\Delta t_s(i)}} \\right) \\tag{G.5} \\end{equation}\\] \\[\\begin{equation} \\Delta t_{\\max\\_internal-v} \\;=\\; \\min\\left( \\frac{\\min\\!\\big(\\Delta z^{+}_k,\\;\\Delta z^{-}_k\\big)}{|w_k|} \\right) \\tag{G.6} \\end{equation}\\] \\[\\begin{equation} \\Delta t_{\\max\\_internal} \\;=\\; \\min\\!\\left( \\Delta t_{\\max\\_internal-h},\\; \\Delta t_{\\max\\_internal-v} \\right) \\tag{G.7} \\end{equation}\\] Where: \\(\\Delta t_{\\max\\_internal-h}\\) maximum allowable horizontal internal timestep (s) \\(\\Delta t_{\\max\\_internal-v}\\) maximum allowable vertical internal timestep (s) \\(\\Delta t_u(i),\\, \\Delta t_d(i),\\, \\Delta t_s(i)\\) are maximum allowable timestep limits at each 3D horizontal cell face \\(i\\) (s) \\(\\Delta t_u(k)\\) is the maximum allowable advective timestep limit at each 3D vertical cell face \\(k\\) (s) \\(\\Delta z^{+}_k\\) = thickness of the cell above face \\(k\\) (m) \\(\\Delta z^{-}_k\\) = thickness of the cell below face \\(k\\) (m) \\(w_k\\) = vertical velocity at face \\(k\\) (m/s) The resulting \\(\\Delta t_{\\max\\_internal}\\) and \\(\\Delta t_{\\max\\_external}\\) are applied in Equations (E.9) and (E.10) when using the global CFL command. If the split commands CFL Internal and CFL External are used, then they are applied in Equations (E.11) and (E.12), as described in Appendix E.7.1.2. G.6 Scalar Mixing Model G.7 Atmospheric Heat Exchange G.7.1 Context G.7.2 Shortwave Radiation Model G.7.3 Longwave Radiation Model G.7.4 Latent Heat Model G.8 Initial Conditions G.9 Boundary Conditions G.10 Hydraulic Structures G.11 Model Outputs "],["AppST-1.html", "Appendix H Processes: ST Simulation Class H.1 Context H.2 Sediment Model H.3 Bottom Drag Model H.4 Bathymetry H.5 Sediment Configuration H.6 Initial Conditions H.7 Boundary Conditions H.8 Hydraulic Structures H.9 Model Outputs", " Appendix H Processes: ST Simulation Class H.1 Context H.2 Sediment Model Sediment H.3 Bottom Drag Model ks coupled with sediment transport bed roughness option - comes from ST control file H.4 Bathymetry Dynamic bathy update when morphology enabled H.5 Sediment Configuration H.6 Initial Conditions H.7 Boundary Conditions H.8 Hydraulic Structures H.9 Model Outputs "],["AppWQ-1.html", "Appendix I Processes: WQ Simulation Class I.1 Context I.2 Water Quality Model I.3 Water Quality Configuration I.4 Initial Conditions I.5 Boundary Conditions I.6 Hydraulic Structures I.7 Model Outputs", " Appendix I Processes: WQ Simulation Class I.1 Context I.2 Water Quality Model I.3 Water Quality Configuration I.4 Initial Conditions I.5 Boundary Conditions I.6 Hydraulic Structures I.7 Model Outputs "],["AppPT-1.html", "Appendix J Processes: PT Simulation Class J.1 Context J.2 Particle Tracking Configuration J.3 Initial Conditions J.4 Boundary Conditions J.5 Hydraulic Structures J.6 Model Outputs", " Appendix J Processes: PT Simulation Class J.1 Context J.2 Particle Tracking Configuration J.3 Initial Conditions Particle restart files handled in particle tracking control file, so perhaps remove this section and add as a comment in the above Particle Tracking Configuration section J.4 Boundary Conditions J.5 Hydraulic Structures J.6 Model Outputs "],["AppDemoModelResCont-2.html", "Appendix K Application under version control K.1 Context K.2 Use case K.3 Possible workflow #1 K.4 Possible workflow #2", " Appendix K Application under version control K.1 Context It is understood that a common use case of TUFLOW CATCH involves multiple modellers with separate but complementary skill sets working on the same TUFLOW CATCH project. For example, a TUFLOW CATCH project might involve: A TUFLOW HPC specialist undertaking catchment simulation, and A TUFLOW FV specialist addressing receiving waterway simulation These modellers will need to work quasi-independently for parts of the project, but bring their work together efficiently at a point, or several points throughout the project schedule. TUFLOW CATCH has been deliberately designed to allow for these modellers to work in parallel as the project unfolds, and most importantly, to both work from the same TUFLOW CATCH control file: different users should not need to set up and work from different TUFLOW CATCH control files of the same model. It also goes without saying that TUFLOW HPC and TUFLOW FV modellers should never set up individual *.tcf and *.fvc control files and attempt to construct their models disjointedly in the hope of manually combining models together under TUFLOW CATCH at some future point: both should undertake all set up works from a single TUFLOW CATCH *.tcc control file. Given this, the question arises as to how this is to be managed from a file control perspective. This is discussed in the following sections. K.2 Use case The use case considered here as an example of using version control is the integrated TUFLOW CATCH configuration, with one modeller working on the TUFLOW HPC calibration, and a different modeller working on the TUFLOW FV calibration. TUFLOW makes no recommendation as to which (of the many available) versioning platforms should or could be used. For the purposes of this example, Git (on Windows) is used, with no intent of endorsement. K.3 Possible workflow #1 The following is a possible workflow for the two modellers delivering the use case described above, working largely independently until recombination of their work into an overall TUFLOW CATCH simulation. Alterations to this are expected to be required on a case by case basis, and one such example is presented subsequently as a second workflow in Section K.4. The steps below assume an introductory level of knowledge of Git commands and processes, and are not intended to be exhaustive. Users should familiarise themselves with basic Git protocols and concepts before reviewing the below. For example, users should appropriately configure their .gitignore file, and be familiar with commands such as git log and git status to keep track of their work. Preliminaries Install Git. See https://git-scm.com/book/en/v2/Getting-Started-Installing-Git Ensure at least one user already has the relevant account and sufficient permissions to create a new Git project in a web interface Project initiation Use the TUFLOW CATCH QGIS plugin (see Section ??) to generate the folder structure and template files for a TUFLOW CATCH simulation. This can be created in any location because it will be subsequently moved Create a new Git project via the web interface of either GitHub or GitLab - TUFLOW makes no recommendation in this regard. This is often achieved via clicking a blue button and filling out some high level project details. The project will have one branch, assumed to be called ‘main’ for the purposes of this example Figure K.1: Creating a new Git project Once created, and also from the web interface, copy the address that allows cloning of the new project via https. This is often achieved through a drop down menu on a button marked ‘Clone’, such as the below (the blue highlighted text is to be copied) Figure K.2: Copying the https address of a newly created Git project Open a new DOS command prompt and navigate to a location where modelling is to be undertaken, preferably under a folder called ‘Modelling’ Clone the new Git project to the Modelling folder, by typing the following, pasting the https address copied above in the &lt;placeholder&gt; location git clone &lt;placeholder&gt; An example might look like the following. A new folder under Modelling will be created named the same as the Git project name (in this case, ‘catch-demo’). It is this lower folder that is the git project: git clone https://xx-gitlab.yy-zz.local/user.last/catch-demo.git Change directory into the cloned folder (using the name of the project, in this case ‘catch-demo’) cd catch-demo Copy the TUFLOW CATCH folder structure created above into this project directory (‘Modelling\\catch-demo’ in this example), either through windows explorer or the DOS prompt In the DOS command prompt whilst in the catch-demo directory, add the new files to a Git commit by typing: git add . git commit -m &quot;First commit&quot; Push the new commit back up to the Git web interface git push The project created earlier is now populated with vanilla TUFLOW CATCH template files, both locally and in the web repository. Update files Modify template files locally to set up overall TUFLOW CATCH simulation with common commands (e.g. project etc) and save files Commit changes and push git add . git commit -m &quot;Populates initial TUFLOW CATCH files for branching&quot; git push Create branches In the web interface, which now has the “Populates initial TUFLOW CATCH files for branching” commit present, create a new branch from main for the TUFLOW HPC modeller. This is often achieved via clicking a blue button. Call the branch ‘HPC’ when prompted for a name. Create this new branch from main Figure K.3: Create a branch in a Git project In the web interface, create another new branch from main for the TUFLOW FV modeller in the same way. Call the branch ‘FV’ when prompted for a name. Create this new branch from main The Git project now has the branches it needs: ‘main’ for the final TUFLOW CATCH model; ‘HPC’ for the TUFLOW HPC modeller; and ‘FV’ for the TUFLOW FV modeller. This allows for the individual modellers to develop their models independently, but from the same commit. The intention is that these files will be merged back into main on completion to form the TUFLOW CATCH simulation suite. The TUFLOW HPC and TUFLOW FV modellers can now work on different branches, in parallel, with a view to merging their work back into the main branch on completion. The TUFLOW HPC modeller now: Opens a DOS command prompt and navigates to the directory to be used for modelling. This can be anywhere and does not need to be related to the TUFLOW FV modeller’s work Following the steps above, clones the project git clone https://xx-gitlab.yy-zz.local/user.last/catch-demo.git cd catch-demo Once in the catch-demo (or project) directory it is essential that the TUFLOW HPC modeller not work in the ‘main’ branch, but work in the ‘HPC’ branch. As a warning, the ‘main’ branch will most likely be set as the default branch for the modeller to work in when the project is first cloned, so this needs to be changed manually. This requires the TUFLOW HPC modeller to check out the HPC branch by typing: git checkout HPC The TUFLOW HPC modeller should then begin construction of the TUFLOW HPC model through the TUFLOW CATCH *.tcc control file in this HPC branch, noting: Set up and execution of the TUFLOW HPC model should only occur through the *.tcc file. The modeller should never create a *.tcf file References to boundary database files etc, should point into the TUFLOW directory structure from the *.tcc, for example Figure K.4: Example of referencing TUFLOW files from a *.tcc TUFLOW CATCH control file The TUFLOW CATCH simulation should use the TUFLOW HPC calibration only or Pollutant export configuration with a downstream polygon as a placeholder for the TUFLOW FV mesh. This does not involve making any changes to the Receiving Model block of the *.tcc (which will be modified by the TUFLOW FV modeller) At key stages of construction, the TUFLOW HPC modeller should stage, commit and push changes to the web project git add . git commit -m &quot;A useful commit message&quot; git push When construction is finished, the TUFLOW HPC modeller is ready to merge into the main branch to populate the overall TUFLOW CATCH simulation In parallel with the TUFLOW HPC works, the TUFLOW FV modeller: Opens a DOS command prompt and navigates to the directory to be used for modelling. This can be anywhere and does not need to be related to the TUFLOW HPC modeller’s work Following the steps above, clones the project git clone https://xx-gitlab.yy-zz.local/user.last/catch-demo.git cd catch-demo Once in the catch-demo (or project) directory it is essential that the TUFLOW FV modeller not work in the ‘main’ branch, but work in the ‘FV’ branch. As a warning, the ‘main’ branch will most likely be set as the default branch for the modeller to work in when the project is first cloned, so this needs to be changed manually. This requires the TUFLOW FV modeller to check out the FV branch by typing: git checkout FV The TUFLOW FV modeller should then begin construction of the TUFLOW FV model through the TUFLOW CATCH *.tcc control file in this FV branch, noting: Set up and execution of the TUFLOW FV model should only occur through the *.tcc file. The modeller should never create an *.fvc file References to boundary, geometry and files etc, should point into the TUFLOWFV directory structure from the *.tcc, for example Figure K.5: Example of referencing TUFLOW FV files from a *.tcc TUFLOW CATCH control file The TUFLOW CATCH simulation should use the TUFLOW FV calibration only configuration. This does not involve making any changes to the Catchment Hydraulic Model block of the *.tcc (which will be modified by the TUFLOW HPC modeller) At key stages of construction, the TUFLOW HPC modeller should stage, commit and push changes to the web project git add . git commit -m &quot;A useful commit message&quot; git push When construction is finished, the TUFLOW FV modeller is ready to merge into the main branch to populate the overall TUFLOW CATCH simulation The HPC and FV branches can be merged into the main branch to generate the overall TUFLOW CATCH simulation Because the modellers have been working in separate blocks of the *.tcc, and populating separate folder structures for base data (..\\TUFLOW\\ and ..\\TUFLOWFV\\), conflicts should be minimal Free packages such as Winmerge can be used to assist with this process. This is a suggestion only and not an endorsement of Winmerge by TUFLOW K.4 Possible workflow #2 The following is a possible addition to the workflow presented in Section K.3 for the two modellers delivering the same use case. Instead of the modellers working entirely independently until post calibration, it includes occasional provision of interim catchment inflows from the TUFLOW HPC modeller to the TUFLOW FV modeller to assist in calibration of the latter under wet conditions. This is accomplished by: Merging sufficiently complete HPC and FV branches into the main branch to produce a TUFLOW CATCH integrated configuration simulation from time to time, instead of only at the end of individual calibration tasks Executing TUFLOW CATCH in integrated configuration to produce all spatially and temporally resolved boundary inflows for TUFLOW FV Add, commit and push the boundary files to the main branch Copy the boundary files (including header blocks (.fvcatchbc) and data files (.csv)) to the \\TUFLOWCATCH\\bc_dbase\\ folder in the FV branch being used by the TUFLOW FV modeller for subsequent access Rename the *.fvcatchbc file to be the same as the TUFLOW FV modellers *.tcc file name so that it is automatically found by the current *.tcc simulation Rerun the TUFLOW FV modeller’s *.tcc simulation, adding the command below inside the Receiving Model block so that blank catchment boundary files (the default) are not produced and so do not overwrite those developed in the above integrated TUFLOW CATCH simulation Preserve catchment inflows == ON The TUFLOW FV modeller can then continue the calibration process with revised inflows. The above process can be repeated at intervals that suit the modelling project and timelines. Once complete, the HPC and FV branches can be finally merged, and the full TUFLOW CATCH simulation executed "],["App-FFE-1.html", "Appendix L File Format Examples L.1 Context L.2 Input File Format Examples L.3 Output File Format Examples L.4 Legacy File Formats", " Appendix L File Format Examples L.1 Context MJS To show an example of key input and output file formats referencing the example models… L.2 Input File Format Examples To be added. L.2.1 2D HD Simulation Class L.2.1.1 Computational Mesh .2dm format - Cartesian (Metric) .2dm format - Cartesian (US Customary) .2dm format - Spherical (Metric) L.2.1.2 Bathymetry Cell Elevation File ID Cell Elevation File Coordinate GRID TIN Breakline Polygon L.2.1.3 Initial Conditions Initial Condition 2D Restart File L.2.1.4 Boundary Conditions CSV (Hours) CSV (ISODATE) CSV (Stage Discharge) CSV (Sloping Water Surface) CSV (Tropical Cyclone Track) CSV (Moving Boundary) NetCDF (Water Level Curtain) NetCDF (Meterological) CSV (Meteorological) NetCDF (Spectral Wave) NetCDF (2D Inflow Grid) Transport File L.2.1.5 Hydraulic Structures To be completed… flux files control files width file blockage file energy loss file L.2.2 3D HD Simulation Class L.2.2.1 Computational Mesh Vertical Layering L.2.2.2 Initial Conditions Initial Condition 3D L.2.2.3 Boundary Conditions Vertical distribution CSV NetCDF (3D Inflow Grid) NetCDF (Profile) L.2.2.4 Hydraulic Structures Vertical distribution CSV L.2.3 AD Simulation Class L.2.3.1 Initial Conditions Initial condition 2d or 3d L.2.3.2 Boundary Conditions NetCDF (Mass Grid) NetCDF (Scalar Grid) NetCDF (Ocean) L.2.4 ST Simulation Class To be populated… L.2.5 WQ Simulation Class To be populated… L.2.6 PT Simulation Class To be populated… L.3 Output File Format Examples To be added. L.4 Legacy File Formats Cell Elevation Polyline File (Legacy) Cell Elevation Polygon File (Legacy) Nodestring Polyline File (Legacy) Output Points File (Legacy) "],["references-1.html", "References", " References Ansar M. and Nair S. (2003). Flow Computations at STA-1 West Gated Spillways. South Florida Water Management District. Australian Emergency Management Institute. (2014). Australian Emergency Management Handbook 7: Managing Floodplain Best Practice in Flood Risk Management in Australia. https://knowledge.aidr.org.au/media/3521/adr-handbook-7.pdf Austroads. (1994). Waterway Design - a Guide to the Hydraulic Design of Bridges, Culverts and Floodways. https://austroads.com.au/ Austroads. (2018). Guide to Bridge Technology Part 8, Hydraulic Design of Waterway Structures. https://austroads.com.au/ Babister, M., &amp; Barton, C. (2012). Two Dimensional Modelling in Urban and Rural Floodplains Stage 1 &amp; 2 Report. https://arr.ga.gov.au/__data/assets/pdf_file/0019/40573/ARR_Project15_TwoDimensional_Modelling_DraftReport.pdf Barton, C. (2001). Flow Through an Abrupt Constriction – 2D Hydrodynamic Model Performance and Influence of Spatial Resolution (C. Barton, Ed.) [M.Eng.Sc Master Thesis]. https://tuflow.com/media/4983/2001-flow-through-an-abrupt-constriction-2d-hydrodynamic-performance-and-influence-of-spatial-resolution-barton-thesis.pdf Benham, S., &amp; Rogencamp, G. (2003). Appliction of 2D Flood Models with 1D Drainage Elements. NSW FMA Conference. ? Bos, M. (1976). Discharge Measurement Structures (Publication No. 161). Delft Hydraulic Laboratory. https://www.samsamwater.com/library/pub20.pdf Bos, M. (1989). Discharge Measurement Structures (3rd revised edition.). International Institute for Land Reclamation; Improvement. https://www.samsamwater.com/library/pub20.pdf Boyte, C. (2014). The Application of Direct Rainfall Models as Hydrologic Models Incorporating Hydraulic Resistance at Shallow Depths [B.Eng Thesis]. https://tuflow.com/media/5009/2014-the-application-of-direct-rainfall-models-as-hydrologic-models-incorporating-hydraulic-resistance-at-shallow-depths-boyte-thesis.pdf Bradley, J. (1978). Hydraulics of Bridge Waterways (HDS 1, FIWA). Bridge Division. https://www.fhwa.dot.gov/engineering/hydraulics/pubs/hds1.pdf CIWEM. (2009). Integrated Urban Drainage Modelling Guide. CIWEM. Collecutt, G., Baeumer, U., Gao, S., &amp; Syme, W. (2022). Bridge Deck Afflux Modelling – Benchmarking of CFD and SWE Codes to Real-World Data. Hydrology &amp; Water Resources Symposium. https://tuflow.com/media/7554/2022-bridge-deck-afflux-modelling-benchmarking-of-cfd-and-swe-codes-to-real-world-data-collecutt-et-al-hwrs.pdf Collecutt, G., Gao, S., &amp; Syme, W. (2020). Mesh-Size Insensitive Turbulence Modelling for the 2D Shallow Water Equations. River Flow 2020, pp. 1–9. https://tuflow.com/media/5023/2020-mesh-size-insensitive-turbulence-modelling-for-the-2d-shallow-water-equations-collecutt-et-al-iahr-river-flow-delft.pdf Collecutt, G., &amp; Syme, B. (2017). Experimental Benchmarking of Mesh Size and Time-Step Convergence for a 1st and 2nd Order SWE Finite Volume Scheme. Proceedings of the 37th IAHR World Congress. https://www.tuflow.com/Download/Publications/07-31-1369.pdf Cox, R., Shard, T., &amp; Blacka, M. (2010). Australian Rainfall and Runoff Revision Project 10: Appropriate Safety Criteria for People. Austalian Institute of Engineers. https://arr.ga.gov.au/__data/assets/pdf_file/0006/40578/ARR_Project_10_Stage1_report_Final.pdf CSIRO. (2000). Floodplain Management in Australia Best Practice Principles and Guidelines. CSIRO Publishing. DEFRA. (2006a). DEFRA r&amp;d Outputs: Flood Risks to People Phase Two Draft FD2321/TR1 and TR2. DEFRA. https://assets.publishing.service.gov.uk/media/602bbc3de90e07055f646148/Flood_risks_to_people_-_Phase_2_Guidance_Document_Technical_report.pdf DEFRA. (2006b). Flood Risks to People Phase 2 FD2321/TR1 the Flood Risks to People Methodology. DEFRA. https://assets.publishing.service.gov.uk/media/602bbc768fa8f50383c41f80/Flood_risks_to_people_-_Phase_2_The_flood_risks_to_people_methodology_technical_report.pdf DHI. (2009). MOUSE PIPE FLOW – Reference Manual. Danish Hydraulic Institute. https://manuals.mikepoweredbydhi.help/2017/Cities/MOUSEPipeFlowReference.pdf Environment Agency. (2004). Tidal Thames Embayment Inundation Study. EA, Halcrow, TUFLOW. Environment Agency. (2006). UK FD2321 Technical Report - Flood Risks to People: Phase 2 Project Record. UK Government; https://assets.publishing.service.gov.uk/media/602bbb768fa8f50386a7f8aa/Flood_risks_to_people_-_Phase_2_Project_Record.pdf. Environment Agency. (2008). Explanatory Note for FD2320 and FD2321 Project Record. https://assets.publishing.service.gov.uk/media/602bbdcfe90e070561b31432/Explanatory_note_for_FD2320_and_FD2321_project_record.pdf. Environment Agency. (2010). The Fluvial Design Guide. Environment Agency. Falconer, R. A., Lin, B., &amp; Kashefipour, S. M. (2005). Modelling Water Quality Processes in Estuaries. In P. B. Bates, S. N. Lane, &amp; R. I. Furguson (Eds.), Computational fluid dynamics: Applications in environmental hydraulics. John Wiley; Sons. Fringer, O. B., Armfield, S. W., &amp; Street, R. L. (2005). Reducing Numerical Diffusion in Interfacial Gravity Wave Simulations. International Journal for Numerical Methods in Fluids, 49, 301–329. Gao, S., Ryan, P., Syme, W., &amp; Collecutt, G. (2022). The End of the 1D Open Channel Cross-Section? Hydrology &amp; Water Resources Symposium. https://tuflow.com/media/7547/2022-the-end-of-the-1d-open-channel-cross-section-gao-et-al-hwrs.pdf GHD. (2011). MBRC Storm Tide Management Study: Stage 1 – Scoping Report. Hamilton City Council. (2012). Flood Mapping. https://hamilton.govt.nz/property-rates-and-building/district-plan/flood-mapping/. Henderson, F. (1966). Open Channel Flow. Macmillan. Holland, G. J. (1980). An Analytic Model of the Wind and Pressure Profiles in Hurricanes. Monthly Weather Review, 108(8), 1212–1218. https://doi.org/10.1175/1520-0493(1980)108&lt;1212:AAMOTW&gt;2.0.CO;2 HR Wallingford. (1988). Afflux at Arch Bridges. https://eprints.hrwallingford.com/219/1/SR182-Afflux-arch-bridges-HRWallingford.pdf Huxley, C. (2004). TUFLOW Testing and Validation (B. ENG. Christopher Dylan Huxley, Ed.) [Thesis]. https://www.tuflow.com/Download/Publications/TUFLOW%20Validation%20and%20Testing,%20Huxley,%202004.pdf Huxley, C., Syme, W., Ryan, P., &amp; Collecutt, G. (2022). Hydraulic Modelling 2D Cell Size Result Convergence – Comparing the Performance of Different Shallow Water Equation Solution Schemes. Hydrology and Water Resources Symposium, Engineers Australia. https://www.tuflow.com/media/7555/2022-hydraulic-modelling-2d-cell-size-result-convergence-huxley-et-al-hwrs.pdf Kitts, D., Syme, W., Gao, S., Collecutt, G., &amp; Ryan, P. (2020). Mesh Orientation and Cell Size Sensitivity in 2D SWE Solvers. IAHR River Flow Conference. https://tuflow.com/media/5022/2020-mesh-orientation-and-cell-size-sensitivity-in-2d-swe-solvers-kitts-et-al-iahr-river-flow-delft.pdf Leonard, B. P. (1991). The ULTIMATE Conservative Difference Scheme Applied to Unsteady One-Dimensional Advection. Computer Methods in Applied Mechanics and Engineering, 88(1), 17–74. Leonard, B. P., MacVean, M. K., &amp; Lock, A. P. (1993). Positivity-Preserving Numerical Schemes for Multidimensional Advection (No. 93N27091). NASA Centre for Aerospace Information. Leonard, B. P., &amp; Niknafs, H. S. (1991). Cost-Effective Accurate Coarse-Grid Method for Highly Convective Multidimensional Unsteady Flows (No. 91N21075). NASA Centre for Aerospace Information. McDonnell, B., Wu, J. X., Ratliff, K., Mullapudi, A., &amp; Tryby, M. (2021). Open Water Analytics Stormwater Management Model (Version 5.1.13). Zenodo. https://doi.org/10.5281/zenodo.5484299 Melbourne Water. (2016). Flood Mapping Projects Guidelines and Technical Specifications (Version 1). Miller, D. (1994). Discharge Characteristics IAHR Hydraulic Structures Design Manual (No. No.8; pp. 249 pages). Hydraulic Design Considerations, Balkema Publ. Morrison, W., &amp; Smith, P. (1978). A Practical Application of a Network Model Numerical Simulation of Fluid Motion. North Holland Publishing Company. Neelz, S., &amp; Pender, G. (2013). Benchmarking the Latest Generation of 2D Hydaulic Modeling Packages. Environment Agency. https://doi.org/SC120002/R NSW Goverment. (2005a). Floodplain Development Manual: The Management of Flood Liable Land (pp. 149 pages). Department of Infrastructure, Planning; Natural Resources (NSW Government). https://www.environment.nsw.gov.au/-/media/OEH/Corporate-Site/Documents/Water/Floodplains/floodplain-development-manual.pdf NSW Goverment. (2005b). Floodplain Management Manual. NSW Department of Land; Water Conservation (NSW Government). Ollett, P., &amp; Syme, B. (2016). ARR blockage: Numerical implementation and three case studies. http://www.hydralinc.com/wp-content/uploads/Ollett-Syme-2016-ARR-Blockage.pdf Port Macquarie-Hastings Council. (2018). PORT MACQUARIE-HASTINGS COUNCIL FLOOD POLICY. https://www.pmhc.nsw.gov.au/files/assets/public/v/1/document-files/your-council/publications/policies/port-macquarie-hastings-council-flood-adopted-2018-12-12.pdf. Queensland Government. (2001). Queensland Climate Change and Community Vulnerability to Tropical Cyclones - Ocean Hazrds Assessment. https://www.systemsengineeringaustralia.com.au/download/Ocean_Hazards_Assess_Stage1A_revised.pdf Queensland Reconstruction Authority. (2012). Planning for Stronger, More Resilient Fl Oodplains: Part 2. https://www.qra.qld.gov.au/sites/default/files/2018-10/resilient-floodplains-part2-full_0.pdf. Rawls, W., Brakesiek, J., &amp; Miller, N. (1983). Green-Ampt Infiltration Parameters from Soils Data. Journal of Hydraulic Engineering, vol 109, 62–71. Ryan, P., Syme, W., Gao, S., &amp; Collecutt, G. (2022). Irect Rainfall Hydraulic Model Validation. Hydrology &amp; Water Resources Symposium. https://www.tuflow.com/media/7545/2022-direct-rainfall-hydraulic-model-validation-ryan-et-al-hwrs.pdf Stelling, G. (1984). On the Construction of Computational Methods for Shallow Water Flow Problems. Rijkswaterstaat Communications. Syme, W. (1991). Dynamically Linked Two Dimensional / One-Dimensional Hydrodynamic Modelling Program for Rivers, Estuaries and Coastal Waters (W. Syme, Ed.) [M.Eng.Sc(100% Research) Thesis]. Dept of Civil Engineering. https://tuflow.com/media/4982/1991-tuflow-dynamically-linked-2d-and-1d-hydrodynamic-modelling-syme-thesis.pdf Syme, W. (2001a). Modelling of Bends and Hydraulic Structures in a Two-Dimensional Scheme. The Institution of Engineers, Australia Conference on Hydraulics in Civil Engineering. https://tuflow.com/media/4984/2001-modelling-of-bends-and-hydraulic-structures-in-a-2d-scheme-syme.pdf Syme, W. (2001b). TUFLOW – Two &amp; One-Dimensional Unsteady FLOW Software for Rivers, Estuaries and Coastal Waters. The Institution of Engineers, Australia 2D Seminar. https://tuflow.com/media/4985/2001-tuflow-two-and-one-dimensional-unsteady-flow-software-for-rivers-estuaries-and-coastal-waters-syme.pdf Syme, W. (2008). Flooding in Urban Areas - 2D Modelling Approaches for Buildings and Fences. Engineers Australia, 9th National COnference on Hydraulics in Water Enginnering. https://tuflow.com/media/4997/2008-flooding-in-urban-areas-2d-modelling-approaches-for-buildings-and-fences-syme-hwe-aus.pdf Syme, W., Nielsen, C., &amp; Charteris, A. (1998). Comparison of Two-Dimensional Hydrodynamic Modelling Systems Part One - Flow Through a Constriction. International Conference on Hydraulics in Civil Engineering. TUFLOW. (2018). TUFLOW Classic/HPC User Manual Build 2018-03-AD. https://downloads.tuflow.com/TUFLOW/Releases/2018-03/TUFLOW%20Manual.2018-03-AD.pdf TUFLOW. (2020). TUFLOW Classic and HPC 2020-01 and 2020-10 Release Notes. https://downloads.tuflow.com/TUFLOW/Releases/2020-10/TUFLOW%20Release%20Notes.2020-10-AF.pdf Tullis, B., &amp; Robinson, S. (2008). Quantifying Culvert Exit Loss. Journal of Irrigation and Drainage Engineering, Vol. 134(No. 2), pp. 263–266. USACE. (1977). Hydraulic Design Criteria-Sheets 312. US Army Corp of Engineers. https://apps.dtic.mil/sti/tr/pdf/ADA092238.pdf USACE. (1987). Hydraulic Design Criteria-Sheets 111-1 to 111-14. US Army Corp of Engineers. https://apps.dtic.mil/sti/tr/pdf/ADA092237.pdf USBR. (1987). Design of Small Dams [Technology &amp; Engineering]. U.S. Dept. of the Interior, Bureau of Reclamation, 1987-. https://www.usbr.gov/tsc/techreferences/mands/mands-pdfs/SmallDams.pdf USDA. (1986). Urban Hydrology for Small Watersheds Technical Release 55 (TR-55). https://nationalstormwater.com/wp/wp-content/uploads/2020/07/Urban-Hydrology-for-Small-Watersheds-TR-55.pdf Weeks, W., Barthelmess, A., Rigby, E., Witheridge, G., &amp; Adamson, R. (2009). Australian Rainfall and Runoff Revision Project 11: Blockage of Hydraulic Structures. Austalian Institute of Engineers. https://doi.org/P11/S1/007 Weeks, W., Witheridge, G., Rigby, E., Barthelmess, A., &amp; O’Loughlin, G. (2013). Australian Rainfall and Runoff Revision Project 11: Blockage of Hydraulic Structures. Austalian Institute of Engineers. https://doi.org/P11/S2/021 Witheridge, G. (2009). Hydraulic Analysis of the Debris Blockage of Culvert Inlets. Catchments &amp; Creek Pty Ltd. Wu, J. (1980). Wind-Stress Coefficients over Sea Surface Near Neutral Conditions—a Revisit. Journal of Physical Oceanography, Vol. 10(5), pp. 727–740. https://doi.org/https://doi.org/10.1175/1520-0485(1980)010&lt;0727:WSCOSS&gt;2.0.CO;2 Wu, J. (1982). Wind-Stress Coefficients over Sea Surface from Breeze to Hurricane. Journal of Geophysical Research, Vol. 87(C12), pp. 9704–9706. https://doi.org/https://doi.org/10.1029/JC087iC12p09704 Wu, W., Shields Jr., F. D., Bennett, S. J., &amp; Wang, S. S. Y. (2005). A Depth-Averaged Two-Dimensional Model for Flow, Sediment Transport, and Bed Topography in Curved Channels with Riparian Vegetation. Water Resources Research, 41(3). https://doi.org/https://doi.org/10.1029/2004WR003730 Wu, &amp; Falconer, R. A. (2000). A Mass Conservative 3-d Numerical Model for Predicting Solute Fluxes in Estuarine Waters. Advances in Water Resources, 23(5), 531–543. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
